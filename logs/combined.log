{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'Coba 2', id_sbagian: '3', id_skategori: '1' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:33:10"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'Coba 2', id_sbagian: '3', id_skategori: '1' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:33:53"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'Coba 2', id_sbagian: '3', id_skategori: '1' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:35:12"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'Coba 2', id_sbagian: '3', id_skategori: '1' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:35:13"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'Coba 2', id_sbagian: '3', id_skategori: '1' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:35:14"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'Coba 2', id_sbagian: '3', id_skategori: '1' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:35:14"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'Coba 2', id_sbagian: '3', id_skategori: '1' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:35:15"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'Coba 2', id_sbagian: '3', id_skategori: '1' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:35:15"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'Coba 2', id_sbagian: '3', id_skategori: '1' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:35:16"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'Coba 2', id_sbagian: '5', id_skategori: '3' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:35:37"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'Coba 2', id_sbagian: '5', id_skategori: '3' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:35:59"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'Coba 2', id_sbagian: '5', id_skategori: '3' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:36:00"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'Coba 2', id_sbagian: '5', id_skategori: '3' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:36:01"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'Coba 2', id_sbagian: '5', id_skategori: '3' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:36:02"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'Coba 2', id_sbagian: '5', id_skategori: '3' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:36:03"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"Coba 2\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'Coba 2', id_sbagian: '5', id_skategori: '3' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:36:03"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"asdasd\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"asdasd\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'asdasd', id_sbagian: '3', id_skategori: '1' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:41:38"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"asdasd\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_service.ts:62:48\\n' +\n    '\\n' +\n    '  59 //ANCHOR - Tambah Produk\\n' +\n    '  60 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  61     try {\\n' +\n    '→ 62         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"asdasd\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: NaN,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  request: {\n    url: '/admin/product/addProduct',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_produk: 'asdasd', id_sbagian: '3', id_skategori: '1' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:42:13"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_department_service.ts:19:48\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Bagian\\n' +\n    '  17 export async function add_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  18     try {\\n' +\n    '→ 19         const department = await prisma.bagian.create({\\n' +\n    '               data: {\\n' +\n    '                 isActive: true,\\n' +\n    '                 idJenisBagian: undefined,\\n' +\n    '             +   namaBagian: String\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaBagian: true,\\n' +\n    '                 isActive: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `namaBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.bagian.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_department_service.ts:19:48\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Bagian\\n' +\n    '  17 export async function add_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  18     try {\\n' +\n    '→ 19         const department = await prisma.bagian.create({\\n' +\n    '               data: {\\n' +\n    '                 isActive: true,\\n' +\n    '                 idJenisBagian: undefined,\\n' +\n    '             +   namaBagian: String\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaBagian: true,\\n' +\n    '                 isActive: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `namaBagian` is missing.',\n  request: {\n    url: '/admin/department/addDepartment',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_xbagian: 'asdad', xkategori: '1' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:47:01"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_department_service.ts:19:48\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Bagian\\n' +\n    '  17 export async function add_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  18     try {\\n' +\n    '→ 19         const department = await prisma.bagian.create({\\n' +\n    '               data: {\\n' +\n    '                 isActive: true,\\n' +\n    '                 idJenisBagian: undefined,\\n' +\n    '             +   namaBagian: String\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaBagian: true,\\n' +\n    '                 isActive: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `namaBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.bagian.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_department_service.ts:19:48\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Bagian\\n' +\n    '  17 export async function add_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  18     try {\\n' +\n    '→ 19         const department = await prisma.bagian.create({\\n' +\n    '               data: {\\n' +\n    '                 isActive: true,\\n' +\n    '                 idJenisBagian: undefined,\\n' +\n    '             +   namaBagian: String\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaBagian: true,\\n' +\n    '                 isActive: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `namaBagian` is missing.',\n  request: {\n    url: '/admin/department/addDepartment',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_xbagian: 'asdasd', xkategori: '1' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:47:40"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_department_service.ts:19:48\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Bagian\\n' +\n    '  17 export async function add_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  18     try {\\n' +\n    '→ 19         const department = await prisma.bagian.create({\\n' +\n    '               data: {\\n' +\n    '                 isActive: true,\\n' +\n    '                 idJenisBagian: undefined,\\n' +\n    '             +   namaBagian: String\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaBagian: true,\\n' +\n    '                 isActive: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `namaBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.bagian.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_department_service.ts:19:48\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Bagian\\n' +\n    '  17 export async function add_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  18     try {\\n' +\n    '→ 19         const department = await prisma.bagian.create({\\n' +\n    '               data: {\\n' +\n    '                 isActive: true,\\n' +\n    '                 idJenisBagian: undefined,\\n' +\n    '             +   namaBagian: String\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaBagian: true,\\n' +\n    '                 isActive: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `namaBagian` is missing.',\n  request: {\n    url: '/admin/department/addDepartment',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_xbagian: 'asdasd', xkategori: '1' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:47:41"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_department_service.ts:19:48\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Bagian\\n' +\n    '  17 export async function add_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  18     try {\\n' +\n    '→ 19         const department = await prisma.bagian.create({\\n' +\n    '               data: {\\n' +\n    '                 isActive: true,\\n' +\n    '                 idJenisBagian: undefined,\\n' +\n    '             +   namaBagian: String\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaBagian: true,\\n' +\n    '                 isActive: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `namaBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.bagian.create()` invocation in\\n' +\n    'E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_department_service.ts:19:48\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Bagian\\n' +\n    '  17 export async function add_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  18     try {\\n' +\n    '→ 19         const department = await prisma.bagian.create({\\n' +\n    '               data: {\\n' +\n    '                 isActive: true,\\n' +\n    '                 idJenisBagian: undefined,\\n' +\n    '             +   namaBagian: String\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaBagian: true,\\n' +\n    '                 isActive: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `namaBagian` is missing.',\n  request: {\n    url: '/admin/department/addDepartment',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { nama_xbagian: 'asdasd', xkategori: '1' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:47:43"}
{"level":"error","message":"[ERROR] CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ],\n  request: {\n    url: '/users/rb/addRequestRB',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: {\n      data: [\n        {\n          uuid: 'e7G7gW7sk_PrjaySbQ6Vq',\n          idProduk: 3,\n          namaProduk: 'Ever E ',\n          mbr: [Array]\n        },\n        [length]: 1\n      ]\n    },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:58:33"}
{"level":"error","message":"[ERROR] CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ],\n  request: {\n    url: '/users/rb/addRequestRB',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: {\n      data: [\n        {\n          uuid: 'e7G7gW7sk_PrjaySbQ6Vq',\n          idProduk: 3,\n          namaProduk: 'Ever E ',\n          mbr: [Array]\n        },\n        [length]: 1\n      ]\n    },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:58:35"}
{"level":"error","message":"[ERROR] CustomError: {\n  message: 'Password Salah',\n  context: [\n    { message: 'Password Salah', context: { code: 'L002' } },\n    [length]: 1\n  ],\n  request: {\n    url: '/login',\n    method: 'POST',\n    ip: '::1',\n    body: { email: 'ikhsanndewa@gmail.com' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:58:53"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: 'N/A',\n          message: \"Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.\"\n        }\n      }\n    },\n    [length]: 1\n  ],\n  request: {\n    url: '/admin/product_rb/confirmPermintaan/48',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { action: 'confirm' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 16:59:54"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: 'N/A',\n          message: \"Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.\"\n        }\n      }\n    },\n    [length]: 1\n  ],\n  request: {\n    url: '/admin/product_rb/confirmPermintaan/48',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { action: 'confirm' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 17:00:12"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: 'N/A',\n          message: \"Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.\"\n        }\n      }\n    },\n    [length]: 1\n  ],\n  request: {\n    url: '/admin/product_rb/confirmPermintaan/48',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { action: 'confirm' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 17:01:18"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: 'N/A',\n          message: \"Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.\"\n        }\n      }\n    },\n    [length]: 1\n  ],\n  request: {\n    url: '/admin/product_rb/confirmPermintaan/48',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { action: 'confirm' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 17:01:21"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: 'N/A',\n          message: \"Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.\"\n        }\n      }\n    },\n    [length]: 1\n  ],\n  request: {\n    url: '/admin/product_rb/confirmPermintaan/48',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { action: 'confirm' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 17:01:29"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: 'N/A',\n          message: \"Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.\"\n        }\n      }\n    },\n    [length]: 1\n  ],\n  request: {\n    url: '/admin/product_rb/confirmPermintaan/48',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { action: 'confirm' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 17:01:30"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: 'N/A',\n          message: \"Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.\"\n        }\n      }\n    },\n    [length]: 1\n  ],\n  request: {\n    url: '/admin/product_rb/confirmPermintaan/48',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { action: 'confirm' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 17:01:31"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: 'N/A',\n          message: \"Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.\"\n        }\n      }\n    },\n    [length]: 1\n  ],\n  request: {\n    url: '/admin/product_rb/confirmPermintaan/48',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { action: 'confirm' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 17:01:32"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: 'N/A',\n          message: \"Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.\"\n        }\n      }\n    },\n    [length]: 1\n  ],\n  request: {\n    url: '/admin/product_rb/confirmPermintaan/48',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { action: 'confirm' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 17:01:33"}
{"level":"error","message":"[ERROR] PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `N/A`. Message: `Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: 'N/A',\n          message: \"Failed to deserialize column of type 'void'. If you're using $queryRaw and this column is explicitly marked as `Unsupported` in your Prisma schema, try casting this column to any supported Prisma type such as `String`.\"\n        }\n      }\n    },\n    [length]: 1\n  ],\n  request: {\n    url: '/admin/product_rb/confirmPermintaan/48',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { action: 'confirm' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 17:01:34"}
{"level":"error","message":"[ERROR] UnknownError: {\n  error: Error: Transaksi sudah dikonfirmasi\n      at prisma.$transaction.timeout (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\services\\admin\\admin_product_rb_service.ts:279:23)\n      at async Proxy._transactionWithCallback (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\node_modules\\@prisma\\client\\runtime\\library.js:130:8000)\n      at async Object.accept_permintaan (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\services\\admin\\admin_product_rb_service.ts:268:40)\n      at async confirm_request (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\controller\\admin\\admin_product_rb.ts:51:39) {\n    [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n      '    at prisma.$transaction.timeout (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_rb_service.ts:279:23)\\n' +\n      '    at async Proxy._transactionWithCallback (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:130:8000)\\n' +\n      '    at async Object.accept_permintaan (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_rb_service.ts:268:40)\\n' +\n      '    at async confirm_request (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\controller\\\\admin\\\\admin_product_rb.ts:51:39)',\n    [message]: 'Transaksi sudah dikonfirmasi'\n  },\n  request: {\n    url: '/admin/product_rb/confirmPermintaan/49',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { action: 'confirm' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 17:05:51"}
{"level":"error","message":"[ERROR] UnknownError: {\n  error: Error: Transaksi sudah dikonfirmasi\n      at prisma.$transaction.timeout (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\services\\admin\\admin_product_rb_service.ts:279:23)\n      at async Proxy._transactionWithCallback (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\node_modules\\@prisma\\client\\runtime\\library.js:130:8000)\n      at async Object.accept_permintaan (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\services\\admin\\admin_product_rb_service.ts:268:40)\n      at async confirm_request (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\controller\\admin\\admin_product_rb.ts:51:39) {\n    [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n      '    at prisma.$transaction.timeout (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_rb_service.ts:279:23)\\n' +\n      '    at async Proxy._transactionWithCallback (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:130:8000)\\n' +\n      '    at async Object.accept_permintaan (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_rb_service.ts:268:40)\\n' +\n      '    at async confirm_request (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\controller\\\\admin\\\\admin_product_rb.ts:51:39)',\n    [message]: 'Transaksi sudah dikonfirmasi'\n  },\n  request: {\n    url: '/admin/product_rb/confirmPermintaan/49',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { action: 'confirm' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 17:05:52"}
{"level":"error","message":"[ERROR] UnknownError: {\n  error: Error: Transaksi sudah dikonfirmasi\n      at prisma.$transaction.timeout (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\services\\admin\\admin_product_rb_service.ts:279:23)\n      at async Proxy._transactionWithCallback (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\node_modules\\@prisma\\client\\runtime\\library.js:130:8000)\n      at async Object.accept_permintaan (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\services\\admin\\admin_product_rb_service.ts:268:40)\n      at async confirm_request (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\controller\\admin\\admin_product_rb.ts:51:39) {\n    [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n      '    at prisma.$transaction.timeout (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_rb_service.ts:279:23)\\n' +\n      '    at async Proxy._transactionWithCallback (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:130:8000)\\n' +\n      '    at async Object.accept_permintaan (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_rb_service.ts:268:40)\\n' +\n      '    at async confirm_request (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\controller\\\\admin\\\\admin_product_rb.ts:51:39)',\n    [message]: 'Transaksi sudah dikonfirmasi'\n  },\n  request: {\n    url: '/admin/product_rb/confirmPermintaan/49',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { action: 'confirm' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 17:05:52"}
{"level":"error","message":"[ERROR] UnknownError: {\n  error: Error: Transaksi sudah dikonfirmasi\n      at prisma.$transaction.timeout (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\services\\admin\\admin_product_rb_service.ts:279:23)\n      at async Proxy._transactionWithCallback (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\node_modules\\@prisma\\client\\runtime\\library.js:130:8000)\n      at async Object.accept_permintaan (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\services\\admin\\admin_product_rb_service.ts:268:40)\n      at async confirm_request (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\controller\\admin\\admin_product_rb.ts:51:39) {\n    [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n      '    at prisma.$transaction.timeout (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_rb_service.ts:279:23)\\n' +\n      '    at async Proxy._transactionWithCallback (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:130:8000)\\n' +\n      '    at async Object.accept_permintaan (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_rb_service.ts:268:40)\\n' +\n      '    at async confirm_request (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\controller\\\\admin\\\\admin_product_rb.ts:51:39)',\n    [message]: 'Transaksi sudah dikonfirmasi'\n  },\n  request: {\n    url: '/admin/product_rb/confirmPermintaan/49',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { action: 'confirm' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 17:05:52"}
{"level":"error","message":"[ERROR] UnknownError: {\n  error: Error: Transaksi sudah dikonfirmasi\n      at prisma.$transaction.timeout (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\services\\admin\\admin_product_rb_service.ts:279:23)\n      at async Proxy._transactionWithCallback (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\node_modules\\@prisma\\client\\runtime\\library.js:130:8000)\n      at async Object.accept_permintaan (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\services\\admin\\admin_product_rb_service.ts:268:40)\n      at async confirm_request (E:\\Project\\node\\Monitoring MBR\\backend_mbr\\controller\\admin\\admin_product_rb.ts:51:39) {\n    [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n      '    at prisma.$transaction.timeout (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_rb_service.ts:279:23)\\n' +\n      '    at async Proxy._transactionWithCallback (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:130:8000)\\n' +\n      '    at async Object.accept_permintaan (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\services\\\\admin\\\\admin_product_rb_service.ts:268:40)\\n' +\n      '    at async confirm_request (E:\\\\Project\\\\node\\\\Monitoring MBR\\\\backend_mbr\\\\controller\\\\admin\\\\admin_product_rb.ts:51:39)',\n    [message]: 'Transaksi sudah dikonfirmasi'\n  },\n  request: {\n    url: '/admin/product_rb/confirmPermintaan/49',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: { action: 'confirm' },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 17:05:59"}
{"level":"error","message":"[ERROR] CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ],\n  request: {\n    url: '/users/rb/addRequestRB',\n    method: 'POST',\n    ip: '::ffff:127.0.0.1',\n    body: {\n      data: [\n        {\n          uuid: 'maLadRC3y8hwH8_0K7-8s',\n          idProduk: 2,\n          namaProduk: 'Paramex',\n          mbr: [Array]\n        },\n        {\n          uuid: 'Ll0IxtX84iKbEAbGzJkZL',\n          idProduk: 3,\n          namaProduk: 'Ever E ',\n          mbr: [Array]\n        },\n        [length]: 2\n      ]\n    },\n    query: {},\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 17:36:54"}
{"level":"error","message":"[ERROR] CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ],\n  request: {\n    url: '/users/rb/getRBReturnByProduct/2?limit=10&status=all',\n    method: 'GET',\n    ip: '::ffff:127.0.0.1',\n    body: {},\n    query: { limit: '10', status: 'all' },\n    params: {}\n  }\n}","service":"user-service","timestamp":"2025-08-17 17:40:59"}
