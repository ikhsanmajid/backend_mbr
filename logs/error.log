{"level":"error","message":"CustomError: {\n  message: 'Password Salah',\n  context: [\n    { message: 'Password Salah', context: { code: 'L002' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-26 20:14:08"}
{"level":"error","message":"CustomError: {\n  message: 'Password Salah',\n  context: [\n    { message: 'Password Salah', context: { code: 'L002' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-26 20:14:13"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-26 20:48:08"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-26 20:48:09"}
{"level":"error","message":"UnknownError: TypeError: The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received function getUTCDate\n    at Function.from (node:buffer:319:9)\n    at ServerResponse.send (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:194:22)\n    at D:\\Project\\node\\MBR\\backend\\routes\\admin_aggregator.ts:18:16\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:280:10) {\n  [stack]: 'TypeError: The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received function getUTCDate\\n' +\n    '    at Function.from (node:buffer:319:9)\\n' +\n    '    at ServerResponse.send (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:194:22)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\routes\\\\admin_aggregator.ts:18:16\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:280:10)',\n  code: 'ERR_INVALID_ARG_TYPE',\n  [message]: 'The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received function getUTCDate',\n  [Symbol(kIsNodeError)]: [Getter]\n}","service":"user-service","timestamp":"2024-08-26 20:57:40"}
{"level":"error","message":"UnknownError: TypeError: The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received function getUTCDate\n    at Function.from (node:buffer:319:9)\n    at ServerResponse.send (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:194:22)\n    at D:\\Project\\node\\MBR\\backend\\routes\\admin_aggregator.ts:18:16\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:280:10) {\n  [stack]: 'TypeError: The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received function getUTCDate\\n' +\n    '    at Function.from (node:buffer:319:9)\\n' +\n    '    at ServerResponse.send (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:194:22)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\routes\\\\admin_aggregator.ts:18:16\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:280:10)',\n  code: 'ERR_INVALID_ARG_TYPE',\n  [message]: 'The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received function getUTCDate',\n  [Symbol(kIsNodeError)]: [Getter]\n}","service":"user-service","timestamp":"2024-08-26 20:57:45"}
{"level":"error","message":"UnknownError: TypeError: The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received function getFullYear\n    at Function.from (node:buffer:319:9)\n    at ServerResponse.send (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:194:22)\n    at D:\\Project\\node\\MBR\\backend\\routes\\admin_aggregator.ts:18:16\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:280:10) {\n  [stack]: 'TypeError: The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received function getFullYear\\n' +\n    '    at Function.from (node:buffer:319:9)\\n' +\n    '    at ServerResponse.send (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:194:22)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\routes\\\\admin_aggregator.ts:18:16\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:280:10)',\n  code: 'ERR_INVALID_ARG_TYPE',\n  [message]: 'The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received function getFullYear',\n  [Symbol(kIsNodeError)]: [Getter]\n}","service":"user-service","timestamp":"2024-08-26 20:58:15"}
{"level":"error","message":"UnknownError: RangeError: Invalid status code: 2024\n    at ServerResponse.writeHead (node:_http_server:352:11)\n    at ServerResponse._implicitHeader (node:_http_server:338:8)\n    at ServerResponse.end (node:_http_outgoing:1072:10)\n    at ServerResponse.send (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:233:10)\n    at D:\\Project\\node\\MBR\\backend\\routes\\admin_aggregator.ts:18:16\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15 {\n  [stack]: 'RangeError: Invalid status code: 2024\\n' +\n    '    at ServerResponse.writeHead (node:_http_server:352:11)\\n' +\n    '    at ServerResponse._implicitHeader (node:_http_server:338:8)\\n' +\n    '    at ServerResponse.end (node:_http_outgoing:1072:10)\\n' +\n    '    at ServerResponse.send (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:233:10)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\routes\\\\admin_aggregator.ts:18:16\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15',\n  [message]: 'Invalid status code: 2024',\n  code: 'ERR_HTTP_INVALID_STATUS_CODE',\n  [Symbol(kIsNodeError)]: [Getter]\n}","service":"user-service","timestamp":"2024-08-26 20:58:21"}
{"level":"error","message":"UnknownError: RangeError: Invalid status code: 2024\n    at ServerResponse.writeHead (node:_http_server:352:11)\n    at ServerResponse._implicitHeader (node:_http_server:338:8)\n    at ServerResponse.end (node:_http_outgoing:1072:10)\n    at ServerResponse.send (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:233:10)\n    at D:\\Project\\node\\MBR\\backend\\routes\\admin_aggregator.ts:18:16\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15 {\n  [stack]: 'RangeError: Invalid status code: 2024\\n' +\n    '    at ServerResponse.writeHead (node:_http_server:352:11)\\n' +\n    '    at ServerResponse._implicitHeader (node:_http_server:338:8)\\n' +\n    '    at ServerResponse.end (node:_http_outgoing:1072:10)\\n' +\n    '    at ServerResponse.send (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:233:10)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\routes\\\\admin_aggregator.ts:18:16\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15',\n  [message]: 'Invalid status code: 2024',\n  code: 'ERR_HTTP_INVALID_STATUS_CODE',\n  [Symbol(kIsNodeError)]: [Getter]\n}","service":"user-service","timestamp":"2024-08-26 20:58:23"}
{"level":"error","message":"UnknownError: RangeError: Invalid status code: 2024\n    at ServerResponse.writeHead (node:_http_server:352:11)\n    at ServerResponse._implicitHeader (node:_http_server:338:8)\n    at ServerResponse.end (node:_http_outgoing:1072:10)\n    at ServerResponse.send (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:233:10)\n    at D:\\Project\\node\\MBR\\backend\\routes\\admin_aggregator.ts:18:16\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15 {\n  [stack]: 'RangeError: Invalid status code: 2024\\n' +\n    '    at ServerResponse.writeHead (node:_http_server:352:11)\\n' +\n    '    at ServerResponse._implicitHeader (node:_http_server:338:8)\\n' +\n    '    at ServerResponse.end (node:_http_outgoing:1072:10)\\n' +\n    '    at ServerResponse.send (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:233:10)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\routes\\\\admin_aggregator.ts:18:16\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15',\n  [message]: 'Invalid status code: 2024',\n  code: 'ERR_HTTP_INVALID_STATUS_CODE',\n  [Symbol(kIsNodeError)]: [Getter]\n}","service":"user-service","timestamp":"2024-08-26 20:58:24"}
{"level":"error","message":"UnknownError: RangeError: Invalid status code: 26\n    at ServerResponse.writeHead (node:_http_server:352:11)\n    at ServerResponse._implicitHeader (node:_http_server:338:8)\n    at ServerResponse.end (node:_http_outgoing:1072:10)\n    at ServerResponse.send (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:233:10)\n    at D:\\Project\\node\\MBR\\backend\\routes\\admin_aggregator.ts:18:16\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15 {\n  [stack]: 'RangeError: Invalid status code: 26\\n' +\n    '    at ServerResponse.writeHead (node:_http_server:352:11)\\n' +\n    '    at ServerResponse._implicitHeader (node:_http_server:338:8)\\n' +\n    '    at ServerResponse.end (node:_http_outgoing:1072:10)\\n' +\n    '    at ServerResponse.send (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:233:10)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\routes\\\\admin_aggregator.ts:18:16\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15',\n  [message]: 'Invalid status code: 26',\n  code: 'ERR_HTTP_INVALID_STATUS_CODE',\n  [Symbol(kIsNodeError)]: [Getter]\n}","service":"user-service","timestamp":"2024-08-26 20:58:40"}
{"level":"error","message":"UnknownError: TypeError: The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received function getUTCDate\n    at Function.from (node:buffer:319:9)\n    at ServerResponse.send (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:194:22)\n    at D:\\Project\\node\\MBR\\backend\\routes\\admin_aggregator.ts:18:16\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:280:10) {\n  [stack]: 'TypeError: The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received function getUTCDate\\n' +\n    '    at Function.from (node:buffer:319:9)\\n' +\n    '    at ServerResponse.send (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:194:22)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\routes\\\\admin_aggregator.ts:18:16\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:280:10)',\n  code: 'ERR_INVALID_ARG_TYPE',\n  [message]: 'The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received function getUTCDate',\n  [Symbol(kIsNodeError)]: [Getter]\n}","service":"user-service","timestamp":"2024-08-26 20:58:48"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n    '\\n' +\n    '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  220 \\n' +\n    '  221     try {\\n' +\n    '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n        '\\n' +\n        '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  220 \\n' +\n        '  221     try {\\n' +\n        '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 05:07:20"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n    '\\n' +\n    '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  220 \\n' +\n    '  221     try {\\n' +\n    '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n        '\\n' +\n        '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  220 \\n' +\n        '  221     try {\\n' +\n        '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 05:07:22"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n    '\\n' +\n    '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  220 \\n' +\n    '  221     try {\\n' +\n    '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n        '\\n' +\n        '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  220 \\n' +\n        '  221     try {\\n' +\n        '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 05:07:46"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n    '\\n' +\n    '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  220 \\n' +\n    '  221     try {\\n' +\n    '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n        '\\n' +\n        '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  220 \\n' +\n        '  221     try {\\n' +\n        '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 05:07:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:288:63\\n' +\n    '\\n' +\n    '  285 export async function delete_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  286     try {\\n' +\n    '  287 \\n' +\n    '→ 288         const deleteData = await prisma.bagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:288:63\\n' +\n        '\\n' +\n        '  285 export async function delete_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  286     try {\\n' +\n        '  287 \\n' +\n        '→ 288         const deleteData = await prisma.bagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'bagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 05:11:30"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n    '\\n' +\n    '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  220 \\n' +\n    '  221     try {\\n' +\n    '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n        '\\n' +\n        '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  220 \\n' +\n        '  221     try {\\n' +\n        '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 05:15:24"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n    '\\n' +\n    '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  220 \\n' +\n    '  221     try {\\n' +\n    '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n        '\\n' +\n        '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  220 \\n' +\n        '  221     try {\\n' +\n        '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 05:17:13"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n    '\\n' +\n    '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  220 \\n' +\n    '  221     try {\\n' +\n    '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n        '\\n' +\n        '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  220 \\n' +\n        '  221     try {\\n' +\n        '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 05:17:15"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n    '\\n' +\n    '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  220 \\n' +\n    '  221     try {\\n' +\n    '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n        '\\n' +\n        '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  220 \\n' +\n        '  221     try {\\n' +\n        '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 05:17:16"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n    '\\n' +\n    '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  220 \\n' +\n    '  221     try {\\n' +\n    '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:222:73\\n' +\n        '\\n' +\n        '  219 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  220 \\n' +\n        '  221     try {\\n' +\n        '→ 222         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 05:22:28"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n    '\\n' +\n    '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n    '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  319     try {\\n' +\n    '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n    '                where: {\\n' +\n    '                  AND: {\\n' +\n    '                    idBagian: 10,\\n' +\n    '              +     idJabatan: {\\n' +\n    '              +       equals: Int | IntFieldRefInput,\\n' +\n    '              +       in: Int[],\\n' +\n    '              +       notIn: Int[],\\n' +\n    '              +       lt: Int | IntFieldRefInput,\\n' +\n    '              +       lte: Int | IntFieldRefInput,\\n' +\n    '              +       gt: Int | IntFieldRefInput,\\n' +\n    '              +       gte: Int | IntFieldRefInput,\\n' +\n    '              +       not: Int | NestedIntFilter\\n' +\n    '              +     }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idJabatan` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n        '\\n' +\n        '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n        '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  319     try {\\n' +\n        '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n        '                where: {\\n' +\n        '                  AND: {\\n' +\n        '                    idBagian: 10,\\n' +\n        '              +     idJabatan: {\\n' +\n        '              +       equals: Int | IntFieldRefInput,\\n' +\n        '              +       in: Int[],\\n' +\n        '              +       notIn: Int[],\\n' +\n        '              +       lt: Int | IntFieldRefInput,\\n' +\n        '              +       lte: Int | IntFieldRefInput,\\n' +\n        '              +       gt: Int | IntFieldRefInput,\\n' +\n        '              +       gte: Int | IntFieldRefInput,\\n' +\n        '              +       not: Int | NestedIntFilter\\n' +\n        '              +     }\\n' +\n        '                  }\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `idJabatan` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n          '\\n' +\n          '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n          '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  319     try {\\n' +\n          '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n          '                where: {\\n' +\n          '                  AND: {\\n' +\n          '                    idBagian: 10,\\n' +\n          '              +     idJabatan: {\\n' +\n          '              +       equals: Int | IntFieldRefInput,\\n' +\n          '              +       in: Int[],\\n' +\n          '              +       notIn: Int[],\\n' +\n          '              +       lt: Int | IntFieldRefInput,\\n' +\n          '              +       lte: Int | IntFieldRefInput,\\n' +\n          '              +       gt: Int | IntFieldRefInput,\\n' +\n          '              +       gte: Int | IntFieldRefInput,\\n' +\n          '              +       not: Int | NestedIntFilter\\n' +\n          '              +     }\\n' +\n          '                  }\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `idJabatan` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.find_id_department_employment_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:38)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:316:37)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 05:26:22"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265     return { data: null }\\n' +\n    '  266 }\\n' +\n    '  267 \\n' +\n    '→ 268 const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265     return { data: null }\\n' +\n        '  266 }\\n' +\n        '  267 \\n' +\n        '→ 268 const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          target: 'usersonbagianonjabatan_idBagianJabatan_idUsers_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 05:27:00"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n    '\\n' +\n    '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n    '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  319     try {\\n' +\n    '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n    '                where: {\\n' +\n    '                  AND: {\\n' +\n    '                    idBagian: 7,\\n' +\n    '              +     idJabatan: {\\n' +\n    '              +       equals: Int | IntFieldRefInput,\\n' +\n    '              +       in: Int[],\\n' +\n    '              +       notIn: Int[],\\n' +\n    '              +       lt: Int | IntFieldRefInput,\\n' +\n    '              +       lte: Int | IntFieldRefInput,\\n' +\n    '              +       gt: Int | IntFieldRefInput,\\n' +\n    '              +       gte: Int | IntFieldRefInput,\\n' +\n    '              +       not: Int | NestedIntFilter\\n' +\n    '              +     }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idJabatan` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n        '\\n' +\n        '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n        '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  319     try {\\n' +\n        '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n        '                where: {\\n' +\n        '                  AND: {\\n' +\n        '                    idBagian: 7,\\n' +\n        '              +     idJabatan: {\\n' +\n        '              +       equals: Int | IntFieldRefInput,\\n' +\n        '              +       in: Int[],\\n' +\n        '              +       notIn: Int[],\\n' +\n        '              +       lt: Int | IntFieldRefInput,\\n' +\n        '              +       lte: Int | IntFieldRefInput,\\n' +\n        '              +       gt: Int | IntFieldRefInput,\\n' +\n        '              +       gte: Int | IntFieldRefInput,\\n' +\n        '              +       not: Int | NestedIntFilter\\n' +\n        '              +     }\\n' +\n        '                  }\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `idJabatan` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n          '\\n' +\n          '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n          '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  319     try {\\n' +\n          '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n          '                where: {\\n' +\n          '                  AND: {\\n' +\n          '                    idBagian: 7,\\n' +\n          '              +     idJabatan: {\\n' +\n          '              +       equals: Int | IntFieldRefInput,\\n' +\n          '              +       in: Int[],\\n' +\n          '              +       notIn: Int[],\\n' +\n          '              +       lt: Int | IntFieldRefInput,\\n' +\n          '              +       lte: Int | IntFieldRefInput,\\n' +\n          '              +       gt: Int | IntFieldRefInput,\\n' +\n          '              +       gte: Int | IntFieldRefInput,\\n' +\n          '              +       not: Int | NestedIntFilter\\n' +\n          '              +     }\\n' +\n          '                  }\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `idJabatan` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.find_id_department_employment_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:38)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:316:37)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 05:29:41"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n    '\\n' +\n    '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n    '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  319     try {\\n' +\n    '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n    '                where: {\\n' +\n    '                  AND: {\\n' +\n    '                    idBagian: 5,\\n' +\n    '              +     idJabatan: {\\n' +\n    '              +       equals: Int | IntFieldRefInput,\\n' +\n    '              +       in: Int[],\\n' +\n    '              +       notIn: Int[],\\n' +\n    '              +       lt: Int | IntFieldRefInput,\\n' +\n    '              +       lte: Int | IntFieldRefInput,\\n' +\n    '              +       gt: Int | IntFieldRefInput,\\n' +\n    '              +       gte: Int | IntFieldRefInput,\\n' +\n    '              +       not: Int | NestedIntFilter\\n' +\n    '              +     }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idJabatan` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n        '\\n' +\n        '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n        '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  319     try {\\n' +\n        '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n        '                where: {\\n' +\n        '                  AND: {\\n' +\n        '                    idBagian: 5,\\n' +\n        '              +     idJabatan: {\\n' +\n        '              +       equals: Int | IntFieldRefInput,\\n' +\n        '              +       in: Int[],\\n' +\n        '              +       notIn: Int[],\\n' +\n        '              +       lt: Int | IntFieldRefInput,\\n' +\n        '              +       lte: Int | IntFieldRefInput,\\n' +\n        '              +       gt: Int | IntFieldRefInput,\\n' +\n        '              +       gte: Int | IntFieldRefInput,\\n' +\n        '              +       not: Int | NestedIntFilter\\n' +\n        '              +     }\\n' +\n        '                  }\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `idJabatan` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n          '\\n' +\n          '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n          '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  319     try {\\n' +\n          '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n          '                where: {\\n' +\n          '                  AND: {\\n' +\n          '                    idBagian: 5,\\n' +\n          '              +     idJabatan: {\\n' +\n          '              +       equals: Int | IntFieldRefInput,\\n' +\n          '              +       in: Int[],\\n' +\n          '              +       notIn: Int[],\\n' +\n          '              +       lt: Int | IntFieldRefInput,\\n' +\n          '              +       lte: Int | IntFieldRefInput,\\n' +\n          '              +       gt: Int | IntFieldRefInput,\\n' +\n          '              +       gte: Int | IntFieldRefInput,\\n' +\n          '              +       not: Int | NestedIntFilter\\n' +\n          '              +     }\\n' +\n          '                  }\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `idJabatan` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.find_id_department_employment_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:38)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:316:37)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 05:33:50"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n    '\\n' +\n    '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  140     try {\\n' +\n    '  141 \\n' +\n    '→ 142         const department = await prisma.bagian.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  namaBagian: undefined,\\n' +\n    '                  isActive: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  namaBagian: true,\\n' +\n    '                  isActive: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagian.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n        '\\n' +\n        '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  140     try {\\n' +\n        '  141 \\n' +\n        '→ 142         const department = await prisma.bagian.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  namaBagian: undefined,\\n' +\n        '                  isActive: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  namaBagian: true,\\n' +\n        '                  isActive: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagian.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n          '\\n' +\n          '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  140     try {\\n' +\n          '  141 \\n' +\n          '→ 142         const department = await prisma.bagian.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  namaBagian: undefined,\\n' +\n          '                  isActive: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  namaBagian: true,\\n' +\n          '                  isActive: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:28)\\n' +\n          '    at async update_department (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department.ts:136:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 20:42:22"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n    '\\n' +\n    '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  140     try {\\n' +\n    '  141 \\n' +\n    '→ 142         const department = await prisma.bagian.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  namaBagian: undefined,\\n' +\n    '                  isActive: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  namaBagian: true,\\n' +\n    '                  isActive: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagian.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n        '\\n' +\n        '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  140     try {\\n' +\n        '  141 \\n' +\n        '→ 142         const department = await prisma.bagian.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  namaBagian: undefined,\\n' +\n        '                  isActive: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  namaBagian: true,\\n' +\n        '                  isActive: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagian.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n          '\\n' +\n          '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  140     try {\\n' +\n          '  141 \\n' +\n          '→ 142         const department = await prisma.bagian.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  namaBagian: undefined,\\n' +\n          '                  isActive: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  namaBagian: true,\\n' +\n          '                  isActive: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:28)\\n' +\n          '    at async update_department (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department.ts:136:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 20:42:24"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n    '\\n' +\n    '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  140     try {\\n' +\n    '  141 \\n' +\n    '→ 142         const department = await prisma.bagian.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  namaBagian: undefined,\\n' +\n    '                  isActive: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  namaBagian: true,\\n' +\n    '                  isActive: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagian.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n        '\\n' +\n        '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  140     try {\\n' +\n        '  141 \\n' +\n        '→ 142         const department = await prisma.bagian.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  namaBagian: undefined,\\n' +\n        '                  isActive: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  namaBagian: true,\\n' +\n        '                  isActive: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagian.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n          '\\n' +\n          '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  140     try {\\n' +\n          '  141 \\n' +\n          '→ 142         const department = await prisma.bagian.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  namaBagian: undefined,\\n' +\n          '                  isActive: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  namaBagian: true,\\n' +\n          '                  isActive: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:28)\\n' +\n          '    at async update_department (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department.ts:136:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 20:42:25"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n    '\\n' +\n    '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  140     try {\\n' +\n    '  141 \\n' +\n    '→ 142         const department = await prisma.bagian.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  namaBagian: undefined,\\n' +\n    '                  isActive: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  namaBagian: true,\\n' +\n    '                  isActive: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagian.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n        '\\n' +\n        '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  140     try {\\n' +\n        '  141 \\n' +\n        '→ 142         const department = await prisma.bagian.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  namaBagian: undefined,\\n' +\n        '                  isActive: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  namaBagian: true,\\n' +\n        '                  isActive: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagian.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n          '\\n' +\n          '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  140     try {\\n' +\n          '  141 \\n' +\n          '→ 142         const department = await prisma.bagian.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  namaBagian: undefined,\\n' +\n          '                  isActive: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  namaBagian: true,\\n' +\n          '                  isActive: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:28)\\n' +\n          '    at async update_department (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department.ts:136:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 20:43:44"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n    '\\n' +\n    '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  140     try {\\n' +\n    '  141 \\n' +\n    '→ 142         const department = await prisma.bagian.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  namaBagian: undefined,\\n' +\n    '                  isActive: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  namaBagian: true,\\n' +\n    '                  isActive: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagian.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n        '\\n' +\n        '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  140     try {\\n' +\n        '  141 \\n' +\n        '→ 142         const department = await prisma.bagian.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  namaBagian: undefined,\\n' +\n        '                  isActive: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  namaBagian: true,\\n' +\n        '                  isActive: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagian.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n          '\\n' +\n          '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  140     try {\\n' +\n          '  141 \\n' +\n          '→ 142         const department = await prisma.bagian.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  namaBagian: undefined,\\n' +\n          '                  isActive: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  namaBagian: true,\\n' +\n          '                  isActive: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:28)\\n' +\n          '    at async update_department (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department.ts:136:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 20:43:46"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n    '\\n' +\n    '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  140     try {\\n' +\n    '  141 \\n' +\n    '→ 142         const department = await prisma.bagian.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  namaBagian: undefined,\\n' +\n    '                  isActive: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  namaBagian: true,\\n' +\n    '                  isActive: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagian.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n        '\\n' +\n        '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  140     try {\\n' +\n        '  141 \\n' +\n        '→ 142         const department = await prisma.bagian.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  namaBagian: undefined,\\n' +\n        '                  isActive: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  namaBagian: true,\\n' +\n        '                  isActive: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagian.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n          '\\n' +\n          '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  140     try {\\n' +\n          '  141 \\n' +\n          '→ 142         const department = await prisma.bagian.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  namaBagian: undefined,\\n' +\n          '                  isActive: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  namaBagian: true,\\n' +\n          '                  isActive: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:28)\\n' +\n          '    at async update_department (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department.ts:136:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 20:43:47"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n    '\\n' +\n    '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  140     try {\\n' +\n    '  141 \\n' +\n    '→ 142         const department = await prisma.bagian.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  namaBagian: undefined,\\n' +\n    '                  isActive: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  namaBagian: true,\\n' +\n    '                  isActive: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagian.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n        '\\n' +\n        '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  140     try {\\n' +\n        '  141 \\n' +\n        '→ 142         const department = await prisma.bagian.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  namaBagian: undefined,\\n' +\n        '                  isActive: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  namaBagian: true,\\n' +\n        '                  isActive: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagian.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n          '\\n' +\n          '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  140     try {\\n' +\n          '  141 \\n' +\n          '→ 142         const department = await prisma.bagian.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  namaBagian: undefined,\\n' +\n          '                  isActive: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  namaBagian: true,\\n' +\n          '                  isActive: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:28)\\n' +\n          '    at async update_department (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department.ts:136:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 20:43:47"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n    '\\n' +\n    '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  140     try {\\n' +\n    '  141 \\n' +\n    '→ 142         const department = await prisma.bagian.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  namaBagian: undefined,\\n' +\n    '                  isActive: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  namaBagian: true,\\n' +\n    '                  isActive: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagian.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n        '\\n' +\n        '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  140     try {\\n' +\n        '  141 \\n' +\n        '→ 142         const department = await prisma.bagian.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  namaBagian: undefined,\\n' +\n        '                  isActive: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  namaBagian: true,\\n' +\n        '                  isActive: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagian.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n          '\\n' +\n          '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  140     try {\\n' +\n          '  141 \\n' +\n          '→ 142         const department = await prisma.bagian.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  namaBagian: undefined,\\n' +\n          '                  isActive: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  namaBagian: true,\\n' +\n          '                  isActive: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:28)\\n' +\n          '    at async update_department (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department.ts:136:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 20:44:10"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 20:54:02"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n    '\\n' +\n    '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  140     try {\\n' +\n    '  141 \\n' +\n    '→ 142         const department = await prisma.bagian.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagian.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:142:48\\n' +\n        '\\n' +\n        '  139 export async function update_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  140     try {\\n' +\n        '  141 \\n' +\n        '→ 142         const department = await prisma.bagian.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: { modelName: 'bagian', cause: 'Record to update not found.' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 20:54:12"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n    '\\n' +\n    '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n    '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  319     try {\\n' +\n    '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n    '                where: {\\n' +\n    '                  AND: {\\n' +\n    '                    idBagian: 5,\\n' +\n    '              +     idJabatan: {\\n' +\n    '              +       equals: Int | IntFieldRefInput,\\n' +\n    '              +       in: Int[],\\n' +\n    '              +       notIn: Int[],\\n' +\n    '              +       lt: Int | IntFieldRefInput,\\n' +\n    '              +       lte: Int | IntFieldRefInput,\\n' +\n    '              +       gt: Int | IntFieldRefInput,\\n' +\n    '              +       gte: Int | IntFieldRefInput,\\n' +\n    '              +       not: Int | NestedIntFilter\\n' +\n    '              +     }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idJabatan` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n        '\\n' +\n        '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n        '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  319     try {\\n' +\n        '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n        '                where: {\\n' +\n        '                  AND: {\\n' +\n        '                    idBagian: 5,\\n' +\n        '              +     idJabatan: {\\n' +\n        '              +       equals: Int | IntFieldRefInput,\\n' +\n        '              +       in: Int[],\\n' +\n        '              +       notIn: Int[],\\n' +\n        '              +       lt: Int | IntFieldRefInput,\\n' +\n        '              +       lte: Int | IntFieldRefInput,\\n' +\n        '              +       gt: Int | IntFieldRefInput,\\n' +\n        '              +       gte: Int | IntFieldRefInput,\\n' +\n        '              +       not: Int | NestedIntFilter\\n' +\n        '              +     }\\n' +\n        '                  }\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `idJabatan` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n          '\\n' +\n          '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n          '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  319     try {\\n' +\n          '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n          '                where: {\\n' +\n          '                  AND: {\\n' +\n          '                    idBagian: 5,\\n' +\n          '              +     idJabatan: {\\n' +\n          '              +       equals: Int | IntFieldRefInput,\\n' +\n          '              +       in: Int[],\\n' +\n          '              +       notIn: Int[],\\n' +\n          '              +       lt: Int | IntFieldRefInput,\\n' +\n          '              +       lte: Int | IntFieldRefInput,\\n' +\n          '              +       gt: Int | IntFieldRefInput,\\n' +\n          '              +       gte: Int | IntFieldRefInput,\\n' +\n          '              +       not: Int | NestedIntFilter\\n' +\n          '              +     }\\n' +\n          '                  }\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `idJabatan` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.find_id_department_employment_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:38)\\n' +\n          '    at async update_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:275:37)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 21:03:57"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n    '\\n' +\n    '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n    '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  319     try {\\n' +\n    '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n    '                where: {\\n' +\n    '                  AND: {\\n' +\n    '                    idBagian: 5,\\n' +\n    '              +     idJabatan: {\\n' +\n    '              +       equals: Int | IntFieldRefInput,\\n' +\n    '              +       in: Int[],\\n' +\n    '              +       notIn: Int[],\\n' +\n    '              +       lt: Int | IntFieldRefInput,\\n' +\n    '              +       lte: Int | IntFieldRefInput,\\n' +\n    '              +       gt: Int | IntFieldRefInput,\\n' +\n    '              +       gte: Int | IntFieldRefInput,\\n' +\n    '              +       not: Int | NestedIntFilter\\n' +\n    '              +     }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idJabatan` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n        '\\n' +\n        '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n        '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  319     try {\\n' +\n        '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n        '                where: {\\n' +\n        '                  AND: {\\n' +\n        '                    idBagian: 5,\\n' +\n        '              +     idJabatan: {\\n' +\n        '              +       equals: Int | IntFieldRefInput,\\n' +\n        '              +       in: Int[],\\n' +\n        '              +       notIn: Int[],\\n' +\n        '              +       lt: Int | IntFieldRefInput,\\n' +\n        '              +       lte: Int | IntFieldRefInput,\\n' +\n        '              +       gt: Int | IntFieldRefInput,\\n' +\n        '              +       gte: Int | IntFieldRefInput,\\n' +\n        '              +       not: Int | NestedIntFilter\\n' +\n        '              +     }\\n' +\n        '                  }\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `idJabatan` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n          '\\n' +\n          '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n          '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  319     try {\\n' +\n          '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n          '                where: {\\n' +\n          '                  AND: {\\n' +\n          '                    idBagian: 5,\\n' +\n          '              +     idJabatan: {\\n' +\n          '              +       equals: Int | IntFieldRefInput,\\n' +\n          '              +       in: Int[],\\n' +\n          '              +       notIn: Int[],\\n' +\n          '              +       lt: Int | IntFieldRefInput,\\n' +\n          '              +       lte: Int | IntFieldRefInput,\\n' +\n          '              +       gt: Int | IntFieldRefInput,\\n' +\n          '              +       gte: Int | IntFieldRefInput,\\n' +\n          '              +       not: Int | NestedIntFilter\\n' +\n          '              +     }\\n' +\n          '                  }\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `idJabatan` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.find_id_department_employment_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:38)\\n' +\n          '    at async update_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:275:37)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 21:03:59"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n    '\\n' +\n    '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n    '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  319     try {\\n' +\n    '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n    '                where: {\\n' +\n    '                  AND: {\\n' +\n    '                    idBagian: 5,\\n' +\n    '              +     idJabatan: {\\n' +\n    '              +       equals: Int | IntFieldRefInput,\\n' +\n    '              +       in: Int[],\\n' +\n    '              +       notIn: Int[],\\n' +\n    '              +       lt: Int | IntFieldRefInput,\\n' +\n    '              +       lte: Int | IntFieldRefInput,\\n' +\n    '              +       gt: Int | IntFieldRefInput,\\n' +\n    '              +       gte: Int | IntFieldRefInput,\\n' +\n    '              +       not: Int | NestedIntFilter\\n' +\n    '              +     }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idJabatan` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n        '\\n' +\n        '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n        '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  319     try {\\n' +\n        '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n        '                where: {\\n' +\n        '                  AND: {\\n' +\n        '                    idBagian: 5,\\n' +\n        '              +     idJabatan: {\\n' +\n        '              +       equals: Int | IntFieldRefInput,\\n' +\n        '              +       in: Int[],\\n' +\n        '              +       notIn: Int[],\\n' +\n        '              +       lt: Int | IntFieldRefInput,\\n' +\n        '              +       lte: Int | IntFieldRefInput,\\n' +\n        '              +       gt: Int | IntFieldRefInput,\\n' +\n        '              +       gte: Int | IntFieldRefInput,\\n' +\n        '              +       not: Int | NestedIntFilter\\n' +\n        '              +     }\\n' +\n        '                  }\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `idJabatan` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:67\\n' +\n          '\\n' +\n          '  317 //ANCHOR - Menampilkan semua jabatan di bagian\\n' +\n          '  318 export async function find_id_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  319     try {\\n' +\n          '→ 320         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n          '                where: {\\n' +\n          '                  AND: {\\n' +\n          '                    idBagian: 5,\\n' +\n          '              +     idJabatan: {\\n' +\n          '              +       equals: Int | IntFieldRefInput,\\n' +\n          '              +       in: Int[],\\n' +\n          '              +       notIn: Int[],\\n' +\n          '              +       lt: Int | IntFieldRefInput,\\n' +\n          '              +       lte: Int | IntFieldRefInput,\\n' +\n          '              +       gt: Int | IntFieldRefInput,\\n' +\n          '              +       gte: Int | IntFieldRefInput,\\n' +\n          '              +       not: Int | NestedIntFilter\\n' +\n          '              +     }\\n' +\n          '                  }\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `idJabatan` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.find_id_department_employment_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:320:38)\\n' +\n          '    at async update_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:275:37)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-27 21:04:00"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 19:19:34"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 19:19:58"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 19:56:43"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:19:38"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:19:38"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:20:25"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:20:25"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:20:38"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:20:38"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:22:22"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:22:22"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:22:39"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:22:39"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:23:03"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:23:03"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:24:48"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:24:48"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:27:00"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:27:00"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:28:01"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:28:01"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:28:08"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:28:08"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:31:05"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:31:05"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:31:16"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:31:16"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:33:51"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:33:51"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:34:05"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:34:05"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:36:00"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:36:00"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:37:07"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:37:07"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:37:10"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:37:10"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:37:13"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:37:13"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:41:19"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:41:19"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:41:29"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:41:29"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:41:49"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:41:49"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:41:54"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:41:54"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:41:58"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:41:58"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:42:12"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:42:12"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:42:52"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:42:52"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:43:04"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:43:04"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:43:09"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:43:09"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:43:14"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:43:14"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:43:28"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:43:28"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:43:52"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:43:52"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:44:05"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:44:05"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:44:10"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:44:10"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:45:28"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:45:28"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:45:31"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:45:31"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:45:51"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-28 21:45:51"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.findMany()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:39:48\\n' +\n    '\\n' +\n    '  36 //ANCHOR - Menampilkan semua bagian\\n' +\n    '  37 export async function find_all_department_model(data: any): Promise<ResultModel<Department[] | null>> {\\n' +\n    '  38     try {\\n' +\n    '→ 39         const department = await prisma.bagian.findMany({\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaBagian: true,\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               where: {\\n' +\n    '                 isActive: undefined\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 namaBagian: \"asc\"\\n' +\n    '               },\\n' +\n    '               take: 10,\\n' +\n    '             + skip: Int\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `skip` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagian.findMany()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:39:48\\n' +\n        '\\n' +\n        '  36 //ANCHOR - Menampilkan semua bagian\\n' +\n        '  37 export async function find_all_department_model(data: any): Promise<ResultModel<Department[] | null>> {\\n' +\n        '  38     try {\\n' +\n        '→ 39         const department = await prisma.bagian.findMany({\\n' +\n        '               select: {\\n' +\n        '                 id: true,\\n' +\n        '                 namaBagian: true,\\n' +\n        '                 isActive: true\\n' +\n        '               },\\n' +\n        '               where: {\\n' +\n        '                 isActive: undefined\\n' +\n        '               },\\n' +\n        '               orderBy: {\\n' +\n        '                 namaBagian: \"asc\"\\n' +\n        '               },\\n' +\n        '               take: 10,\\n' +\n        '             + skip: Int\\n' +\n        '             })\\n' +\n        '\\n' +\n        'Argument `skip` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagian.findMany()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:39:48\\n' +\n          '\\n' +\n          '  36 //ANCHOR - Menampilkan semua bagian\\n' +\n          '  37 export async function find_all_department_model(data: any): Promise<ResultModel<Department[] | null>> {\\n' +\n          '  38     try {\\n' +\n          '→ 39         const department = await prisma.bagian.findMany({\\n' +\n          '               select: {\\n' +\n          '                 id: true,\\n' +\n          '                 namaBagian: true,\\n' +\n          '                 isActive: true\\n' +\n          '               },\\n' +\n          '               where: {\\n' +\n          '                 isActive: undefined\\n' +\n          '               },\\n' +\n          '               orderBy: {\\n' +\n          '                 namaBagian: \"asc\"\\n' +\n          '               },\\n' +\n          '               take: 10,\\n' +\n          '             + skip: Int\\n' +\n          '             })\\n' +\n          '\\n' +\n          'Argument `skip` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.find_all_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:39:28)\\n' +\n          '    at async find_all (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department.ts:36:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-29 05:27:42"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.findMany()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:39:48\\n' +\n    '\\n' +\n    '  36 //ANCHOR - Menampilkan semua bagian\\n' +\n    '  37 export async function find_all_department_model(data: any): Promise<ResultModel<Department[] | null>> {\\n' +\n    '  38     try {\\n' +\n    '→ 39         const department = await prisma.bagian.findMany({\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaBagian: true,\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               where: {\\n' +\n    '                 isActive: undefined\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 namaBagian: \"asc\"\\n' +\n    '               },\\n' +\n    '               take: 10,\\n' +\n    '             + skip: Int\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `skip` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagian.findMany()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:39:48\\n' +\n        '\\n' +\n        '  36 //ANCHOR - Menampilkan semua bagian\\n' +\n        '  37 export async function find_all_department_model(data: any): Promise<ResultModel<Department[] | null>> {\\n' +\n        '  38     try {\\n' +\n        '→ 39         const department = await prisma.bagian.findMany({\\n' +\n        '               select: {\\n' +\n        '                 id: true,\\n' +\n        '                 namaBagian: true,\\n' +\n        '                 isActive: true\\n' +\n        '               },\\n' +\n        '               where: {\\n' +\n        '                 isActive: undefined\\n' +\n        '               },\\n' +\n        '               orderBy: {\\n' +\n        '                 namaBagian: \"asc\"\\n' +\n        '               },\\n' +\n        '               take: 10,\\n' +\n        '             + skip: Int\\n' +\n        '             })\\n' +\n        '\\n' +\n        'Argument `skip` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagian.findMany()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:39:48\\n' +\n          '\\n' +\n          '  36 //ANCHOR - Menampilkan semua bagian\\n' +\n          '  37 export async function find_all_department_model(data: any): Promise<ResultModel<Department[] | null>> {\\n' +\n          '  38     try {\\n' +\n          '→ 39         const department = await prisma.bagian.findMany({\\n' +\n          '               select: {\\n' +\n          '                 id: true,\\n' +\n          '                 namaBagian: true,\\n' +\n          '                 isActive: true\\n' +\n          '               },\\n' +\n          '               where: {\\n' +\n          '                 isActive: undefined\\n' +\n          '               },\\n' +\n          '               orderBy: {\\n' +\n          '                 namaBagian: \"asc\"\\n' +\n          '               },\\n' +\n          '               take: 10,\\n' +\n          '             + skip: Int\\n' +\n          '             })\\n' +\n          '\\n' +\n          'Argument `skip` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.find_all_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:39:28)\\n' +\n          '    at async find_all (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department.ts:36:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-29 05:27:42"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n    '\\n' +\n    '  148 \\n' +\n    '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  150     try {\\n' +\n    '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  idBagianFK: {\\n' +\n    '                    select: {\\n' +\n    '                      id: true,\\n' +\n    '                      namaBagian: true\\n' +\n    '                    }\\n' +\n    '                  },\\n' +\n    '                  idJabatanFK: {\\n' +\n    '                    select: {\\n' +\n    '                      id: true,\\n' +\n    '                      namaJabatan: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                where: {\\n' +\n    '                  AND: {\\n' +\n    '                    idBagian: \"\",\\n' +\n    '                              ~~\\n' +\n    '                    idJabatan: \"\"\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idBagian`: Invalid value provided. Expected IntFilter or Int, provided String.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n        '\\n' +\n        '  148 \\n' +\n        '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  150     try {\\n' +\n        '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  idBagianFK: {\\n' +\n        '                    select: {\\n' +\n        '                      id: true,\\n' +\n        '                      namaBagian: true\\n' +\n        '                    }\\n' +\n        '                  },\\n' +\n        '                  idJabatanFK: {\\n' +\n        '                    select: {\\n' +\n        '                      id: true,\\n' +\n        '                      namaJabatan: true\\n' +\n        '                    }\\n' +\n        '                  }\\n' +\n        '                },\\n' +\n        '                where: {\\n' +\n        '                  AND: {\\n' +\n        '                    idBagian: \"\",\\n' +\n        '                              ~~\\n' +\n        '                    idJabatan: \"\"\\n' +\n        '                  }\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `idBagian`: Invalid value provided. Expected IntFilter or Int, provided String.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n          '\\n' +\n          '  148 \\n' +\n          '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  150     try {\\n' +\n          '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  idBagianFK: {\\n' +\n          '                    select: {\\n' +\n          '                      id: true,\\n' +\n          '                      namaBagian: true\\n' +\n          '                    }\\n' +\n          '                  },\\n' +\n          '                  idJabatanFK: {\\n' +\n          '                    select: {\\n' +\n          '                      id: true,\\n' +\n          '                      namaJabatan: true\\n' +\n          '                    }\\n' +\n          '                  }\\n' +\n          '                },\\n' +\n          '                where: {\\n' +\n          '                  AND: {\\n' +\n          '                    idBagian: \"\",\\n' +\n          '                              ~~\\n' +\n          '                    idJabatan: \"\"\\n' +\n          '                  }\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `idBagian`: Invalid value provided. Expected IntFilter or Int, provided String.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.find_fixed_department_employment_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:38)\\n' +\n          '    at async find_fixed_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department_employment.ts:200:38)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-30 05:54:26"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n    '\\n' +\n    '  148 \\n' +\n    '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  150     try {\\n' +\n    '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  idBagianFK: {\\n' +\n    '                    select: {\\n' +\n    '                      id: true,\\n' +\n    '                      namaBagian: true\\n' +\n    '                    }\\n' +\n    '                  },\\n' +\n    '                  idJabatanFK: {\\n' +\n    '                    select: {\\n' +\n    '                      id: true,\\n' +\n    '                      namaJabatan: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                where: {\\n' +\n    '                  AND: {\\n' +\n    '                    idBagian: \"\",\\n' +\n    '                              ~~\\n' +\n    '                    idJabatan: \"\"\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idBagian`: Invalid value provided. Expected IntFilter or Int, provided String.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n        '\\n' +\n        '  148 \\n' +\n        '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  150     try {\\n' +\n        '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  idBagianFK: {\\n' +\n        '                    select: {\\n' +\n        '                      id: true,\\n' +\n        '                      namaBagian: true\\n' +\n        '                    }\\n' +\n        '                  },\\n' +\n        '                  idJabatanFK: {\\n' +\n        '                    select: {\\n' +\n        '                      id: true,\\n' +\n        '                      namaJabatan: true\\n' +\n        '                    }\\n' +\n        '                  }\\n' +\n        '                },\\n' +\n        '                where: {\\n' +\n        '                  AND: {\\n' +\n        '                    idBagian: \"\",\\n' +\n        '                              ~~\\n' +\n        '                    idJabatan: \"\"\\n' +\n        '                  }\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `idBagian`: Invalid value provided. Expected IntFilter or Int, provided String.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n          '\\n' +\n          '  148 \\n' +\n          '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  150     try {\\n' +\n          '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  idBagianFK: {\\n' +\n          '                    select: {\\n' +\n          '                      id: true,\\n' +\n          '                      namaBagian: true\\n' +\n          '                    }\\n' +\n          '                  },\\n' +\n          '                  idJabatanFK: {\\n' +\n          '                    select: {\\n' +\n          '                      id: true,\\n' +\n          '                      namaJabatan: true\\n' +\n          '                    }\\n' +\n          '                  }\\n' +\n          '                },\\n' +\n          '                where: {\\n' +\n          '                  AND: {\\n' +\n          '                    idBagian: \"\",\\n' +\n          '                              ~~\\n' +\n          '                    idJabatan: \"\"\\n' +\n          '                  }\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `idBagian`: Invalid value provided. Expected IntFilter or Int, provided String.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.find_fixed_department_employment_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:38)\\n' +\n          '    at async find_fixed_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department_employment.ts:200:38)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-30 05:54:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n    '\\n' +\n    '  148 \\n' +\n    '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  150     try {\\n' +\n    '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  idBagianFK: {\\n' +\n    '                    select: {\\n' +\n    '                      id: true,\\n' +\n    '                      namaBagian: true\\n' +\n    '                    }\\n' +\n    '                  },\\n' +\n    '                  idJabatanFK: {\\n' +\n    '                    select: {\\n' +\n    '                      id: true,\\n' +\n    '                      namaJabatan: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                where: {\\n' +\n    '                  AND: {\\n' +\n    '                    idBagian: \"\",\\n' +\n    '                              ~~\\n' +\n    '                    idJabatan: \"\"\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idBagian`: Invalid value provided. Expected IntFilter or Int, provided String.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n        '\\n' +\n        '  148 \\n' +\n        '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  150     try {\\n' +\n        '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  idBagianFK: {\\n' +\n        '                    select: {\\n' +\n        '                      id: true,\\n' +\n        '                      namaBagian: true\\n' +\n        '                    }\\n' +\n        '                  },\\n' +\n        '                  idJabatanFK: {\\n' +\n        '                    select: {\\n' +\n        '                      id: true,\\n' +\n        '                      namaJabatan: true\\n' +\n        '                    }\\n' +\n        '                  }\\n' +\n        '                },\\n' +\n        '                where: {\\n' +\n        '                  AND: {\\n' +\n        '                    idBagian: \"\",\\n' +\n        '                              ~~\\n' +\n        '                    idJabatan: \"\"\\n' +\n        '                  }\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `idBagian`: Invalid value provided. Expected IntFilter or Int, provided String.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n          '\\n' +\n          '  148 \\n' +\n          '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  150     try {\\n' +\n          '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  idBagianFK: {\\n' +\n          '                    select: {\\n' +\n          '                      id: true,\\n' +\n          '                      namaBagian: true\\n' +\n          '                    }\\n' +\n          '                  },\\n' +\n          '                  idJabatanFK: {\\n' +\n          '                    select: {\\n' +\n          '                      id: true,\\n' +\n          '                      namaJabatan: true\\n' +\n          '                    }\\n' +\n          '                  }\\n' +\n          '                },\\n' +\n          '                where: {\\n' +\n          '                  AND: {\\n' +\n          '                    idBagian: \"\",\\n' +\n          '                              ~~\\n' +\n          '                    idJabatan: \"\"\\n' +\n          '                  }\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `idBagian`: Invalid value provided. Expected IntFilter or Int, provided String.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.find_fixed_department_employment_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:38)\\n' +\n          '    at async find_fixed_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department_employment.ts:200:38)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-30 05:54:36"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n    '\\n' +\n    '  148 \\n' +\n    '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  150     try {\\n' +\n    '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  idBagianFK: {\\n' +\n    '                    select: {\\n' +\n    '                      id: true,\\n' +\n    '                      namaBagian: true\\n' +\n    '                    }\\n' +\n    '                  },\\n' +\n    '                  idJabatanFK: {\\n' +\n    '                    select: {\\n' +\n    '                      id: true,\\n' +\n    '                      namaJabatan: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                where: {\\n' +\n    '                  AND: {\\n' +\n    '                    idJabatan: NaN,\\n' +\n    '              +     idBagian: {\\n' +\n    '              +       equals: Int | IntFieldRefInput,\\n' +\n    '              +       in: Int[],\\n' +\n    '              +       notIn: Int[],\\n' +\n    '              +       lt: Int | IntFieldRefInput,\\n' +\n    '              +       lte: Int | IntFieldRefInput,\\n' +\n    '              +       gt: Int | IntFieldRefInput,\\n' +\n    '              +       gte: Int | IntFieldRefInput,\\n' +\n    '              +       not: Int | NestedIntFilter\\n' +\n    '              +     }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n        '\\n' +\n        '  148 \\n' +\n        '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  150     try {\\n' +\n        '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  idBagianFK: {\\n' +\n        '                    select: {\\n' +\n        '                      id: true,\\n' +\n        '                      namaBagian: true\\n' +\n        '                    }\\n' +\n        '                  },\\n' +\n        '                  idJabatanFK: {\\n' +\n        '                    select: {\\n' +\n        '                      id: true,\\n' +\n        '                      namaJabatan: true\\n' +\n        '                    }\\n' +\n        '                  }\\n' +\n        '                },\\n' +\n        '                where: {\\n' +\n        '                  AND: {\\n' +\n        '                    idJabatan: NaN,\\n' +\n        '              +     idBagian: {\\n' +\n        '              +       equals: Int | IntFieldRefInput,\\n' +\n        '              +       in: Int[],\\n' +\n        '              +       notIn: Int[],\\n' +\n        '              +       lt: Int | IntFieldRefInput,\\n' +\n        '              +       lte: Int | IntFieldRefInput,\\n' +\n        '              +       gt: Int | IntFieldRefInput,\\n' +\n        '              +       gte: Int | IntFieldRefInput,\\n' +\n        '              +       not: Int | NestedIntFilter\\n' +\n        '              +     }\\n' +\n        '                  }\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `idBagian` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n          '\\n' +\n          '  148 \\n' +\n          '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  150     try {\\n' +\n          '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  idBagianFK: {\\n' +\n          '                    select: {\\n' +\n          '                      id: true,\\n' +\n          '                      namaBagian: true\\n' +\n          '                    }\\n' +\n          '                  },\\n' +\n          '                  idJabatanFK: {\\n' +\n          '                    select: {\\n' +\n          '                      id: true,\\n' +\n          '                      namaJabatan: true\\n' +\n          '                    }\\n' +\n          '                  }\\n' +\n          '                },\\n' +\n          '                where: {\\n' +\n          '                  AND: {\\n' +\n          '                    idJabatan: NaN,\\n' +\n          '              +     idBagian: {\\n' +\n          '              +       equals: Int | IntFieldRefInput,\\n' +\n          '              +       in: Int[],\\n' +\n          '              +       notIn: Int[],\\n' +\n          '              +       lt: Int | IntFieldRefInput,\\n' +\n          '              +       lte: Int | IntFieldRefInput,\\n' +\n          '              +       gt: Int | IntFieldRefInput,\\n' +\n          '              +       gte: Int | IntFieldRefInput,\\n' +\n          '              +       not: Int | NestedIntFilter\\n' +\n          '              +     }\\n' +\n          '                  }\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `idBagian` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.find_fixed_department_employment_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:38)\\n' +\n          '    at async find_fixed_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department_employment.ts:200:38)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-30 05:54:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n    '\\n' +\n    '  148 \\n' +\n    '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  150     try {\\n' +\n    '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  idBagianFK: {\\n' +\n    '                    select: {\\n' +\n    '                      id: true,\\n' +\n    '                      namaBagian: true\\n' +\n    '                    }\\n' +\n    '                  },\\n' +\n    '                  idJabatanFK: {\\n' +\n    '                    select: {\\n' +\n    '                      id: true,\\n' +\n    '                      namaJabatan: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                where: {\\n' +\n    '                  AND: {\\n' +\n    '                    idJabatan: NaN,\\n' +\n    '              +     idBagian: {\\n' +\n    '              +       equals: Int | IntFieldRefInput,\\n' +\n    '              +       in: Int[],\\n' +\n    '              +       notIn: Int[],\\n' +\n    '              +       lt: Int | IntFieldRefInput,\\n' +\n    '              +       lte: Int | IntFieldRefInput,\\n' +\n    '              +       gt: Int | IntFieldRefInput,\\n' +\n    '              +       gte: Int | IntFieldRefInput,\\n' +\n    '              +       not: Int | NestedIntFilter\\n' +\n    '              +     }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n        '\\n' +\n        '  148 \\n' +\n        '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  150     try {\\n' +\n        '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  idBagianFK: {\\n' +\n        '                    select: {\\n' +\n        '                      id: true,\\n' +\n        '                      namaBagian: true\\n' +\n        '                    }\\n' +\n        '                  },\\n' +\n        '                  idJabatanFK: {\\n' +\n        '                    select: {\\n' +\n        '                      id: true,\\n' +\n        '                      namaJabatan: true\\n' +\n        '                    }\\n' +\n        '                  }\\n' +\n        '                },\\n' +\n        '                where: {\\n' +\n        '                  AND: {\\n' +\n        '                    idJabatan: NaN,\\n' +\n        '              +     idBagian: {\\n' +\n        '              +       equals: Int | IntFieldRefInput,\\n' +\n        '              +       in: Int[],\\n' +\n        '              +       notIn: Int[],\\n' +\n        '              +       lt: Int | IntFieldRefInput,\\n' +\n        '              +       lte: Int | IntFieldRefInput,\\n' +\n        '              +       gt: Int | IntFieldRefInput,\\n' +\n        '              +       gte: Int | IntFieldRefInput,\\n' +\n        '              +       not: Int | NestedIntFilter\\n' +\n        '              +     }\\n' +\n        '                  }\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `idBagian` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n          '\\n' +\n          '  148 \\n' +\n          '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  150     try {\\n' +\n          '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  idBagianFK: {\\n' +\n          '                    select: {\\n' +\n          '                      id: true,\\n' +\n          '                      namaBagian: true\\n' +\n          '                    }\\n' +\n          '                  },\\n' +\n          '                  idJabatanFK: {\\n' +\n          '                    select: {\\n' +\n          '                      id: true,\\n' +\n          '                      namaJabatan: true\\n' +\n          '                    }\\n' +\n          '                  }\\n' +\n          '                },\\n' +\n          '                where: {\\n' +\n          '                  AND: {\\n' +\n          '                    idJabatan: NaN,\\n' +\n          '              +     idBagian: {\\n' +\n          '              +       equals: Int | IntFieldRefInput,\\n' +\n          '              +       in: Int[],\\n' +\n          '              +       notIn: Int[],\\n' +\n          '              +       lt: Int | IntFieldRefInput,\\n' +\n          '              +       lte: Int | IntFieldRefInput,\\n' +\n          '              +       gt: Int | IntFieldRefInput,\\n' +\n          '              +       gte: Int | IntFieldRefInput,\\n' +\n          '              +       not: Int | NestedIntFilter\\n' +\n          '              +     }\\n' +\n          '                  }\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `idBagian` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.find_fixed_department_employment_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:38)\\n' +\n          '    at async find_fixed_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department_employment.ts:200:38)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-30 05:54:59"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n    '\\n' +\n    '  148 \\n' +\n    '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  150     try {\\n' +\n    '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  idBagianFK: {\\n' +\n    '                    select: {\\n' +\n    '                      id: true,\\n' +\n    '                      namaBagian: true\\n' +\n    '                    }\\n' +\n    '                  },\\n' +\n    '                  idJabatanFK: {\\n' +\n    '                    select: {\\n' +\n    '                      id: true,\\n' +\n    '                      namaJabatan: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                where: {\\n' +\n    '                  AND: {\\n' +\n    '                    idJabatan: NaN,\\n' +\n    '              +     idBagian: {\\n' +\n    '              +       equals: Int | IntFieldRefInput,\\n' +\n    '              +       in: Int[],\\n' +\n    '              +       notIn: Int[],\\n' +\n    '              +       lt: Int | IntFieldRefInput,\\n' +\n    '              +       lte: Int | IntFieldRefInput,\\n' +\n    '              +       gt: Int | IntFieldRefInput,\\n' +\n    '              +       gte: Int | IntFieldRefInput,\\n' +\n    '              +       not: Int | NestedIntFilter\\n' +\n    '              +     }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n        '\\n' +\n        '  148 \\n' +\n        '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  150     try {\\n' +\n        '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  idBagianFK: {\\n' +\n        '                    select: {\\n' +\n        '                      id: true,\\n' +\n        '                      namaBagian: true\\n' +\n        '                    }\\n' +\n        '                  },\\n' +\n        '                  idJabatanFK: {\\n' +\n        '                    select: {\\n' +\n        '                      id: true,\\n' +\n        '                      namaJabatan: true\\n' +\n        '                    }\\n' +\n        '                  }\\n' +\n        '                },\\n' +\n        '                where: {\\n' +\n        '                  AND: {\\n' +\n        '                    idJabatan: NaN,\\n' +\n        '              +     idBagian: {\\n' +\n        '              +       equals: Int | IntFieldRefInput,\\n' +\n        '              +       in: Int[],\\n' +\n        '              +       notIn: Int[],\\n' +\n        '              +       lt: Int | IntFieldRefInput,\\n' +\n        '              +       lte: Int | IntFieldRefInput,\\n' +\n        '              +       gt: Int | IntFieldRefInput,\\n' +\n        '              +       gte: Int | IntFieldRefInput,\\n' +\n        '              +       not: Int | NestedIntFilter\\n' +\n        '              +     }\\n' +\n        '                  }\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `idBagian` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.bagianonjabatan.findFirst()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:67\\n' +\n          '\\n' +\n          '  148 \\n' +\n          '  149 export async function find_fixed_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n          '  150     try {\\n' +\n          '→ 151         const departmentEmployment = await prisma.bagianonjabatan.findFirst({\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  idBagianFK: {\\n' +\n          '                    select: {\\n' +\n          '                      id: true,\\n' +\n          '                      namaBagian: true\\n' +\n          '                    }\\n' +\n          '                  },\\n' +\n          '                  idJabatanFK: {\\n' +\n          '                    select: {\\n' +\n          '                      id: true,\\n' +\n          '                      namaJabatan: true\\n' +\n          '                    }\\n' +\n          '                  }\\n' +\n          '                },\\n' +\n          '                where: {\\n' +\n          '                  AND: {\\n' +\n          '                    idJabatan: NaN,\\n' +\n          '              +     idBagian: {\\n' +\n          '              +       equals: Int | IntFieldRefInput,\\n' +\n          '              +       in: Int[],\\n' +\n          '              +       notIn: Int[],\\n' +\n          '              +       lt: Int | IntFieldRefInput,\\n' +\n          '              +       lte: Int | IntFieldRefInput,\\n' +\n          '              +       gt: Int | IntFieldRefInput,\\n' +\n          '              +       gte: Int | IntFieldRefInput,\\n' +\n          '              +       not: Int | NestedIntFilter\\n' +\n          '              +     }\\n' +\n          '                  }\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `idBagian` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.find_fixed_department_employment_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:151:38)\\n' +\n          '    at async find_fixed_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department_employment.ts:200:38)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-30 05:56:00"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.bagianonjabatan.findFirst()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:15:63\\n' +\n    '\\n' +\n    '  12 export async function add_department_employment_model(data: any): Promise<ResultModel<Department | null> | { data: string }> {\\n' +\n    '  13     try {\\n' +\n    '  14         const transaction = await prisma.$transaction(async (tx) => {\\n' +\n    '→ 15             const bagianAndJabatan = await tx.bagianonjabatan.findFirst({\\n' +\n    '                   select: {\\n' +\n    '                     id: true\\n' +\n    '                   },\\n' +\n    '                   where: {\\n' +\n    '                     idBagian: \"5\",\\n' +\n    '                               ~~~\\n' +\n    '                     idJabatan: \"12\"\\n' +\n    '                   }\\n' +\n    '                 })\\n' +\n    '\\n' +\n    'Argument `idBagian`: Invalid value provided. Expected IntFilter or Int, provided String.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.bagianonjabatan.findFirst()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:15:63\\n' +\n        '\\n' +\n        '  12 export async function add_department_employment_model(data: any): Promise<ResultModel<Department | null> | { data: string }> {\\n' +\n        '  13     try {\\n' +\n        '  14         const transaction = await prisma.$transaction(async (tx) => {\\n' +\n        '→ 15             const bagianAndJabatan = await tx.bagianonjabatan.findFirst({\\n' +\n        '                   select: {\\n' +\n        '                     id: true\\n' +\n        '                   },\\n' +\n        '                   where: {\\n' +\n        '                     idBagian: \"5\",\\n' +\n        '                               ~~~\\n' +\n        '                     idJabatan: \"12\"\\n' +\n        '                   }\\n' +\n        '                 })\\n' +\n        '\\n' +\n        'Argument `idBagian`: Invalid value provided. Expected IntFilter or Int, provided String.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `tx.bagianonjabatan.findFirst()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:15:63\\n' +\n          '\\n' +\n          '  12 export async function add_department_employment_model(data: any): Promise<ResultModel<Department | null> | { data: string }> {\\n' +\n          '  13     try {\\n' +\n          '  14         const transaction = await prisma.$transaction(async (tx) => {\\n' +\n          '→ 15             const bagianAndJabatan = await tx.bagianonjabatan.findFirst({\\n' +\n          '                   select: {\\n' +\n          '                     id: true\\n' +\n          '                   },\\n' +\n          '                   where: {\\n' +\n          '                     idBagian: \"5\",\\n' +\n          '                               ~~~\\n' +\n          '                     idJabatan: \"12\"\\n' +\n          '                   }\\n' +\n          '                 })\\n' +\n          '\\n' +\n          'Argument `idBagian`: Invalid value provided. Expected IntFilter or Int, provided String.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:15:38\\n' +\n          '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n          '    at async Object.add_department_employment_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:14:29)\\n' +\n          '    at async add_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department_employment.ts:14:38)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-30 06:17:27"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.bagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:29:67\\n' +\n    '\\n' +\n    '  26     return 0;\\n' +\n    '  27 }\\n' +\n    '  28 \\n' +\n    '→ 29 const departmentEmployment = await tx.bagianonjabatan.create({\\n' +\n    '       data: {\\n' +\n    '         idBagian: \"2xxxx\",\\n' +\n    '                   ~~~~~~~\\n' +\n    '         idJabatan: \"2\"\\n' +\n    '       },\\n' +\n    '       select: {\\n' +\n    '         id: true,\\n' +\n    '         idBagianFK: {\\n' +\n    '           select: {\\n' +\n    '             namaBagian: true\\n' +\n    '           }\\n' +\n    '         },\\n' +\n    '         idJabatanFK: {\\n' +\n    '           select: {\\n' +\n    '             namaJabatan: true\\n' +\n    '           }\\n' +\n    '         }\\n' +\n    '       }\\n' +\n    '     })\\n' +\n    '\\n' +\n    'Argument `idBagian`: Invalid value provided. Expected Int, provided String.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.bagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:29:67\\n' +\n        '\\n' +\n        '  26     return 0;\\n' +\n        '  27 }\\n' +\n        '  28 \\n' +\n        '→ 29 const departmentEmployment = await tx.bagianonjabatan.create({\\n' +\n        '       data: {\\n' +\n        '         idBagian: \"2xxxx\",\\n' +\n        '                   ~~~~~~~\\n' +\n        '         idJabatan: \"2\"\\n' +\n        '       },\\n' +\n        '       select: {\\n' +\n        '         id: true,\\n' +\n        '         idBagianFK: {\\n' +\n        '           select: {\\n' +\n        '             namaBagian: true\\n' +\n        '           }\\n' +\n        '         },\\n' +\n        '         idJabatanFK: {\\n' +\n        '           select: {\\n' +\n        '             namaJabatan: true\\n' +\n        '           }\\n' +\n        '         }\\n' +\n        '       }\\n' +\n        '     })\\n' +\n        '\\n' +\n        'Argument `idBagian`: Invalid value provided. Expected Int, provided String.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `tx.bagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:29:67\\n' +\n          '\\n' +\n          '  26     return 0;\\n' +\n          '  27 }\\n' +\n          '  28 \\n' +\n          '→ 29 const departmentEmployment = await tx.bagianonjabatan.create({\\n' +\n          '       data: {\\n' +\n          '         idBagian: \"2xxxx\",\\n' +\n          '                   ~~~~~~~\\n' +\n          '         idJabatan: \"2\"\\n' +\n          '       },\\n' +\n          '       select: {\\n' +\n          '         id: true,\\n' +\n          '         idBagianFK: {\\n' +\n          '           select: {\\n' +\n          '             namaBagian: true\\n' +\n          '           }\\n' +\n          '         },\\n' +\n          '         idJabatanFK: {\\n' +\n          '           select: {\\n' +\n          '             namaJabatan: true\\n' +\n          '           }\\n' +\n          '         }\\n' +\n          '       }\\n' +\n          '     })\\n' +\n          '\\n' +\n          'Argument `idBagian`: Invalid value provided. Expected Int, provided String.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:29:42\\n' +\n          '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n          '    at async Object.add_department_employment_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:14:29)\\n' +\n          '    at async add_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department_employment.ts:14:38)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-30 06:18:54"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.bagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:29:67\\n' +\n    '\\n' +\n    '  26     return 0;\\n' +\n    '  27 }\\n' +\n    '  28 \\n' +\n    '→ 29 const departmentEmployment = await tx.bagianonjabatan.create({\\n' +\n    '       data: {\\n' +\n    '         idBagian: \"2\",\\n' +\n    '                   ~~~\\n' +\n    '         idJabatan: \"2\"\\n' +\n    '       },\\n' +\n    '       select: {\\n' +\n    '         id: true,\\n' +\n    '         idBagianFK: {\\n' +\n    '           select: {\\n' +\n    '             namaBagian: true\\n' +\n    '           }\\n' +\n    '         },\\n' +\n    '         idJabatanFK: {\\n' +\n    '           select: {\\n' +\n    '             namaJabatan: true\\n' +\n    '           }\\n' +\n    '         }\\n' +\n    '       }\\n' +\n    '     })\\n' +\n    '\\n' +\n    'Argument `idBagian`: Invalid value provided. Expected Int, provided String.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.bagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:29:67\\n' +\n        '\\n' +\n        '  26     return 0;\\n' +\n        '  27 }\\n' +\n        '  28 \\n' +\n        '→ 29 const departmentEmployment = await tx.bagianonjabatan.create({\\n' +\n        '       data: {\\n' +\n        '         idBagian: \"2\",\\n' +\n        '                   ~~~\\n' +\n        '         idJabatan: \"2\"\\n' +\n        '       },\\n' +\n        '       select: {\\n' +\n        '         id: true,\\n' +\n        '         idBagianFK: {\\n' +\n        '           select: {\\n' +\n        '             namaBagian: true\\n' +\n        '           }\\n' +\n        '         },\\n' +\n        '         idJabatanFK: {\\n' +\n        '           select: {\\n' +\n        '             namaJabatan: true\\n' +\n        '           }\\n' +\n        '         }\\n' +\n        '       }\\n' +\n        '     })\\n' +\n        '\\n' +\n        'Argument `idBagian`: Invalid value provided. Expected Int, provided String.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `tx.bagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:29:67\\n' +\n          '\\n' +\n          '  26     return 0;\\n' +\n          '  27 }\\n' +\n          '  28 \\n' +\n          '→ 29 const departmentEmployment = await tx.bagianonjabatan.create({\\n' +\n          '       data: {\\n' +\n          '         idBagian: \"2\",\\n' +\n          '                   ~~~\\n' +\n          '         idJabatan: \"2\"\\n' +\n          '       },\\n' +\n          '       select: {\\n' +\n          '         id: true,\\n' +\n          '         idBagianFK: {\\n' +\n          '           select: {\\n' +\n          '             namaBagian: true\\n' +\n          '           }\\n' +\n          '         },\\n' +\n          '         idJabatanFK: {\\n' +\n          '           select: {\\n' +\n          '             namaJabatan: true\\n' +\n          '           }\\n' +\n          '         }\\n' +\n          '       }\\n' +\n          '     })\\n' +\n          '\\n' +\n          'Argument `idBagian`: Invalid value provided. Expected Int, provided String.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:29:42\\n' +\n          '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n          '    at async Object.add_department_employment_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:14:29)\\n' +\n          '    at async add_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_department_employment.ts:14:38)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-08-30 06:19:04"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.jabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_employment_model.ts:164:55\\n' +\n    '\\n' +\n    '  161 \\n' +\n    '  162 export async function delete_employment_model(data: any): Promise<ResultModel<Employment | null>> {\\n' +\n    '  163     try {\\n' +\n    '→ 164         const employment = await prisma.jabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.jabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_employment_model.ts:164:55\\n' +\n        '\\n' +\n        '  161 \\n' +\n        '  162 export async function delete_employment_model(data: any): Promise<ResultModel<Employment | null>> {\\n' +\n        '  163     try {\\n' +\n        '→ 164         const employment = await prisma.jabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'jabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 17:06:20"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.jabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_employment_model.ts:164:55\\n' +\n    '\\n' +\n    '  161 \\n' +\n    '  162 export async function delete_employment_model(data: any): Promise<ResultModel<Employment | null>> {\\n' +\n    '  163     try {\\n' +\n    '→ 164         const employment = await prisma.jabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.jabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_employment_model.ts:164:55\\n' +\n        '\\n' +\n        '  161 \\n' +\n        '  162 export async function delete_employment_model(data: any): Promise<ResultModel<Employment | null>> {\\n' +\n        '  163     try {\\n' +\n        '→ 164         const employment = await prisma.jabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'jabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 17:18:09"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.jabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_employment_model.ts:164:55\\n' +\n    '\\n' +\n    '  161 \\n' +\n    '  162 export async function delete_employment_model(data: any): Promise<ResultModel<Employment | null>> {\\n' +\n    '  163     try {\\n' +\n    '→ 164         const employment = await prisma.jabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.jabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_employment_model.ts:164:55\\n' +\n        '\\n' +\n        '  161 \\n' +\n        '  162 export async function delete_employment_model(data: any): Promise<ResultModel<Employment | null>> {\\n' +\n        '  163     try {\\n' +\n        '→ 164         const employment = await prisma.jabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'jabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 17:22:34"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:287:63\\n' +\n    '\\n' +\n    '  284 export async function delete_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  285     try {\\n' +\n    '  286 \\n' +\n    '→ 287         const deleteData = await prisma.bagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_employment_model.ts:287:63\\n' +\n        '\\n' +\n        '  284 export async function delete_department_employment_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  285     try {\\n' +\n        '  286 \\n' +\n        '→ 287         const deleteData = await prisma.bagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'bagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 17:27:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265     return { data: null }\\n' +\n    '  266 }\\n' +\n    '  267 \\n' +\n    '→ 268 const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265     return { data: null }\\n' +\n        '  266 }\\n' +\n        '  267 \\n' +\n        '→ 268 const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          target: 'usersonbagianonjabatan_idBagianJabatan_idUsers_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 17:45:31"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:241:67\\n' +\n    '\\n' +\n    '  238 export async function update_user_department_model(data: any, idBagianJabatan: number | undefined): Promise<ResultModel<User | null>> {\\n' +\n    '  239 \\n' +\n    '  240     try {\\n' +\n    '→ 241         const updateProcess = await prisma.usersonbagianonjabatan.update(\\n' +\n    'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:241:67\\n' +\n        '\\n' +\n        '  238 export async function update_user_department_model(data: any, idBagianJabatan: number | undefined): Promise<ResultModel<User | null>> {\\n' +\n        '  239 \\n' +\n        '  240     try {\\n' +\n        '→ 241         const updateProcess = await prisma.usersonbagianonjabatan.update(\\n' +\n        'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          target: 'usersonbagianonjabatan_idBagianJabatan_idUsers_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 17:45:52"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:17:48\\n' +\n    '\\n' +\n    '  14 //ANCHOR - Tambah Bagian\\n' +\n    '  15 export async function add_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  16     try {\\n' +\n    '→ 17         const department = await prisma.bagian.create(\\n' +\n    'Unique constraint failed on the constraint: `bagian_namaBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagian.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:17:48\\n' +\n        '\\n' +\n        '  14 //ANCHOR - Tambah Bagian\\n' +\n        '  15 export async function add_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  16     try {\\n' +\n        '→ 17         const department = await prisma.bagian.create(\\n' +\n        'Unique constraint failed on the constraint: `bagian_namaBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: { modelName: 'bagian', target: 'bagian_namaBagian_key' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 18:53:38"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.bagian.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:17:48\\n' +\n    '\\n' +\n    '  14 //ANCHOR - Tambah Bagian\\n' +\n    '  15 export async function add_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n    '  16     try {\\n' +\n    '→ 17         const department = await prisma.bagian.create(\\n' +\n    'Unique constraint failed on the constraint: `bagian_namaBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.bagian.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_department_model.ts:17:48\\n' +\n        '\\n' +\n        '  14 //ANCHOR - Tambah Bagian\\n' +\n        '  15 export async function add_department_model(data: any): Promise<ResultModel<Department | null>> {\\n' +\n        '  16     try {\\n' +\n        '→ 17         const department = await prisma.bagian.create(\\n' +\n        'Unique constraint failed on the constraint: `bagian_namaBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: { modelName: 'bagian', target: 'bagian_namaBagian_key' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 18:53:40"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n    '\\n' +\n    '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  179     try {\\n' +\n    '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n    '→ 181         const user = await prisma.users.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  email: undefined,\\n' +\n    '                  password: \"$2b$10$RTjTRuVeVPz.kK323aTtweFuL7nKczRDkxKoslRozJm8Gno1aXnxG\",\\n' +\n    '                  isActive: undefined,\\n' +\n    '                  isAdmin: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  email: true,\\n' +\n    '                  isActive: true,\\n' +\n    '                  isAdmin: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n        '\\n' +\n        '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  179     try {\\n' +\n        '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n        '→ 181         const user = await prisma.users.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  email: undefined,\\n' +\n        '                  password: \"$2b$10$RTjTRuVeVPz.kK323aTtweFuL7nKczRDkxKoslRozJm8Gno1aXnxG\",\\n' +\n        '                  isActive: undefined,\\n' +\n        '                  isAdmin: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  email: true,\\n' +\n        '                  isActive: true,\\n' +\n        '                  isAdmin: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.users.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n          '\\n' +\n          '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n          '  179     try {\\n' +\n          '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n          '→ 181         const user = await prisma.users.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  email: undefined,\\n' +\n          '                  password: \"$2b$10$RTjTRuVeVPz.kK323aTtweFuL7nKczRDkxKoslRozJm8Gno1aXnxG\",\\n' +\n          '                  isActive: undefined,\\n' +\n          '                  isAdmin: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  email: true,\\n' +\n          '                  isActive: true,\\n' +\n          '                  isAdmin: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_user_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:22)\\n' +\n          '    at async update_user (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:206:22)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:04:18"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n    '\\n' +\n    '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  179     try {\\n' +\n    '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n    '→ 181         const user = await prisma.users.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  email: undefined,\\n' +\n    '                  password: \"$2b$10$aa7h1xLSGm71OcxW7IG/but77S1NY008EMfLVMWi4YMtwkB90X1DC\",\\n' +\n    '                  isActive: undefined,\\n' +\n    '                  isAdmin: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  email: true,\\n' +\n    '                  isActive: true,\\n' +\n    '                  isAdmin: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n        '\\n' +\n        '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  179     try {\\n' +\n        '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n        '→ 181         const user = await prisma.users.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  email: undefined,\\n' +\n        '                  password: \"$2b$10$aa7h1xLSGm71OcxW7IG/but77S1NY008EMfLVMWi4YMtwkB90X1DC\",\\n' +\n        '                  isActive: undefined,\\n' +\n        '                  isAdmin: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  email: true,\\n' +\n        '                  isActive: true,\\n' +\n        '                  isAdmin: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.users.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n          '\\n' +\n          '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n          '  179     try {\\n' +\n          '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n          '→ 181         const user = await prisma.users.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  email: undefined,\\n' +\n          '                  password: \"$2b$10$aa7h1xLSGm71OcxW7IG/but77S1NY008EMfLVMWi4YMtwkB90X1DC\",\\n' +\n          '                  isActive: undefined,\\n' +\n          '                  isAdmin: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  email: true,\\n' +\n          '                  isActive: true,\\n' +\n          '                  isAdmin: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_user_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:22)\\n' +\n          '    at async update_user (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:206:22)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:06:42"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n    '\\n' +\n    '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  179     try {\\n' +\n    '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n    '→ 181         const user = await prisma.users.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  email: undefined,\\n' +\n    '                  password: \"$2b$10$2whMiRoIrZ20VYOgJWN4Deh73ddFU5tffNhrA1Ut9PHDkZW6MZWZy\",\\n' +\n    '                  isActive: undefined,\\n' +\n    '                  isAdmin: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  email: true,\\n' +\n    '                  isActive: true,\\n' +\n    '                  isAdmin: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n        '\\n' +\n        '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  179     try {\\n' +\n        '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n        '→ 181         const user = await prisma.users.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  email: undefined,\\n' +\n        '                  password: \"$2b$10$2whMiRoIrZ20VYOgJWN4Deh73ddFU5tffNhrA1Ut9PHDkZW6MZWZy\",\\n' +\n        '                  isActive: undefined,\\n' +\n        '                  isAdmin: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  email: true,\\n' +\n        '                  isActive: true,\\n' +\n        '                  isAdmin: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.users.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n          '\\n' +\n          '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n          '  179     try {\\n' +\n          '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n          '→ 181         const user = await prisma.users.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  email: undefined,\\n' +\n          '                  password: \"$2b$10$2whMiRoIrZ20VYOgJWN4Deh73ddFU5tffNhrA1Ut9PHDkZW6MZWZy\",\\n' +\n          '                  isActive: undefined,\\n' +\n          '                  isAdmin: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  email: true,\\n' +\n          '                  isActive: true,\\n' +\n          '                  isAdmin: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_user_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:22)\\n' +\n          '    at async update_user (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:206:22)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:07:00"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n    '\\n' +\n    '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  179     try {\\n' +\n    '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n    '→ 181         const user = await prisma.users.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  email: undefined,\\n' +\n    '                  password: \"$2b$10$SPEJ.VixS0HIbcDygbXtdOnKCROpGRk09d4CXTuQ8hJlCMYSprGb.\",\\n' +\n    '                  isActive: undefined,\\n' +\n    '                  isAdmin: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  email: true,\\n' +\n    '                  isActive: true,\\n' +\n    '                  isAdmin: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n        '\\n' +\n        '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  179     try {\\n' +\n        '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n        '→ 181         const user = await prisma.users.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  email: undefined,\\n' +\n        '                  password: \"$2b$10$SPEJ.VixS0HIbcDygbXtdOnKCROpGRk09d4CXTuQ8hJlCMYSprGb.\",\\n' +\n        '                  isActive: undefined,\\n' +\n        '                  isAdmin: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  email: true,\\n' +\n        '                  isActive: true,\\n' +\n        '                  isAdmin: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.users.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n          '\\n' +\n          '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n          '  179     try {\\n' +\n          '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n          '→ 181         const user = await prisma.users.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  email: undefined,\\n' +\n          '                  password: \"$2b$10$SPEJ.VixS0HIbcDygbXtdOnKCROpGRk09d4CXTuQ8hJlCMYSprGb.\",\\n' +\n          '                  isActive: undefined,\\n' +\n          '                  isAdmin: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  email: true,\\n' +\n          '                  isActive: true,\\n' +\n          '                  isAdmin: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_user_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:22)\\n' +\n          '    at async update_user (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:206:22)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:07:07"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n    '\\n' +\n    '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  179     try {\\n' +\n    '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n    '→ 181         const user = await prisma.users.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  email: undefined,\\n' +\n    '                  password: \"$2b$10$mDWJHRY2ZSNpKs6AjakHFOeCtjqV9YvU6j8pvykcCadNPU2UGpm4S\",\\n' +\n    '                  isActive: undefined,\\n' +\n    '                  isAdmin: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  email: true,\\n' +\n    '                  isActive: true,\\n' +\n    '                  isAdmin: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n        '\\n' +\n        '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  179     try {\\n' +\n        '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n        '→ 181         const user = await prisma.users.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  email: undefined,\\n' +\n        '                  password: \"$2b$10$mDWJHRY2ZSNpKs6AjakHFOeCtjqV9YvU6j8pvykcCadNPU2UGpm4S\",\\n' +\n        '                  isActive: undefined,\\n' +\n        '                  isAdmin: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  email: true,\\n' +\n        '                  isActive: true,\\n' +\n        '                  isAdmin: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.users.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n          '\\n' +\n          '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n          '  179     try {\\n' +\n          '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n          '→ 181         const user = await prisma.users.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  email: undefined,\\n' +\n          '                  password: \"$2b$10$mDWJHRY2ZSNpKs6AjakHFOeCtjqV9YvU6j8pvykcCadNPU2UGpm4S\",\\n' +\n          '                  isActive: undefined,\\n' +\n          '                  isAdmin: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  email: true,\\n' +\n          '                  isActive: true,\\n' +\n          '                  isAdmin: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_user_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:22)\\n' +\n          '    at async update_user (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:206:22)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:07:44"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n    '\\n' +\n    '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  179     try {\\n' +\n    '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n    '→ 181         const user = await prisma.users.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  email: undefined,\\n' +\n    '                  password: \"$2b$10$V.FjarHiHAwaqrWoZu69q.WoORnNLfOvhxyg9NzCbkCzPw56ppM4W\",\\n' +\n    '                  isActive: undefined,\\n' +\n    '                  isAdmin: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  email: true,\\n' +\n    '                  isActive: true,\\n' +\n    '                  isAdmin: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n        '\\n' +\n        '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  179     try {\\n' +\n        '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n        '→ 181         const user = await prisma.users.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  email: undefined,\\n' +\n        '                  password: \"$2b$10$V.FjarHiHAwaqrWoZu69q.WoORnNLfOvhxyg9NzCbkCzPw56ppM4W\",\\n' +\n        '                  isActive: undefined,\\n' +\n        '                  isAdmin: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  email: true,\\n' +\n        '                  isActive: true,\\n' +\n        '                  isAdmin: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.users.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n          '\\n' +\n          '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n          '  179     try {\\n' +\n          '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n          '→ 181         const user = await prisma.users.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  email: undefined,\\n' +\n          '                  password: \"$2b$10$V.FjarHiHAwaqrWoZu69q.WoORnNLfOvhxyg9NzCbkCzPw56ppM4W\",\\n' +\n          '                  isActive: undefined,\\n' +\n          '                  isAdmin: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  email: true,\\n' +\n          '                  isActive: true,\\n' +\n          '                  isAdmin: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_user_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:22)\\n' +\n          '    at async update_user (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:206:22)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:07:46"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n    '\\n' +\n    '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  179     try {\\n' +\n    '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n    '→ 181         const user = await prisma.users.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  email: undefined,\\n' +\n    '                  password: \"$2b$10$g2Ub7upS9/1E4QNyXjnok.epSYCPMJysRCIiZUqKILQqlb.Ged/OK\",\\n' +\n    '                  isActive: undefined,\\n' +\n    '                  isAdmin: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  email: true,\\n' +\n    '                  isActive: true,\\n' +\n    '                  isAdmin: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n        '\\n' +\n        '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  179     try {\\n' +\n        '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n        '→ 181         const user = await prisma.users.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  email: undefined,\\n' +\n        '                  password: \"$2b$10$g2Ub7upS9/1E4QNyXjnok.epSYCPMJysRCIiZUqKILQqlb.Ged/OK\",\\n' +\n        '                  isActive: undefined,\\n' +\n        '                  isAdmin: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  email: true,\\n' +\n        '                  isActive: true,\\n' +\n        '                  isAdmin: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.users.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n          '\\n' +\n          '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n          '  179     try {\\n' +\n          '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n          '→ 181         const user = await prisma.users.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  email: undefined,\\n' +\n          '                  password: \"$2b$10$g2Ub7upS9/1E4QNyXjnok.epSYCPMJysRCIiZUqKILQqlb.Ged/OK\",\\n' +\n          '                  isActive: undefined,\\n' +\n          '                  isAdmin: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  email: true,\\n' +\n          '                  isActive: true,\\n' +\n          '                  isAdmin: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_user_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:22)\\n' +\n          '    at async update_user (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:206:22)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:07:46"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n    '\\n' +\n    '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  179     try {\\n' +\n    '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n    '→ 181         const user = await prisma.users.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  email: undefined,\\n' +\n    '                  password: \"$2b$10$S/IgRn2lgmkPMeyVkxoJcOiL93IFWtr9BTqfGY84hrE5Qgd6dWOgG\",\\n' +\n    '                  isActive: undefined,\\n' +\n    '                  isAdmin: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  email: true,\\n' +\n    '                  isActive: true,\\n' +\n    '                  isAdmin: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n        '\\n' +\n        '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  179     try {\\n' +\n        '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n        '→ 181         const user = await prisma.users.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  email: undefined,\\n' +\n        '                  password: \"$2b$10$S/IgRn2lgmkPMeyVkxoJcOiL93IFWtr9BTqfGY84hrE5Qgd6dWOgG\",\\n' +\n        '                  isActive: undefined,\\n' +\n        '                  isAdmin: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  email: true,\\n' +\n        '                  isActive: true,\\n' +\n        '                  isAdmin: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.users.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n          '\\n' +\n          '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n          '  179     try {\\n' +\n          '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n          '→ 181         const user = await prisma.users.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  email: undefined,\\n' +\n          '                  password: \"$2b$10$S/IgRn2lgmkPMeyVkxoJcOiL93IFWtr9BTqfGY84hrE5Qgd6dWOgG\",\\n' +\n          '                  isActive: undefined,\\n' +\n          '                  isAdmin: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  email: true,\\n' +\n          '                  isActive: true,\\n' +\n          '                  isAdmin: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_user_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:22)\\n' +\n          '    at async update_user (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:206:22)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:07:47"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n    '\\n' +\n    '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  179     try {\\n' +\n    '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n    '→ 181         const user = await prisma.users.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  email: undefined,\\n' +\n    '                  password: \"$2b$10$8yylCGdq3aSYFW9cjzyoqujNQD9kV6zx4LVsl4prUjnbUJWVpn7Yq\",\\n' +\n    '                  isActive: undefined,\\n' +\n    '                  isAdmin: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  email: true,\\n' +\n    '                  isActive: true,\\n' +\n    '                  isAdmin: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n        '\\n' +\n        '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  179     try {\\n' +\n        '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n        '→ 181         const user = await prisma.users.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  email: undefined,\\n' +\n        '                  password: \"$2b$10$8yylCGdq3aSYFW9cjzyoqujNQD9kV6zx4LVsl4prUjnbUJWVpn7Yq\",\\n' +\n        '                  isActive: undefined,\\n' +\n        '                  isAdmin: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  email: true,\\n' +\n        '                  isActive: true,\\n' +\n        '                  isAdmin: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.users.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n          '\\n' +\n          '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n          '  179     try {\\n' +\n          '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n          '→ 181         const user = await prisma.users.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  email: undefined,\\n' +\n          '                  password: \"$2b$10$8yylCGdq3aSYFW9cjzyoqujNQD9kV6zx4LVsl4prUjnbUJWVpn7Yq\",\\n' +\n          '                  isActive: undefined,\\n' +\n          '                  isAdmin: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  email: true,\\n' +\n          '                  isActive: true,\\n' +\n          '                  isAdmin: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_user_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:22)\\n' +\n          '    at async update_user (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:206:22)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:07:48"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n    '\\n' +\n    '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  179     try {\\n' +\n    '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n    '→ 181         const user = await prisma.users.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  email: undefined,\\n' +\n    '                  password: \"$2b$10$5hckIykYT/2My7Bq6.kEOewLPvqpylQIAHJ2zUX8thgCWvA8vh15e\",\\n' +\n    '                  isActive: undefined,\\n' +\n    '                  isAdmin: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  email: true,\\n' +\n    '                  isActive: true,\\n' +\n    '                  isAdmin: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n        '\\n' +\n        '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  179     try {\\n' +\n        '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n        '→ 181         const user = await prisma.users.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  email: undefined,\\n' +\n        '                  password: \"$2b$10$5hckIykYT/2My7Bq6.kEOewLPvqpylQIAHJ2zUX8thgCWvA8vh15e\",\\n' +\n        '                  isActive: undefined,\\n' +\n        '                  isAdmin: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  email: true,\\n' +\n        '                  isActive: true,\\n' +\n        '                  isAdmin: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.users.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n          '\\n' +\n          '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n          '  179     try {\\n' +\n          '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n          '→ 181         const user = await prisma.users.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  email: undefined,\\n' +\n          '                  password: \"$2b$10$5hckIykYT/2My7Bq6.kEOewLPvqpylQIAHJ2zUX8thgCWvA8vh15e\",\\n' +\n          '                  isActive: undefined,\\n' +\n          '                  isAdmin: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  email: true,\\n' +\n          '                  isActive: true,\\n' +\n          '                  isAdmin: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_user_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:22)\\n' +\n          '    at async update_user (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:206:22)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:07:48"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n    '\\n' +\n    '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  179     try {\\n' +\n    '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n    '→ 181         const user = await prisma.users.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  email: undefined,\\n' +\n    '                  password: \"$2b$10$xig1balP0suWVDUKjDRihuuz.6/pD2PqalNoxDINok/hziheYOGB.\",\\n' +\n    '                  isActive: undefined,\\n' +\n    '                  isAdmin: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  email: true,\\n' +\n    '                  isActive: true,\\n' +\n    '                  isAdmin: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n        '\\n' +\n        '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  179     try {\\n' +\n        '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n        '→ 181         const user = await prisma.users.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  email: undefined,\\n' +\n        '                  password: \"$2b$10$xig1balP0suWVDUKjDRihuuz.6/pD2PqalNoxDINok/hziheYOGB.\",\\n' +\n        '                  isActive: undefined,\\n' +\n        '                  isAdmin: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  email: true,\\n' +\n        '                  isActive: true,\\n' +\n        '                  isAdmin: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.users.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n          '\\n' +\n          '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n          '  179     try {\\n' +\n          '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n          '→ 181         const user = await prisma.users.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  email: undefined,\\n' +\n          '                  password: \"$2b$10$xig1balP0suWVDUKjDRihuuz.6/pD2PqalNoxDINok/hziheYOGB.\",\\n' +\n          '                  isActive: undefined,\\n' +\n          '                  isAdmin: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  email: true,\\n' +\n          '                  isActive: true,\\n' +\n          '                  isAdmin: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_user_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:22)\\n' +\n          '    at async update_user (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:206:22)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:07:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n    '\\n' +\n    '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  179     try {\\n' +\n    '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n    '→ 181         const user = await prisma.users.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  email: undefined,\\n' +\n    '                  password: \"$2b$10$rztV2kQPEqwFtoGIDfmeP.yBMqSOE2CUBXCIzMI1F7dhJi4MmIoIq\",\\n' +\n    '                  isActive: undefined,\\n' +\n    '                  isAdmin: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  email: true,\\n' +\n    '                  isActive: true,\\n' +\n    '                  isAdmin: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n        '\\n' +\n        '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  179     try {\\n' +\n        '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n        '→ 181         const user = await prisma.users.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  email: undefined,\\n' +\n        '                  password: \"$2b$10$rztV2kQPEqwFtoGIDfmeP.yBMqSOE2CUBXCIzMI1F7dhJi4MmIoIq\",\\n' +\n        '                  isActive: undefined,\\n' +\n        '                  isAdmin: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  email: true,\\n' +\n        '                  isActive: true,\\n' +\n        '                  isAdmin: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.users.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n          '\\n' +\n          '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n          '  179     try {\\n' +\n          '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n          '→ 181         const user = await prisma.users.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  email: undefined,\\n' +\n          '                  password: \"$2b$10$rztV2kQPEqwFtoGIDfmeP.yBMqSOE2CUBXCIzMI1F7dhJi4MmIoIq\",\\n' +\n          '                  isActive: undefined,\\n' +\n          '                  isAdmin: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  email: true,\\n' +\n          '                  isActive: true,\\n' +\n          '                  isAdmin: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_user_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:22)\\n' +\n          '    at async update_user (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:206:22)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:09:19"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n    '\\n' +\n    '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  179     try {\\n' +\n    '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n    '→ 181         const user = await prisma.users.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  email: undefined,\\n' +\n    '                  password: \"$2b$10$2xaLlswqlJffvTTgWw8DneKhak2EMntYMtm8lFa11l07aEWBxxajC\",\\n' +\n    '                  isActive: undefined,\\n' +\n    '                  isAdmin: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  email: true,\\n' +\n    '                  isActive: true,\\n' +\n    '                  isAdmin: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n        '\\n' +\n        '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  179     try {\\n' +\n        '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n        '→ 181         const user = await prisma.users.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  email: undefined,\\n' +\n        '                  password: \"$2b$10$2xaLlswqlJffvTTgWw8DneKhak2EMntYMtm8lFa11l07aEWBxxajC\",\\n' +\n        '                  isActive: undefined,\\n' +\n        '                  isAdmin: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  email: true,\\n' +\n        '                  isActive: true,\\n' +\n        '                  isAdmin: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.users.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n          '\\n' +\n          '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n          '  179     try {\\n' +\n          '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n          '→ 181         const user = await prisma.users.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  email: undefined,\\n' +\n          '                  password: \"$2b$10$2xaLlswqlJffvTTgWw8DneKhak2EMntYMtm8lFa11l07aEWBxxajC\",\\n' +\n          '                  isActive: undefined,\\n' +\n          '                  isAdmin: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  email: true,\\n' +\n          '                  isActive: true,\\n' +\n          '                  isAdmin: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_user_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:22)\\n' +\n          '    at async update_user (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:206:22)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:10:09"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n    '\\n' +\n    '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  179     try {\\n' +\n    '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n    '→ 181         const user = await prisma.users.update({\\n' +\n    '                where: {\\n' +\n    '              +   id: Int\\n' +\n    '                },\\n' +\n    '                data: {\\n' +\n    '                  email: undefined,\\n' +\n    '                  password: \"$2b$10$RnJuQq6DCg3anu.auKHw7ueOZMCaQJT9YfY1PpxoxSBl8ygT/jpsq\",\\n' +\n    '                  isActive: undefined,\\n' +\n    '                  isAdmin: undefined\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  email: true,\\n' +\n    '                  isActive: true,\\n' +\n    '                  isAdmin: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n        '\\n' +\n        '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  179     try {\\n' +\n        '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n        '→ 181         const user = await prisma.users.update({\\n' +\n        '                where: {\\n' +\n        '              +   id: Int\\n' +\n        '                },\\n' +\n        '                data: {\\n' +\n        '                  email: undefined,\\n' +\n        '                  password: \"$2b$10$RnJuQq6DCg3anu.auKHw7ueOZMCaQJT9YfY1PpxoxSBl8ygT/jpsq\",\\n' +\n        '                  isActive: undefined,\\n' +\n        '                  isAdmin: undefined\\n' +\n        '                },\\n' +\n        '                select: {\\n' +\n        '                  id: true,\\n' +\n        '                  email: true,\\n' +\n        '                  isActive: true,\\n' +\n        '                  isAdmin: true\\n' +\n        '                }\\n' +\n        '              })\\n' +\n        '\\n' +\n        'Argument `id` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.users.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:41\\n' +\n          '\\n' +\n          '  178 export async function update_user_model(data: any): Promise<ResultModel<User>> {\\n' +\n          '  179     try {\\n' +\n          '  180         let password = data.password == \"\" ? undefined : data.password\\n' +\n          '→ 181         const user = await prisma.users.update({\\n' +\n          '                where: {\\n' +\n          '              +   id: Int\\n' +\n          '                },\\n' +\n          '                data: {\\n' +\n          '                  email: undefined,\\n' +\n          '                  password: \"$2b$10$RnJuQq6DCg3anu.auKHw7ueOZMCaQJT9YfY1PpxoxSBl8ygT/jpsq\",\\n' +\n          '                  isActive: undefined,\\n' +\n          '                  isAdmin: undefined\\n' +\n          '                },\\n' +\n          '                select: {\\n' +\n          '                  id: true,\\n' +\n          '                  email: true,\\n' +\n          '                  isActive: true,\\n' +\n          '                  isAdmin: true\\n' +\n          '                }\\n' +\n          '              })\\n' +\n          '\\n' +\n          'Argument `id` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_user_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:181:22)\\n' +\n          '    at async update_user (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:206:22)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:11:01"}
{"level":"error","message":"CustomError: {\n  message: 'Password Salah',\n  context: [\n    { message: 'Password Salah', context: { code: 'L002' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:11:36"}
{"level":"error","message":"CustomError: {\n  message: 'Password Salah',\n  context: [\n    { message: 'Password Salah', context: { code: 'L002' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:12:54"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Aktif',\n  context: [\n    { message: 'User Tidak Aktif', context: { code: 'L003' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:19:43"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Aktif',\n  context: [\n    { message: 'User Tidak Aktif', context: { code: 'L003' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:19:58"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Aktif',\n  context: [\n    { message: 'User Tidak Aktif', context: { code: 'L003' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:20:00"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Aktif',\n  context: [\n    { message: 'User Tidak Aktif', context: { code: 'L003' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:20:01"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Aktif',\n  context: [\n    { message: 'User Tidak Aktif', context: { code: 'L003' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 21:20:02"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 22:13:13"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 22:16:14"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 22:16:19"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 22:16:31"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 22:16:40"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 22:16:55"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 22:17:07"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 22:17:47"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 22:17:57"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 22:18:31"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 22:18:35"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-01 22:44:39"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 16:59:52"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:01:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:24"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:29"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:30"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:31"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:33"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:33"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:33"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:33"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:33"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:34"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:34"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:34"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:34"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:34"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:34"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:36"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:02:36"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:44"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:46"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:47"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:47"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:48"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:48"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:53"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:54"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:54"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:54"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:55"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:55"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:55"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:55"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:55"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:55"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:03:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n    '\\n' +\n    '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  222 \\n' +\n    '  223     try {\\n' +\n    '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.delete()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:224:73\\n' +\n        '\\n' +\n        '  221 export async function delete_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  222 \\n' +\n        '  223     try {\\n' +\n        '→ 224         const deleteProcess = await prisma.usersonbagianonjabatan.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 17:04:01"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:201:73\\n' +\n    '\\n' +\n    '  198     }\\n' +\n    '  199 })\\n' +\n    '  200 \\n' +\n    '→ 201 const updateBagianJabatan = await prisma.usersonbagianonjabatan.update({\\n' +\n    '        where: {\\n' +\n    '          id: \"1\"\\n' +\n    '              ~~~\\n' +\n    '        },\\n' +\n    '        data: {\\n' +\n    '          idBagianJabatan: undefined\\n' +\n    '        },\\n' +\n    '        select: {\\n' +\n    '          id: true\\n' +\n    '        }\\n' +\n    '      })\\n' +\n    '\\n' +\n    'Argument `id`: Invalid value provided. Expected Int, provided String.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:201:73\\n' +\n        '\\n' +\n        '  198     }\\n' +\n        '  199 })\\n' +\n        '  200 \\n' +\n        '→ 201 const updateBagianJabatan = await prisma.usersonbagianonjabatan.update({\\n' +\n        '        where: {\\n' +\n        '          id: \"1\"\\n' +\n        '              ~~~\\n' +\n        '        },\\n' +\n        '        data: {\\n' +\n        '          idBagianJabatan: undefined\\n' +\n        '        },\\n' +\n        '        select: {\\n' +\n        '          id: true\\n' +\n        '        }\\n' +\n        '      })\\n' +\n        '\\n' +\n        'Argument `id`: Invalid value provided. Expected Int, provided String.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:201:73\\n' +\n          '\\n' +\n          '  198     }\\n' +\n          '  199 })\\n' +\n          '  200 \\n' +\n          '→ 201 const updateBagianJabatan = await prisma.usersonbagianonjabatan.update({\\n' +\n          '        where: {\\n' +\n          '          id: \"1\"\\n' +\n          '              ~~~\\n' +\n          '        },\\n' +\n          '        data: {\\n' +\n          '          idBagianJabatan: undefined\\n' +\n          '        },\\n' +\n          '        select: {\\n' +\n          '          id: true\\n' +\n          '        }\\n' +\n          '      })\\n' +\n          '\\n' +\n          'Argument `id`: Invalid value provided. Expected Int, provided String.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_user_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:201:37)\\n' +\n          '    at async update_user (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:208:22)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 20:35:42"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:201:73\\n' +\n    '\\n' +\n    '  198     }\\n' +\n    '  199 })\\n' +\n    '  200 \\n' +\n    '→ 201 const updateBagianJabatan = await prisma.usersonbagianonjabatan.update({\\n' +\n    '        where: {\\n' +\n    '          id: \"1\"\\n' +\n    '              ~~~\\n' +\n    '        },\\n' +\n    '        data: {\\n' +\n    '          idBagianJabatan: undefined\\n' +\n    '        },\\n' +\n    '        select: {\\n' +\n    '          id: true\\n' +\n    '        }\\n' +\n    '      })\\n' +\n    '\\n' +\n    'Argument `id`: Invalid value provided. Expected Int, provided String.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:201:73\\n' +\n        '\\n' +\n        '  198     }\\n' +\n        '  199 })\\n' +\n        '  200 \\n' +\n        '→ 201 const updateBagianJabatan = await prisma.usersonbagianonjabatan.update({\\n' +\n        '        where: {\\n' +\n        '          id: \"1\"\\n' +\n        '              ~~~\\n' +\n        '        },\\n' +\n        '        data: {\\n' +\n        '          idBagianJabatan: undefined\\n' +\n        '        },\\n' +\n        '        select: {\\n' +\n        '          id: true\\n' +\n        '        }\\n' +\n        '      })\\n' +\n        '\\n' +\n        'Argument `id`: Invalid value provided. Expected Int, provided String.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:201:73\\n' +\n          '\\n' +\n          '  198     }\\n' +\n          '  199 })\\n' +\n          '  200 \\n' +\n          '→ 201 const updateBagianJabatan = await prisma.usersonbagianonjabatan.update({\\n' +\n          '        where: {\\n' +\n          '          id: \"1\"\\n' +\n          '              ~~~\\n' +\n          '        },\\n' +\n          '        data: {\\n' +\n          '          idBagianJabatan: undefined\\n' +\n          '        },\\n' +\n          '        select: {\\n' +\n          '          id: true\\n' +\n          '        }\\n' +\n          '      })\\n' +\n          '\\n' +\n          'Argument `id`: Invalid value provided. Expected Int, provided String.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.update_user_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:201:37)\\n' +\n          '    at async update_user (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:208:22)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-04 20:36:42"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '              idUsers: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '              idUsers: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '              idUsers: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:313:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:07:48"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '              idUsers: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '              idUsers: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '              idUsers: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:313:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:08:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '              idUsers: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '              idUsers: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '              idUsers: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:313:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:09:42"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: NaN,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idUsers: NaN,\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idUsers: NaN,\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:313:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:10:48"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: NaN,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idUsers: NaN,\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idUsers: NaN,\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:313:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:10:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: NaN,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idUsers: NaN,\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idUsers: NaN,\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:313:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:10:50"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: NaN,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idUsers: NaN,\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idUsers: NaN,\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:313:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:10:57"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: NaN,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idUsers: NaN,\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idUsers: NaN,\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:313:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:10:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: NaN,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idUsers: NaN,\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idUsers: NaN,\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:314:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:11:44"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: NaN,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idUsers: NaN,\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idUsers: NaN,\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:314:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:11:47"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: NaN,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idUsers: NaN,\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idUsers: NaN,\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:314:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:11:48"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: NaN,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idUsers: NaN,\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idUsers: NaN,\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:314:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:11:50"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: NaN,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idUsers: NaN,\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idUsers: NaN,\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:314:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:11:51"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: NaN,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idUsers: NaN,\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idUsers: NaN,\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:314:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:11:59"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: NaN,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idUsers: NaN,\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idUsers: NaN,\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:314:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:11:59"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: NaN,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idUsers: NaN,\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idUsers: NaN,\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:314:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:12:42"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: NaN,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idUsers: NaN,\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idUsers: NaN,\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:314:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:14:14"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: NaN,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n        '            data: {\\n' +\n        '              idUsers: NaN,\\n' +\n        '              idBagianJabatan: NaN,\\n' +\n        '          +   idUsersFK: {\\n' +\n        '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n        '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n        '          +     connect: usersWhereUniqueInput\\n' +\n        '          +   }\\n' +\n        '            },\\n' +\n        '            select: {\\n' +\n        '              id: true\\n' +\n        '            }\\n' +\n        '          })\\n' +\n        '\\n' +\n        'Argument `idUsersFK` is missing.',\n      context: {\n        stack: 'PrismaClientValidationError: \\n' +\n          'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n          'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n          '\\n' +\n          '  265 \\n' +\n          '  266 try {\\n' +\n          '  267 \\n' +\n          '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n          '            data: {\\n' +\n          '              idUsers: NaN,\\n' +\n          '              idBagianJabatan: NaN,\\n' +\n          '          +   idUsersFK: {\\n' +\n          '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n          '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n          '          +     connect: usersWhereUniqueInput\\n' +\n          '          +   }\\n' +\n          '            },\\n' +\n          '            select: {\\n' +\n          '              id: true\\n' +\n          '            }\\n' +\n          '          })\\n' +\n          '\\n' +\n          'Argument `idUsersFK` is missing.\\n' +\n          '    at Sn (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:115:7526)\\n' +\n          '    at _n.handleRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6570)\\n' +\n          '    at _n.handleAndLogRequestError (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:6235)\\n' +\n          '    at _n.request (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:122:5919)\\n' +\n          '    at async l (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:9116)\\n' +\n          '    at async Object.add_user_department_model (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:31)\\n' +\n          '    at async add_user_department_employment (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin_users.ts:314:28)'\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:14:38"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          target: 'usersonbagianonjabatan_idBagianJabatan_idUsers_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:15:24"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          target: 'usersonbagianonjabatan_idBagianJabatan_idUsers_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:15:26"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Foreign key constraint failed on the field: `idBagianJabatan`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Foreign key constraint failed on the field: `idBagianJabatan`',\n      context: {\n        code: 'P2003',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          field_name: 'idBagianJabatan'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:22:23"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Foreign key constraint failed on the field: `idBagianJabatan`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Foreign key constraint failed on the field: `idBagianJabatan`',\n      context: {\n        code: 'P2003',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          field_name: 'idBagianJabatan'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:22:24"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Foreign key constraint failed on the field: `idBagianJabatan`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Foreign key constraint failed on the field: `idBagianJabatan`',\n      context: {\n        code: 'P2003',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          field_name: 'idBagianJabatan'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:23:45"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Foreign key constraint failed on the field: `idBagianJabatan`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Foreign key constraint failed on the field: `idBagianJabatan`',\n      context: {\n        code: 'P2003',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          field_name: 'idBagianJabatan'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:23:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Foreign key constraint failed on the field: `idBagianJabatan`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Foreign key constraint failed on the field: `idBagianJabatan`',\n      context: {\n        code: 'P2003',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          field_name: 'idBagianJabatan'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:23:50"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Foreign key constraint failed on the field: `idBagianJabatan`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Foreign key constraint failed on the field: `idBagianJabatan`',\n      context: {\n        code: 'P2003',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          field_name: 'idBagianJabatan'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:23:50"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Foreign key constraint failed on the field: `idBagianJabatan`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Foreign key constraint failed on the field: `idBagianJabatan`',\n      context: {\n        code: 'P2003',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          field_name: 'idBagianJabatan'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:23:50"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Foreign key constraint failed on the field: `idBagianJabatan`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Foreign key constraint failed on the field: `idBagianJabatan`',\n      context: {\n        code: 'P2003',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          field_name: 'idBagianJabatan'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:23:50"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Foreign key constraint failed on the field: `idBagianJabatan`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Foreign key constraint failed on the field: `idBagianJabatan`',\n      context: {\n        code: 'P2003',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          field_name: 'idBagianJabatan'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:24:21"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Foreign key constraint failed on the field: `idBagianJabatan`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Foreign key constraint failed on the field: `idBagianJabatan`',\n      context: {\n        code: 'P2003',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          field_name: 'idBagianJabatan'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:24:22"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Foreign key constraint failed on the field: `idBagianJabatan`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Foreign key constraint failed on the field: `idBagianJabatan`',\n      context: {\n        code: 'P2003',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          field_name: 'idBagianJabatan'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:24:59"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Foreign key constraint failed on the field: `idBagianJabatan`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Foreign key constraint failed on the field: `idBagianJabatan`',\n      context: {\n        code: 'P2003',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          field_name: 'idBagianJabatan'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:25:48"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Foreign key constraint failed on the field: `idBagianJabatan`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Foreign key constraint failed on the field: `idBagianJabatan`',\n      context: {\n        code: 'P2003',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          field_name: 'idBagianJabatan'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:25:48"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Foreign key constraint failed on the field: `idBagianJabatan`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Foreign key constraint failed on the field: `idBagianJabatan`',\n      context: {\n        code: 'P2003',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          field_name: 'idBagianJabatan'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:27:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:28:12"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:29:03"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:29:15"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:29:16"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:29:17"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:29:43"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:30:29"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:30:29"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:30:29"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:30:30"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:30:30"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:30:30"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:31:17"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:31:34"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:31:39"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:31:43"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:31:44"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:31:45"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create({\\n' +\n    '            data: {\\n' +\n    '              idUsers: 1,\\n' +\n    '              idBagianJabatan: NaN,\\n' +\n    '          +   idUsersFK: {\\n' +\n    '          +     create: usersCreateWithoutJabatanBagianInput | usersUncheckedCreateWithoutJabatanBagianInput,\\n' +\n    '          +     connectOrCreate: usersCreateOrConnectWithoutJabatanBagianInput,\\n' +\n    '          +     connect: usersWhereUniqueInput\\n' +\n    '          +   }\\n' +\n    '            },\\n' +\n    '            select: {\\n' +\n    '              id: true\\n' +\n    '            }\\n' +\n    '          })\\n' +\n    '\\n' +\n    'Argument `idUsersFK` is missing.'\n}","service":"user-service","timestamp":"2024-09-06 21:32:11"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          target: 'usersonbagianonjabatan_idBagianJabatan_idUsers_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:36:01"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n    '\\n' +\n    '  265 \\n' +\n    '  266 try {\\n' +\n    '  267 \\n' +\n    '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:268:67\\n' +\n        '\\n' +\n        '  265 \\n' +\n        '  266 try {\\n' +\n        '  267 \\n' +\n        '→ 268     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          target: 'usersonbagianonjabatan_idBagianJabatan_idUsers_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-06 21:36:02"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:245:67\\n' +\n    '\\n' +\n    '  242 export async function update_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  243 \\n' +\n    '  244     try {\\n' +\n    '→ 245         const updateProcess = await prisma.usersonbagianonjabatan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:245:67\\n' +\n        '\\n' +\n        '  242 export async function update_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  243 \\n' +\n        '  244     try {\\n' +\n        '→ 245         const updateProcess = await prisma.usersonbagianonjabatan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-07 06:48:30"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:245:67\\n' +\n    '\\n' +\n    '  242 export async function update_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  243 \\n' +\n    '  244     try {\\n' +\n    '→ 245         const updateProcess = await prisma.usersonbagianonjabatan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:245:67\\n' +\n        '\\n' +\n        '  242 export async function update_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  243 \\n' +\n        '  244     try {\\n' +\n        '→ 245         const updateProcess = await prisma.usersonbagianonjabatan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-07 06:48:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:246:67\\n' +\n    '\\n' +\n    '  243 export async function update_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  244 \\n' +\n    '  245     try {\\n' +\n    '→ 246         const updateProcess = await prisma.usersonbagianonjabatan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:246:67\\n' +\n        '\\n' +\n        '  243 export async function update_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  244 \\n' +\n        '  245     try {\\n' +\n        '→ 246         const updateProcess = await prisma.usersonbagianonjabatan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-14 05:21:59"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:246:67\\n' +\n    '\\n' +\n    '  243 export async function update_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  244 \\n' +\n    '  245     try {\\n' +\n    '→ 246         const updateProcess = await prisma.usersonbagianonjabatan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin_users_model.ts:246:67\\n' +\n        '\\n' +\n        '  243 export async function update_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  244 \\n' +\n        '  245     try {\\n' +\n        '→ 246         const updateProcess = await prisma.usersonbagianonjabatan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-14 05:22:03"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_users_model.ts:246:67\\n' +\n    '\\n' +\n    '  243 export async function update_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  244 \\n' +\n    '  245     try {\\n' +\n    '→ 246         const updateProcess = await prisma.usersonbagianonjabatan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_users_model.ts:246:67\\n' +\n        '\\n' +\n        '  243 export async function update_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  244 \\n' +\n        '  245     try {\\n' +\n        '→ 246         const updateProcess = await prisma.usersonbagianonjabatan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-14 06:19:05"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.kategori.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_model.ts:16:51\\n' +\n    '\\n' +\n    '  13 \\n' +\n    '  14 export async function add_category(data: kategori): Promise<ResultModel<kategori | null> | { data: string }>{\\n' +\n    '  15     try {\\n' +\n    '→ 16         const addCategory = await prisma.kategori.create(\\n' +\n    'Unique constraint failed on the constraint: `kategori_namaKategori_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.kategori.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_model.ts:16:51\\n' +\n        '\\n' +\n        '  13 \\n' +\n        '  14 export async function add_category(data: kategori): Promise<ResultModel<kategori | null> | { data: string }>{\\n' +\n        '  15     try {\\n' +\n        '→ 16         const addCategory = await prisma.kategori.create(\\n' +\n        'Unique constraint failed on the constraint: `kategori_namaKategori_key`',\n      context: {\n        code: 'P2002',\n        meta: { modelName: 'kategori', target: 'kategori_namaKategori_key' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-16 20:27:36"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.kategori.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_model.ts:16:51\\n' +\n    '\\n' +\n    '  13 \\n' +\n    '  14 export async function add_category(data: kategori): Promise<ResultModel<kategori | null> | { data: string }>{\\n' +\n    '  15     try {\\n' +\n    '→ 16         const addCategory = await prisma.kategori.create(\\n' +\n    'Unique constraint failed on the constraint: `kategori_namaKategori_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.kategori.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_model.ts:16:51\\n' +\n        '\\n' +\n        '  13 \\n' +\n        '  14 export async function add_category(data: kategori): Promise<ResultModel<kategori | null> | { data: string }>{\\n' +\n        '  15     try {\\n' +\n        '→ 16         const addCategory = await prisma.kategori.create(\\n' +\n        'Unique constraint failed on the constraint: `kategori_namaKategori_key`',\n      context: {\n        code: 'P2002',\n        meta: { modelName: 'kategori', target: 'kategori_namaKategori_key' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-16 20:27:37"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.kategori.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_model.ts:16:51\\n' +\n    '\\n' +\n    '  13 \\n' +\n    '  14 export async function add_category(data: kategori): Promise<ResultModel<kategori | null> | { data: string }>{\\n' +\n    '  15     try {\\n' +\n    '→ 16         const addCategory = await prisma.kategori.create(\\n' +\n    'Unique constraint failed on the constraint: `kategori_namaKategori_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.kategori.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_model.ts:16:51\\n' +\n        '\\n' +\n        '  13 \\n' +\n        '  14 export async function add_category(data: kategori): Promise<ResultModel<kategori | null> | { data: string }>{\\n' +\n        '  15     try {\\n' +\n        '→ 16         const addCategory = await prisma.kategori.create(\\n' +\n        'Unique constraint failed on the constraint: `kategori_namaKategori_key`',\n      context: {\n        code: 'P2002',\n        meta: { modelName: 'kategori', target: 'kategori_namaKategori_key' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-16 20:29:43"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.kategori.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_model.ts:16:51\\n' +\n    '\\n' +\n    '  13 \\n' +\n    '  14 export async function add_category(data: kategori): Promise<ResultModel<kategori | null> | { data: string }>{\\n' +\n    '  15     try {\\n' +\n    '→ 16         const addCategory = await prisma.kategori.create(\\n' +\n    'Unique constraint failed on the constraint: `kategori_namaKategori_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.kategori.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_model.ts:16:51\\n' +\n        '\\n' +\n        '  13 \\n' +\n        '  14 export async function add_category(data: kategori): Promise<ResultModel<kategori | null> | { data: string }>{\\n' +\n        '  15     try {\\n' +\n        '→ 16         const addCategory = await prisma.kategori.create(\\n' +\n        'Unique constraint failed on the constraint: `kategori_namaKategori_key`',\n      context: {\n        code: 'P2002',\n        meta: { modelName: 'kategori', target: 'kategori_namaKategori_key' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-16 20:40:26"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading '0')\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:15:68)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: \"TypeError: Cannot read properties of null (reading '0')\\n\" +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:15:68)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: \"Cannot read properties of null (reading '0')\"\n}","service":"user-service","timestamp":"2024-09-16 20:40:42"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading '0')\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:15:68)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: \"TypeError: Cannot read properties of null (reading '0')\\n\" +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:15:68)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: \"Cannot read properties of null (reading '0')\"\n}","service":"user-service","timestamp":"2024-09-16 20:40:43"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading '0')\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:15:68)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: \"TypeError: Cannot read properties of null (reading '0')\\n\" +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:15:68)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: \"Cannot read properties of null (reading '0')\"\n}","service":"user-service","timestamp":"2024-09-16 20:40:44"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading '0')\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:15:68)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: \"TypeError: Cannot read properties of null (reading '0')\\n\" +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:15:68)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: \"Cannot read properties of null (reading '0')\"\n}","service":"user-service","timestamp":"2024-09-16 20:41:02"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading '0')\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:15:68)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: \"TypeError: Cannot read properties of null (reading '0')\\n\" +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:15:68)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: \"Cannot read properties of null (reading '0')\"\n}","service":"user-service","timestamp":"2024-09-16 20:41:56"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading '0')\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:15:68)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: \"TypeError: Cannot read properties of null (reading '0')\\n\" +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:15:68)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: \"Cannot read properties of null (reading '0')\"\n}","service":"user-service","timestamp":"2024-09-16 20:41:57"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading '0')\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:15:68)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: \"TypeError: Cannot read properties of null (reading '0')\\n\" +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:15:68)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: \"Cannot read properties of null (reading '0')\"\n}","service":"user-service","timestamp":"2024-09-16 20:41:58"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading '0')\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:15:68)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: \"TypeError: Cannot read properties of null (reading '0')\\n\" +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:15:68)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: \"Cannot read properties of null (reading '0')\"\n}","service":"user-service","timestamp":"2024-09-16 20:42:16"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading '0')\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:15:68)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: \"TypeError: Cannot read properties of null (reading '0')\\n\" +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:15:68)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: \"Cannot read properties of null (reading '0')\"\n}","service":"user-service","timestamp":"2024-09-16 20:42:17"}
{"level":"error","message":"UnknownError: 'Starting Number Harus 6 digit'","service":"user-service","timestamp":"2024-09-16 20:44:12"}
{"level":"error","message":"UnknownError: Error: Starting Number Harus 6 digit\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:19:19)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: 'Error: Starting Number Harus 6 digit\\n' +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:19:19)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: 'Starting Number Harus 6 digit'\n}","service":"user-service","timestamp":"2024-09-16 20:44:26"}
{"level":"error","message":"UnknownError: Error: Starting Number Harus 6 digit\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:19:19)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: 'Error: Starting Number Harus 6 digit\\n' +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:19:19)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: 'Starting Number Harus 6 digit'\n}","service":"user-service","timestamp":"2024-09-16 20:44:27"}
{"level":"error","message":"UnknownError: Error: Starting Number Harus 6 digit\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:19:19)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: 'Error: Starting Number Harus 6 digit\\n' +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:19:19)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: 'Starting Number Harus 6 digit'\n}","service":"user-service","timestamp":"2024-09-16 20:45:20"}
{"level":"error","message":"UnknownError: Error: Starting Number Harus 6 digit\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:19:19)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: 'Error: Starting Number Harus 6 digit\\n' +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:19:19)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: 'Starting Number Harus 6 digit'\n}","service":"user-service","timestamp":"2024-09-16 20:45:22"}
{"level":"error","message":"UnknownError: Error: Starting Number Harus 6 digit\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:19:19)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: 'Error: Starting Number Harus 6 digit\\n' +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:19:19)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: 'Starting Number Harus 6 digit'\n}","service":"user-service","timestamp":"2024-09-16 20:45:23"}
{"level":"error","message":"UnknownError: Error: Starting Number Harus 6 digit\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:19:19)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: 'Error: Starting Number Harus 6 digit\\n' +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:19:19)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: 'Starting Number Harus 6 digit'\n}","service":"user-service","timestamp":"2024-09-16 20:45:23"}
{"level":"error","message":"UnknownError: Error\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:19:19)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: 'Error\\n' +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:19:19)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)'\n}","service":"user-service","timestamp":"2024-09-16 20:46:02"}
{"level":"error","message":"UnknownError: Error\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:19:19)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: 'Error\\n' +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:19:19)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)'\n}","service":"user-service","timestamp":"2024-09-16 20:46:04"}
{"level":"error","message":"UnknownError: Error\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:19:19)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: 'Error\\n' +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:19:19)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)'\n}","service":"user-service","timestamp":"2024-09-16 20:46:42"}
{"level":"error","message":"UnknownError: Error\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:19:19)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: 'Error\\n' +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:19:19)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)'\n}","service":"user-service","timestamp":"2024-09-16 20:46:43"}
{"level":"error","message":"UnknownError: Error: Starting Number Harus 6 digit\n    at add_category (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product.ts:19:19)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: 'Error: Starting Number Harus 6 digit\\n' +\n    '    at add_category (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product.ts:19:19)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: 'Starting Number Harus 6 digit'\n}","service":"user-service","timestamp":"2024-09-16 20:53:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_model.ts:45:48\\n' +\n    '\\n' +\n    '  42 //ANCHOR - Tambah Produk\\n' +\n    '  43 export async function add_product(data: produk): Promise<ResultModel<kategori | null> | { data: string }>{\\n' +\n    '  44     try {\\n' +\n    '→ 45         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_model.ts:45:48\\n' +\n        '\\n' +\n        '  42 //ANCHOR - Tambah Produk\\n' +\n        '  43 export async function add_product(data: produk): Promise<ResultModel<kategori | null> | { data: string }>{\\n' +\n        '  44     try {\\n' +\n        '→ 45         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-16 21:20:30"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_model.ts:45:48\\n' +\n    '\\n' +\n    '  42 //ANCHOR - Tambah Produk\\n' +\n    '  43 export async function add_product(data: produk): Promise<ResultModel<kategori | null> | { data: string }>{\\n' +\n    '  44     try {\\n' +\n    '→ 45         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_model.ts:45:48\\n' +\n        '\\n' +\n        '  42 //ANCHOR - Tambah Produk\\n' +\n        '  43 export async function add_product(data: produk): Promise<ResultModel<kategori | null> | { data: string }>{\\n' +\n        '  44     try {\\n' +\n        '→ 45         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-16 21:20:31"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_model.ts:45:48\\n' +\n    '\\n' +\n    '  42 //ANCHOR - Tambah Produk\\n' +\n    '  43 export async function add_product(data: produk): Promise<ResultModel<kategori | null> | { data: string }>{\\n' +\n    '  44     try {\\n' +\n    '→ 45         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_model.ts:45:48\\n' +\n        '\\n' +\n        '  42 //ANCHOR - Tambah Produk\\n' +\n        '  43 export async function add_product(data: produk): Promise<ResultModel<kategori | null> | { data: string }>{\\n' +\n        '  44     try {\\n' +\n        '→ 45         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-16 21:20:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.permintaan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:19:54\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Kategori\\n' +\n    '  17 export async function add_request(data: RequestRB): Promise<ResultModel<RequestRB | null>>{\\n' +\n    '  18     try {\\n' +\n    '→ 19         const addRequestRB = await prisma.permintaan.create({\\n' +\n    '               data: {\\n' +\n    '                 idCreated: 4,\\n' +\n    '                 timeCreated: \"Mon Sep 16 2024\"\\n' +\n    '                              ~~~~~~~~~~~~~~~~~\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idCreated: true,\\n' +\n    '                 timeCreated: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Invalid value for argument `timeCreated`: input contains invalid characters. Expected ISO-8601 DateTime.',\n  context: '\\n' +\n    'Invalid `prisma.permintaan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:19:54\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Kategori\\n' +\n    '  17 export async function add_request(data: RequestRB): Promise<ResultModel<RequestRB | null>>{\\n' +\n    '  18     try {\\n' +\n    '→ 19         const addRequestRB = await prisma.permintaan.create({\\n' +\n    '               data: {\\n' +\n    '                 idCreated: 4,\\n' +\n    '                 timeCreated: \"Mon Sep 16 2024\"\\n' +\n    '                              ~~~~~~~~~~~~~~~~~\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idCreated: true,\\n' +\n    '                 timeCreated: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Invalid value for argument `timeCreated`: input contains invalid characters. Expected ISO-8601 DateTime.'\n}","service":"user-service","timestamp":"2024-09-16 21:50:55"}
{"level":"error","message":"UnknownError: RangeError: Invalid time value\n    at Date.toISOString (<anonymous>)\n    at add_request (D:\\Project\\node\\MBR\\backend\\controller\\users\\users_request.ts:17:73)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at D:\\Project\\node\\MBR\\backend\\middleware\\authentication.ts:109:24 {\n  [stack]: 'RangeError: Invalid time value\\n' +\n    '    at Date.toISOString (<anonymous>)\\n' +\n    '    at add_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\users\\\\users_request.ts:17:73)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:280:10)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authentication.ts:109:24',\n  [message]: 'Invalid time value'\n}","service":"user-service","timestamp":"2024-09-16 21:59:22"}
{"level":"error","message":"UnknownError: RangeError: Invalid time value\n    at Date.toISOString (<anonymous>)\n    at add_request (D:\\Project\\node\\MBR\\backend\\controller\\users\\users_request.ts:17:73)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at D:\\Project\\node\\MBR\\backend\\middleware\\authentication.ts:109:24 {\n  [stack]: 'RangeError: Invalid time value\\n' +\n    '    at Date.toISOString (<anonymous>)\\n' +\n    '    at add_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\users\\\\users_request.ts:17:73)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:280:10)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authentication.ts:109:24',\n  [message]: 'Invalid time value'\n}","service":"user-service","timestamp":"2024-09-16 21:59:24"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.permintaan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:19:54\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Kategori\\n' +\n    '  17 export async function add_request(data: RequestRB): Promise<ResultModel<RequestRB | null>>{\\n' +\n    '  18     try {\\n' +\n    '→ 19         const addRequestRB = await prisma.permintaan.create({\\n' +\n    '               data: {\\n' +\n    '                 idCreated: 4,\\n' +\n    '                 timeCreated: \"9/16/2024, 10:06:18 PM\"\\n' +\n    '                              ~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idCreated: true,\\n' +\n    '                 timeCreated: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Invalid value for argument `timeCreated`: input contains invalid characters. Expected ISO-8601 DateTime.',\n  context: '\\n' +\n    'Invalid `prisma.permintaan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:19:54\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Kategori\\n' +\n    '  17 export async function add_request(data: RequestRB): Promise<ResultModel<RequestRB | null>>{\\n' +\n    '  18     try {\\n' +\n    '→ 19         const addRequestRB = await prisma.permintaan.create({\\n' +\n    '               data: {\\n' +\n    '                 idCreated: 4,\\n' +\n    '                 timeCreated: \"9/16/2024, 10:06:18 PM\"\\n' +\n    '                              ~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idCreated: true,\\n' +\n    '                 timeCreated: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Invalid value for argument `timeCreated`: input contains invalid characters. Expected ISO-8601 DateTime.'\n}","service":"user-service","timestamp":"2024-09-16 22:06:18"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.permintaan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:19:54\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Kategori\\n' +\n    '  17 export async function add_request(data: RequestRB): Promise<ResultModel<RequestRB | null>>{\\n' +\n    '  18     try {\\n' +\n    '→ 19         const addRequestRB = await prisma.permintaan.create({\\n' +\n    '               data: {\\n' +\n    '                 idCreated: 4,\\n' +\n    '                 timeCreated: \"9/16/2024, 10:06:20 PM\"\\n' +\n    '                              ~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idCreated: true,\\n' +\n    '                 timeCreated: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Invalid value for argument `timeCreated`: input contains invalid characters. Expected ISO-8601 DateTime.',\n  context: '\\n' +\n    'Invalid `prisma.permintaan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:19:54\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Kategori\\n' +\n    '  17 export async function add_request(data: RequestRB): Promise<ResultModel<RequestRB | null>>{\\n' +\n    '  18     try {\\n' +\n    '→ 19         const addRequestRB = await prisma.permintaan.create({\\n' +\n    '               data: {\\n' +\n    '                 idCreated: 4,\\n' +\n    '                 timeCreated: \"9/16/2024, 10:06:20 PM\"\\n' +\n    '                              ~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idCreated: true,\\n' +\n    '                 timeCreated: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Invalid value for argument `timeCreated`: input contains invalid characters. Expected ISO-8601 DateTime.'\n}","service":"user-service","timestamp":"2024-09-16 22:06:20"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.permintaan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:19:54\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Kategori\\n' +\n    '  17 export async function add_request(data: RequestRB): Promise<ResultModel<RequestRB | null>>{\\n' +\n    '  18     try {\\n' +\n    '→ 19         const addRequestRB = await prisma.permintaan.create({\\n' +\n    '               data: {\\n' +\n    '                 idCreated: 4,\\n' +\n    '                 timeCreated: \"2024-09-16 22:20:56\"\\n' +\n    '                              ~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idCreated: true,\\n' +\n    '                 timeCreated: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Invalid value for argument `timeCreated`: input contains invalid characters. Expected ISO-8601 DateTime.',\n  context: '\\n' +\n    'Invalid `prisma.permintaan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:19:54\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Kategori\\n' +\n    '  17 export async function add_request(data: RequestRB): Promise<ResultModel<RequestRB | null>>{\\n' +\n    '  18     try {\\n' +\n    '→ 19         const addRequestRB = await prisma.permintaan.create({\\n' +\n    '               data: {\\n' +\n    '                 idCreated: 4,\\n' +\n    '                 timeCreated: \"2024-09-16 22:20:56\"\\n' +\n    '                              ~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idCreated: true,\\n' +\n    '                 timeCreated: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Invalid value for argument `timeCreated`: input contains invalid characters. Expected ISO-8601 DateTime.'\n}","service":"user-service","timestamp":"2024-09-16 22:20:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.permintaan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:19:54\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Kategori\\n' +\n    '  17 export async function add_request(data: RequestRB): Promise<ResultModel<RequestRB | null>>{\\n' +\n    '  18     try {\\n' +\n    '→ 19         const addRequestRB = await prisma.permintaan.create({\\n' +\n    '               data: {\\n' +\n    '                 idCreated: 4,\\n' +\n    '                 timeCreated: \"2024-09-16 22:20:58\"\\n' +\n    '                              ~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idCreated: true,\\n' +\n    '                 timeCreated: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Invalid value for argument `timeCreated`: input contains invalid characters. Expected ISO-8601 DateTime.',\n  context: '\\n' +\n    'Invalid `prisma.permintaan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:19:54\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Kategori\\n' +\n    '  17 export async function add_request(data: RequestRB): Promise<ResultModel<RequestRB | null>>{\\n' +\n    '  18     try {\\n' +\n    '→ 19         const addRequestRB = await prisma.permintaan.create({\\n' +\n    '               data: {\\n' +\n    '                 idCreated: 4,\\n' +\n    '                 timeCreated: \"2024-09-16 22:20:58\"\\n' +\n    '                              ~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idCreated: true,\\n' +\n    '                 timeCreated: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Invalid value for argument `timeCreated`: input contains invalid characters. Expected ISO-8601 DateTime.'\n}","service":"user-service","timestamp":"2024-09-16 22:20:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.permintaan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:19:54\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Kategori\\n' +\n    '  17 export async function add_request(data: RequestRB): Promise<ResultModel<RequestRB | null>>{\\n' +\n    '  18     try {\\n' +\n    '→ 19         const addRequestRB = await prisma.permintaan.create({\\n' +\n    '               data: {\\n' +\n    '                 idCreated: 4,\\n' +\n    '                 timeCreated: \"2024-09-16 22:21:29\"\\n' +\n    '                              ~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idCreated: true,\\n' +\n    '                 timeCreated: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Invalid value for argument `timeCreated`: input contains invalid characters. Expected ISO-8601 DateTime.',\n  context: '\\n' +\n    'Invalid `prisma.permintaan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:19:54\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Kategori\\n' +\n    '  17 export async function add_request(data: RequestRB): Promise<ResultModel<RequestRB | null>>{\\n' +\n    '  18     try {\\n' +\n    '→ 19         const addRequestRB = await prisma.permintaan.create({\\n' +\n    '               data: {\\n' +\n    '                 idCreated: 4,\\n' +\n    '                 timeCreated: \"2024-09-16 22:21:29\"\\n' +\n    '                              ~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idCreated: true,\\n' +\n    '                 timeCreated: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Invalid value for argument `timeCreated`: input contains invalid characters. Expected ISO-8601 DateTime.'\n}","service":"user-service","timestamp":"2024-09-16 22:21:29"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.permintaan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:19:54\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Kategori\\n' +\n    '  17 export async function add_request(data: RequestRB): Promise<ResultModel<RequestRB | null>>{\\n' +\n    '  18     try {\\n' +\n    '→ 19         const addRequestRB = await prisma.permintaan.create({\\n' +\n    '               data: {\\n' +\n    '                 idCreated: 4,\\n' +\n    '                 timeCreated: \"2024-09-16 22:22:26\"\\n' +\n    '                              ~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idCreated: true,\\n' +\n    '                 timeCreated: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Invalid value for argument `timeCreated`: input contains invalid characters. Expected ISO-8601 DateTime.',\n  context: '\\n' +\n    'Invalid `prisma.permintaan.create()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:19:54\\n' +\n    '\\n' +\n    '  16 //ANCHOR - Tambah Kategori\\n' +\n    '  17 export async function add_request(data: RequestRB): Promise<ResultModel<RequestRB | null>>{\\n' +\n    '  18     try {\\n' +\n    '→ 19         const addRequestRB = await prisma.permintaan.create({\\n' +\n    '               data: {\\n' +\n    '                 idCreated: 4,\\n' +\n    '                 timeCreated: \"2024-09-16 22:22:26\"\\n' +\n    '                              ~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idCreated: true,\\n' +\n    '                 timeCreated: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Invalid value for argument `timeCreated`: input contains invalid characters. Expected ISO-8601 DateTime.'\n}","service":"user-service","timestamp":"2024-09-16 22:22:26"}
{"level":"error","message":"UnknownError: TypeError: postData.data?.map is not a function\n    at add_request (D:\\Project\\node\\MBR\\backend\\controller\\users\\users_request.ts:31:45)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at D:\\Project\\node\\MBR\\backend\\middleware\\authentication.ts:109:24\n    at D:\\Project\\node\\MBR\\node_modules\\jsonwebtoken\\verify.js:261:12 {\n  [stack]: 'TypeError: postData.data?.map is not a function\\n' +\n    '    at add_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\users\\\\users_request.ts:31:45)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:280:10)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authentication.ts:109:24\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\jsonwebtoken\\\\verify.js:261:12',\n  [message]: 'postData.data?.map is not a function'\n}","service":"user-service","timestamp":"2024-09-16 23:03:46"}
{"level":"error","message":"UnknownError: SyntaxError: \"[object Object]\" is not valid JSON\n    at JSON.parse (<anonymous>)\n    at add_request (D:\\Project\\node\\MBR\\backend\\controller\\users\\users_request.ts:28:24)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at D:\\Project\\node\\MBR\\backend\\middleware\\authentication.ts:109:24 {\n  [stack]: 'SyntaxError: \"[object Object]\" is not valid JSON\\n' +\n    '    at JSON.parse (<anonymous>)\\n' +\n    '    at add_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\users\\\\users_request.ts:28:24)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:280:10)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authentication.ts:109:24',\n  [message]: '\"[object Object]\" is not valid JSON'\n}","service":"user-service","timestamp":"2024-09-16 23:04:16"}
{"level":"error","message":"UnknownError: SyntaxError: \"[object Object]\" is not valid JSON\n    at JSON.parse (<anonymous>)\n    at add_request (D:\\Project\\node\\MBR\\backend\\controller\\users\\users_request.ts:28:24)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at D:\\Project\\node\\MBR\\backend\\middleware\\authentication.ts:109:24 {\n  [stack]: 'SyntaxError: \"[object Object]\" is not valid JSON\\n' +\n    '    at JSON.parse (<anonymous>)\\n' +\n    '    at add_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\users\\\\users_request.ts:28:24)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:280:10)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authentication.ts:109:24',\n  [message]: '\"[object Object]\" is not valid JSON'\n}","service":"user-service","timestamp":"2024-09-16 23:04:18"}
{"level":"error","message":"UnknownError: TypeError: postData.data.map is not a function\n    at add_request (D:\\Project\\node\\MBR\\backend\\controller\\users\\users_request.ts:31:45)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at D:\\Project\\node\\MBR\\backend\\middleware\\authentication.ts:109:24\n    at D:\\Project\\node\\MBR\\node_modules\\jsonwebtoken\\verify.js:261:12 {\n  [stack]: 'TypeError: postData.data.map is not a function\\n' +\n    '    at add_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\users\\\\users_request.ts:31:45)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:280:10)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authentication.ts:109:24\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\jsonwebtoken\\\\verify.js:261:12',\n  [message]: 'postData.data.map is not a function'\n}","service":"user-service","timestamp":"2024-09-16 23:05:56"}
{"level":"error","message":"UnknownError: TypeError: postData.data.map is not a function\n    at add_request (D:\\Project\\node\\MBR\\backend\\controller\\users\\users_request.ts:31:45)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at D:\\Project\\node\\MBR\\backend\\middleware\\authentication.ts:109:24\n    at D:\\Project\\node\\MBR\\node_modules\\jsonwebtoken\\verify.js:261:12 {\n  [stack]: 'TypeError: postData.data.map is not a function\\n' +\n    '    at add_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\users\\\\users_request.ts:31:45)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:280:10)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authentication.ts:109:24\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\jsonwebtoken\\\\verify.js:261:12',\n  [message]: 'postData.data.map is not a function'\n}","service":"user-service","timestamp":"2024-09-16 23:05:57"}
{"level":"error","message":"UnknownError: TypeError: postData.data.map is not a function\n    at add_request (D:\\Project\\node\\MBR\\backend\\controller\\users\\users_request.ts:31:45)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at D:\\Project\\node\\MBR\\backend\\middleware\\authentication.ts:109:24\n    at D:\\Project\\node\\MBR\\node_modules\\jsonwebtoken\\verify.js:261:12 {\n  [stack]: 'TypeError: postData.data.map is not a function\\n' +\n    '    at add_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\users\\\\users_request.ts:31:45)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:280:10)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authentication.ts:109:24\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\jsonwebtoken\\\\verify.js:261:12',\n  [message]: 'postData.data.map is not a function'\n}","service":"user-service","timestamp":"2024-09-16 23:07:35"}
{"level":"error","message":"UnknownError: TypeError: postData.data.map is not a function\n    at add_request (D:\\Project\\node\\MBR\\backend\\controller\\users\\users_request.ts:31:45)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at D:\\Project\\node\\MBR\\backend\\middleware\\authentication.ts:109:24\n    at D:\\Project\\node\\MBR\\node_modules\\jsonwebtoken\\verify.js:261:12 {\n  [stack]: 'TypeError: postData.data.map is not a function\\n' +\n    '    at add_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\users\\\\users_request.ts:31:45)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:280:10)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authentication.ts:109:24\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\jsonwebtoken\\\\verify.js:261:12',\n  [message]: 'postData.data.map is not a function'\n}","service":"user-service","timestamp":"2024-09-16 23:07:37"}
{"level":"error","message":"UnknownError: TypeError: item.mbr.map is not a function\n    at D:\\Project\\node\\MBR\\backend\\controller\\users\\users_request.ts:32:22\n    at Array.map (<anonymous>)\n    at add_request (D:\\Project\\node\\MBR\\backend\\controller\\users\\users_request.ts:31:45)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:280:10) {\n  [stack]: 'TypeError: item.mbr.map is not a function\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\users\\\\users_request.ts:32:22\\n' +\n    '    at Array.map (<anonymous>)\\n' +\n    '    at add_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\users\\\\users_request.ts:31:45)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:280:10)',\n  [message]: 'item.mbr.map is not a function'\n}","service":"user-service","timestamp":"2024-09-16 23:08:37"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.detailpermintaanmbr.createMany()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:69:73\\n' +\n    '\\n' +\n    '  66 })\\n' +\n    '  67 \\n' +\n    '  68 \\n' +\n    '→ 69 const createDetailPermintaan = await tx.detailpermintaanmbr.createMany(\\n' +\n    'Foreign key constraint failed on the field: `idProduk`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.detailpermintaanmbr.createMany()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:69:73\\n' +\n        '\\n' +\n        '  66 })\\n' +\n        '  67 \\n' +\n        '  68 \\n' +\n        '→ 69 const createDetailPermintaan = await tx.detailpermintaanmbr.createMany(\\n' +\n        'Foreign key constraint failed on the field: `idProduk`',\n      context: {\n        code: 'P2003',\n        meta: { modelName: 'detailpermintaanmbr', field_name: 'idProduk' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 00:36:25"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.detailpermintaanmbr.createMany()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:69:73\\n' +\n    '\\n' +\n    '  66 })\\n' +\n    '  67 \\n' +\n    '  68 \\n' +\n    '→ 69 const createDetailPermintaan = await tx.detailpermintaanmbr.createMany(\\n' +\n    'Foreign key constraint failed on the field: `idProduk`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.detailpermintaanmbr.createMany()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_request_model.ts:69:73\\n' +\n        '\\n' +\n        '  66 })\\n' +\n        '  67 \\n' +\n        '  68 \\n' +\n        '→ 69 const createDetailPermintaan = await tx.detailpermintaanmbr.createMany(\\n' +\n        'Foreign key constraint failed on the field: `idProduk`',\n      context: {\n        code: 'P2003',\n        meta: { modelName: 'detailpermintaanmbr', field_name: 'idProduk' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 00:36:44"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.permintaan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:76:58\\n' +\n    '\\n' +\n    '  73 //ANCHOR - Update Permintaan RB\\n' +\n    '  74 export async function update_permintaan(data: { id: string, action: string, timeConfirmed: string, idConfirmed: string }): Promise<ResultModel<Permintaan | null> | { data: string }>{\\n' +\n    '  75     try {\\n' +\n    '→ 76         const updatePermintaan = await prisma.permintaan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.permintaan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:76:58\\n' +\n        '\\n' +\n        '  73 //ANCHOR - Update Permintaan RB\\n' +\n        '  74 export async function update_permintaan(data: { id: string, action: string, timeConfirmed: string, idConfirmed: string }): Promise<ResultModel<Permintaan | null> | { data: string }>{\\n' +\n        '  75     try {\\n' +\n        '→ 76         const updatePermintaan = await prisma.permintaan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'permintaan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 07:17:12"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Ditemukan',\n  context: [\n    { message: 'User Tidak Ditemukan', context: { code: 'L001' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 07:19:09"}
{"level":"error","message":"CustomError: {\n  message: 'Password Salah',\n  context: [\n    { message: 'Password Salah', context: { code: 'L002' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 07:21:37"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.detailpermintaanmbr.createMany()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_rb_model.ts:69:73\\n' +\n    '\\n' +\n    '  66 })\\n' +\n    '  67 \\n' +\n    '  68 \\n' +\n    '→ 69 const createDetailPermintaan = await tx.detailpermintaanmbr.createMany(\\n' +\n    'Null constraint violation on the fields: (`jumlah`)',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.detailpermintaanmbr.createMany()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_rb_model.ts:69:73\\n' +\n        '\\n' +\n        '  66 })\\n' +\n        '  67 \\n' +\n        '  68 \\n' +\n        '→ 69 const createDetailPermintaan = await tx.detailpermintaanmbr.createMany(\\n' +\n        'Null constraint violation on the fields: (`jumlah`)',\n      context: {\n        code: 'P2011',\n        meta: { modelName: 'detailpermintaanmbr', constraint: [Array] }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 07:38:38"}
{"level":"error","message":"UnknownError: {\n  error: Error: Data sudah ada\n      at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:145:27\n      at async Promise.all (index 0)\n      at async D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:192:13\n      at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n      at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n      at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n    [stack]: 'Error: Data sudah ada\\n' +\n      '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:145:27\\n' +\n      '    at async Promise.all (index 0)\\n' +\n      '    at async D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:192:13\\n' +\n      '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n      '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n      '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n    [message]: 'Data sudah ada'\n  }\n}","service":"user-service","timestamp":"2024-09-17 10:52:39"}
{"level":"error","message":"UnknownError: Error: Data sudah ada\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:145:27\n    at async Promise.all (index 0)\n    at async D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:192:13\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Data sudah ada\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:145:27\\n' +\n    '    at async Promise.all (index 0)\\n' +\n    '    at async D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:192:13\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Data sudah ada'\n}","service":"user-service","timestamp":"2024-09-17 10:53:05"}
{"level":"error","message":"UnknownError: Error: Data sudah ada\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:145:27\n    at async Promise.all (index 0)\n    at async D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:192:13\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Data sudah ada\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:145:27\\n' +\n    '    at async Promise.all (index 0)\\n' +\n    '    at async D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:192:13\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Data sudah ada'\n}","service":"user-service","timestamp":"2024-09-17 10:53:30"}
{"level":"error","message":"UnknownError: Error: Data sudah ada\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:145:27\n    at async Promise.all (index 0)\n    at async D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:192:13\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Data sudah ada\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:145:27\\n' +\n    '    at async Promise.all (index 0)\\n' +\n    '    at async D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:192:13\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Data sudah ada'\n}","service":"user-service","timestamp":"2024-09-17 10:53:33"}
{"level":"error","message":"UnknownError: Error: Data sudah ada\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:145:27\n    at async Promise.all (index 0)\n    at async D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:192:13\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Data sudah ada\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:145:27\\n' +\n    '    at async Promise.all (index 0)\\n' +\n    '    at async D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:192:13\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Data sudah ada'\n}","service":"user-service","timestamp":"2024-09-17 10:54:18"}
{"level":"error","message":"UnknownError: Error: Data sudah ada\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:146:27\n    at async Promise.all (index 0)\n    at async D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:193:13\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Data sudah ada\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:146:27\\n' +\n    '    at async Promise.all (index 0)\\n' +\n    '    at async D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:193:13\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Data sudah ada'\n}","service":"user-service","timestamp":"2024-09-17 10:54:51"}
{"level":"error","message":"UnknownError: Error: Data sudah ada\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:146:27\n    at async Promise.all (index 0)\n    at async D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:193:13\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Data sudah ada\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:146:27\\n' +\n    '    at async Promise.all (index 0)\\n' +\n    '    at async D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:193:13\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Data sudah ada'\n}","service":"user-service","timestamp":"2024-09-17 10:55:19"}
{"level":"error","message":"UnknownError: Error: Data sudah ada\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:146:27\n    at async Promise.all (index 0)\n    at async D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:193:13\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Data sudah ada\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:146:27\\n' +\n    '    at async Promise.all (index 0)\\n' +\n    '    at async D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:193:13\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Data sudah ada'\n}","service":"user-service","timestamp":"2024-09-17 10:58:13"}
{"level":"error","message":"UnknownError: Error: Data sudah ada\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:146:27\n    at async Promise.all (index 0)\n    at async D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:193:13\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Data sudah ada\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:146:27\\n' +\n    '    at async Promise.all (index 0)\\n' +\n    '    at async D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:193:13\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Data sudah ada'\n}","service":"user-service","timestamp":"2024-09-17 10:58:14"}
{"level":"error","message":"UnknownError: Error: Data sudah ada\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:146:27\n    at async Promise.all (index 0)\n    at async D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:191:13\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Data sudah ada\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:146:27\\n' +\n    '    at async Promise.all (index 0)\\n' +\n    '    at async D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:191:13\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Data sudah ada'\n}","service":"user-service","timestamp":"2024-09-17 11:01:35"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:98:23\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:98:23\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-17 11:04:20"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:98:23\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:98:23\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-17 11:04:22"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:98:23\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:98:23\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-17 11:04:23"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:98:23\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:98:23\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-17 11:04:36"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.detailpermintaanmbr.createMany()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_rb_model.ts:71:73\\n' +\n    '\\n' +\n    '  68 })\\n' +\n    '  69 \\n' +\n    '  70 \\n' +\n    '→ 71 const createDetailPermintaan = await tx.detailpermintaanmbr.createMany({\\n' +\n    '       data: [\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 36,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00053-03-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 10\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 36,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00054-03-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 12\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 36,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00055-03-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 13\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 36,\\n' +\n    '           idProduk: 7,\\n' +\n    '           nomorMBR: \"CF-00101-04-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 30\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 36,\\n' +\n    '           idProduk: 7,\\n' +\n    '           nomorMBR: \"CF-00150-04-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 30\\n' +\n    '         }\\n' +\n    '       ]\\n' +\n    '     })\\n' +\n    '\\n' +\n    'Unknown argument `tipeMbr`. Did you mean `tipeMBR`? Available options are marked with ?.',\n  context: '\\n' +\n    'Invalid `tx.detailpermintaanmbr.createMany()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_rb_model.ts:71:73\\n' +\n    '\\n' +\n    '  68 })\\n' +\n    '  69 \\n' +\n    '  70 \\n' +\n    '→ 71 const createDetailPermintaan = await tx.detailpermintaanmbr.createMany({\\n' +\n    '       data: [\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 36,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00053-03-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 10\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 36,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00054-03-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 12\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 36,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00055-03-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 13\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 36,\\n' +\n    '           idProduk: 7,\\n' +\n    '           nomorMBR: \"CF-00101-04-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 30\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 36,\\n' +\n    '           idProduk: 7,\\n' +\n    '           nomorMBR: \"CF-00150-04-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 30\\n' +\n    '         }\\n' +\n    '       ]\\n' +\n    '     })\\n' +\n    '\\n' +\n    'Unknown argument `tipeMbr`. Did you mean `tipeMBR`? Available options are marked with ?.'\n}","service":"user-service","timestamp":"2024-09-17 11:13:18"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.detailpermintaanmbr.createMany()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_rb_model.ts:71:73\\n' +\n    '\\n' +\n    '  68 })\\n' +\n    '  69 \\n' +\n    '  70 \\n' +\n    '→ 71 const createDetailPermintaan = await tx.detailpermintaanmbr.createMany({\\n' +\n    '       data: [\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 37,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00053-03-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 10\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 37,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00054-03-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 12\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 37,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00055-03-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 13\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 37,\\n' +\n    '           idProduk: 7,\\n' +\n    '           nomorMBR: \"CF-00101-04-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 30\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 37,\\n' +\n    '           idProduk: 7,\\n' +\n    '           nomorMBR: \"CF-00150-04-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 30\\n' +\n    '         }\\n' +\n    '       ]\\n' +\n    '     })\\n' +\n    '\\n' +\n    'Unknown argument `tipeMbr`. Did you mean `tipeMBR`? Available options are marked with ?.',\n  context: '\\n' +\n    'Invalid `tx.detailpermintaanmbr.createMany()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_rb_model.ts:71:73\\n' +\n    '\\n' +\n    '  68 })\\n' +\n    '  69 \\n' +\n    '  70 \\n' +\n    '→ 71 const createDetailPermintaan = await tx.detailpermintaanmbr.createMany({\\n' +\n    '       data: [\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 37,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00053-03-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 10\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 37,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00054-03-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 12\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 37,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00055-03-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 13\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 37,\\n' +\n    '           idProduk: 7,\\n' +\n    '           nomorMBR: \"CF-00101-04-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 30\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 37,\\n' +\n    '           idProduk: 7,\\n' +\n    '           nomorMBR: \"CF-00150-04-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 30\\n' +\n    '         }\\n' +\n    '       ]\\n' +\n    '     })\\n' +\n    '\\n' +\n    'Unknown argument `tipeMbr`. Did you mean `tipeMBR`? Available options are marked with ?.'\n}","service":"user-service","timestamp":"2024-09-17 11:13:21"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.detailpermintaanmbr.createMany()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_rb_model.ts:71:73\\n' +\n    '\\n' +\n    '  68 })\\n' +\n    '  69 \\n' +\n    '  70 \\n' +\n    '→ 71 const createDetailPermintaan = await tx.detailpermintaanmbr.createMany({\\n' +\n    '       data: [\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 38,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00053-03-NL\",\\n' +\n    '           tipeMbr: \"PO\",\\n' +\n    '           jumlah: 10\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 38,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00054-03-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 12\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 38,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00055-03-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 13\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 38,\\n' +\n    '           idProduk: 7,\\n' +\n    '           nomorMBR: \"CF-00101-04-NL\",\\n' +\n    '           tipeMbr: \"PO\",\\n' +\n    '           jumlah: 30\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 38,\\n' +\n    '           idProduk: 7,\\n' +\n    '           nomorMBR: \"CF-00150-04-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 30\\n' +\n    '         }\\n' +\n    '       ]\\n' +\n    '     })\\n' +\n    '\\n' +\n    'Unknown argument `tipeMbr`. Did you mean `tipeMBR`? Available options are marked with ?.',\n  context: '\\n' +\n    'Invalid `tx.detailpermintaanmbr.createMany()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\users\\\\users_rb_model.ts:71:73\\n' +\n    '\\n' +\n    '  68 })\\n' +\n    '  69 \\n' +\n    '  70 \\n' +\n    '→ 71 const createDetailPermintaan = await tx.detailpermintaanmbr.createMany({\\n' +\n    '       data: [\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 38,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00053-03-NL\",\\n' +\n    '           tipeMbr: \"PO\",\\n' +\n    '           jumlah: 10\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 38,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00054-03-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 12\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 38,\\n' +\n    '           idProduk: 8,\\n' +\n    '           nomorMBR: \"CD-00055-03-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 13\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 38,\\n' +\n    '           idProduk: 7,\\n' +\n    '           nomorMBR: \"CF-00101-04-NL\",\\n' +\n    '           tipeMbr: \"PO\",\\n' +\n    '           jumlah: 30\\n' +\n    '         },\\n' +\n    '         {\\n' +\n    '           idPermintaanMbr: 38,\\n' +\n    '           idProduk: 7,\\n' +\n    '           nomorMBR: \"CF-00150-04-NL\",\\n' +\n    '           tipeMbr: \"PS\",\\n' +\n    '           jumlah: 30\\n' +\n    '         }\\n' +\n    '       ]\\n' +\n    '     })\\n' +\n    '\\n' +\n    'Unknown argument `tipeMbr`. Did you mean `tipeMBR`? Available options are marked with ?.'\n}","service":"user-service","timestamp":"2024-09-17 11:13:41"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.permintaan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n    '\\n' +\n    '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n    '   99 }\\n' +\n    '  100 \\n' +\n    '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.permintaan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n        '\\n' +\n        '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n        '   99 }\\n' +\n        '  100 \\n' +\n        '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'permintaan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 11:15:11"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.nomormbr.createMany()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:199:54\\n' +\n    '\\n' +\n    '  196     }\\n' +\n    '  197 }\\n' +\n    '  198 \\n' +\n    '→ 199 const addNomorRB = await tx.nomormbr.createMany(\\n' +\n    'Unique constraint failed on the constraint: `nomormbr_nomorUrut_tahun_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.nomormbr.createMany()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:199:54\\n' +\n        '\\n' +\n        '  196     }\\n' +\n        '  197 }\\n' +\n        '  198 \\n' +\n        '→ 199 const addNomorRB = await tx.nomormbr.createMany(\\n' +\n        'Unique constraint failed on the constraint: `nomormbr_nomorUrut_tahun_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'nomormbr',\n          target: 'nomormbr_nomorUrut_tahun_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 11:15:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.nomormbr.createMany()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:199:54\\n' +\n    '\\n' +\n    '  196     }\\n' +\n    '  197 }\\n' +\n    '  198 \\n' +\n    '→ 199 const addNomorRB = await tx.nomormbr.createMany(\\n' +\n    'Unique constraint failed on the constraint: `nomormbr_nomorUrut_tahun_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.nomormbr.createMany()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:199:54\\n' +\n        '\\n' +\n        '  196     }\\n' +\n        '  197 }\\n' +\n        '  198 \\n' +\n        '→ 199 const addNomorRB = await tx.nomormbr.createMany(\\n' +\n        'Unique constraint failed on the constraint: `nomormbr_nomorUrut_tahun_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'nomormbr',\n          target: 'nomormbr_nomorUrut_tahun_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 11:15:50"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:98:23\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:98:23\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-17 11:18:27"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.nomormbr.createMany()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:201:54\\n' +\n    '\\n' +\n    '  198 \\n' +\n    '  199 console.log(data)\\n' +\n    '  200 \\n' +\n    '→ 201 const addNomorRB = await tx.nomormbr.createMany(\\n' +\n    'Unique constraint failed on the constraint: `nomormbr_nomorUrut_tahun_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.nomormbr.createMany()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:201:54\\n' +\n        '\\n' +\n        '  198 \\n' +\n        '  199 console.log(data)\\n' +\n        '  200 \\n' +\n        '→ 201 const addNomorRB = await tx.nomormbr.createMany(\\n' +\n        'Unique constraint failed on the constraint: `nomormbr_nomorUrut_tahun_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'nomormbr',\n          target: 'nomormbr_nomorUrut_tahun_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 11:18:40"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.nomormbr.createMany()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:203:54\\n' +\n    '\\n' +\n    '  200 \\n' +\n    '  201 //console.log(data)\\n' +\n    '  202 \\n' +\n    '→ 203 const addNomorRB = await tx.nomormbr.createMany(\\n' +\n    'Unique constraint failed on the constraint: `nomormbr_nomorUrut_tahun_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.nomormbr.createMany()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:203:54\\n' +\n        '\\n' +\n        '  200 \\n' +\n        '  201 //console.log(data)\\n' +\n        '  202 \\n' +\n        '→ 203 const addNomorRB = await tx.nomormbr.createMany(\\n' +\n        'Unique constraint failed on the constraint: `nomormbr_nomorUrut_tahun_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'nomormbr',\n          target: 'nomormbr_nomorUrut_tahun_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 11:21:00"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:98:23\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:98:23\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-17 11:31:23"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:98:23\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:87:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:98:23\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:87:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-17 11:33:41"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.nomormbr.createMany()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:203:54\\n' +\n    '\\n' +\n    '  200 \\n' +\n    '  201 //console.log(data)\\n' +\n    '  202 \\n' +\n    '→ 203 const addNomorRB = await tx.nomormbr.createMany(\\n' +\n    'Unique constraint failed on the constraint: `nomormbr_nomorUrut_tahun_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.nomormbr.createMany()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:203:54\\n' +\n        '\\n' +\n        '  200 \\n' +\n        '  201 //console.log(data)\\n' +\n        '  202 \\n' +\n        '→ 203 const addNomorRB = await tx.nomormbr.createMany(\\n' +\n        'Unique constraint failed on the constraint: `nomormbr_nomorUrut_tahun_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'nomormbr',\n          target: 'nomormbr_nomorUrut_tahun_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 11:33:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.permintaan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n    '\\n' +\n    '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n    '   99 }\\n' +\n    '  100 \\n' +\n    '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.permintaan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n        '\\n' +\n        '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n        '   99 }\\n' +\n        '  100 \\n' +\n        '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'permintaan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 11:38:12"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.permintaan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n    '\\n' +\n    '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n    '   99 }\\n' +\n    '  100 \\n' +\n    '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.permintaan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n        '\\n' +\n        '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n        '   99 }\\n' +\n        '  100 \\n' +\n        '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'permintaan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 11:38:13"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.permintaan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n    '\\n' +\n    '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n    '   99 }\\n' +\n    '  100 \\n' +\n    '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.permintaan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n        '\\n' +\n        '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n        '   99 }\\n' +\n        '  100 \\n' +\n        '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'permintaan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 11:38:14"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.permintaan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n    '\\n' +\n    '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n    '   99 }\\n' +\n    '  100 \\n' +\n    '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.permintaan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n        '\\n' +\n        '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n        '   99 }\\n' +\n        '  100 \\n' +\n        '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'permintaan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 11:38:15"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.permintaan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n    '\\n' +\n    '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n    '   99 }\\n' +\n    '  100 \\n' +\n    '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.permintaan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n        '\\n' +\n        '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n        '   99 }\\n' +\n        '  100 \\n' +\n        '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'permintaan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 11:38:16"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.permintaan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n    '\\n' +\n    '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n    '   99 }\\n' +\n    '  100 \\n' +\n    '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.permintaan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n        '\\n' +\n        '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n        '   99 }\\n' +\n        '  100 \\n' +\n        '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'permintaan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 11:38:17"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.permintaan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n    '\\n' +\n    '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n    '   99 }\\n' +\n    '  100 \\n' +\n    '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.permintaan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n        '\\n' +\n        '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n        '   99 }\\n' +\n        '  100 \\n' +\n        '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'permintaan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 11:38:18"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.permintaan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n    '\\n' +\n    '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n    '   99 }\\n' +\n    '  100 \\n' +\n    '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.permintaan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n        '\\n' +\n        '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n        '   99 }\\n' +\n        '  100 \\n' +\n        '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'permintaan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 11:38:19"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.permintaan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n    '\\n' +\n    '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n    '   99 }\\n' +\n    '  100 \\n' +\n    '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.permintaan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n        '\\n' +\n        '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n        '   99 }\\n' +\n        '  100 \\n' +\n        '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'permintaan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 11:58:19"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.permintaan.update()` invocation in\\n' +\n    'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n    '\\n' +\n    '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n    '   99 }\\n' +\n    '  100 \\n' +\n    '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `tx.permintaan.update()` invocation in\\n' +\n        'D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:101:58\\n' +\n        '\\n' +\n        '   98     throw new Error(\"Transaksi sudah dikonfirmasi\")\\n' +\n        '   99 }\\n' +\n        '  100 \\n' +\n        '→ 101 const acceptPermintaan = await tx.permintaan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'permintaan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 11:58:20"}
{"level":"error","message":"UnknownError: Error: Status Undefined\n    at get_request_lists (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:128:19)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: 'Error: Status Undefined\\n' +\n    '    at get_request_lists (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:128:19)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: 'Status Undefined'\n}","service":"user-service","timestamp":"2024-09-17 13:20:55"}
{"level":"error","message":"UnknownError: Error: Status Undefined\n    at get_request_lists (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:128:19)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: 'Error: Status Undefined\\n' +\n    '    at get_request_lists (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:128:19)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: 'Status Undefined'\n}","service":"user-service","timestamp":"2024-09-17 13:21:48"}
{"level":"error","message":"UnknownError: Error: Status Undefined\n    at get_request_lists (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:128:19)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at check_is_authorized (D:\\Project\\node\\MBR\\backend\\middleware\\authorization.ts:7:16)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\router\\index.js:346:12) {\n  [stack]: 'Error: Status Undefined\\n' +\n    '    at get_request_lists (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:128:19)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at check_is_authorized (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\middleware\\\\authorization.ts:7:16)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at next (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:149:13)\\n' +\n    '    at Route.dispatch (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\route.js:119:3)\\n' +\n    '    at Layer.handle [as handle_request] (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\layer.js:95:5)\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:284:15\\n' +\n    '    at Function.process_params (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\router\\\\index.js:346:12)',\n  [message]: 'Status Undefined'\n}","service":"user-service","timestamp":"2024-09-17 13:24:27"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'toISOString')\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:289:49\n    at Array.map (<anonymous>)\n    at Object.get_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:284:60)\n    at async get_request_lists (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:135:29) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'toISOString')\\n\" +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:289:49\\n' +\n    '    at Array.map (<anonymous>)\\n' +\n    '    at Object.get_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:284:60)\\n' +\n    '    at async get_request_lists (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:135:29)',\n  [message]: \"Cannot read properties of null (reading 'toISOString')\"\n}","service":"user-service","timestamp":"2024-09-17 13:40:01"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:107:23\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:96:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:107:23\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:96:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-17 13:47:56"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:107:23\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:96:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:107:23\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:96:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-17 13:47:57"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:107:23\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:96:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:107:23\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:96:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-17 13:47:58"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:107:23\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:96:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:107:23\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:96:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-17 13:47:59"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:1159:12)\n    at ServerResponse.json (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:272:14)\n    at get_request_by_department (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:166:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:1159:12)\\n' +\n    '    at ServerResponse.json (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:272:14)\\n' +\n    '    at get_request_by_department (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:166:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-09-17 21:13:56"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:1159:12)\n    at ServerResponse.json (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:272:14)\n    at get_request_by_department (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:166:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:1159:12)\\n' +\n    '    at ServerResponse.json (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:272:14)\\n' +\n    '    at get_request_by_department (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:166:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-09-17 21:13:59"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:1159:12)\n    at ServerResponse.json (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:272:14)\n    at get_request_by_department (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:166:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:1159:12)\\n' +\n    '    at ServerResponse.json (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:272:14)\\n' +\n    '    at get_request_by_department (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:166:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-09-17 21:16:06"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:1159:12)\n    at ServerResponse.json (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:272:14)\n    at get_request_by_department (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:166:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:1159:12)\\n' +\n    '    at ServerResponse.json (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:272:14)\\n' +\n    '    at get_request_by_department (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:166:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-09-17 21:16:41"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1055`. Message: `Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.p.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1055`. Message: `Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.p.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1055',\n          message: \"Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.p.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 21:22:04"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1055`. Message: `Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.p.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1055`. Message: `Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.p.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1055',\n          message: \"Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.p.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 21:22:05"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1055`. Message: `Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.p.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1055`. Message: `Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.p.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1055',\n          message: \"Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.p.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 21:22:06"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:1159:12)\n    at ServerResponse.json (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:272:14)\n    at get_request_by_department (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:167:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:1159:12)\\n' +\n    '    at ServerResponse.json (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:272:14)\\n' +\n    '    at get_request_by_department (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:167:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-09-17 21:27:50"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:1159:12)\n    at ServerResponse.json (D:\\Project\\node\\MBR\\node_modules\\express\\lib\\response.js:272:14)\n    at get_request_by_department (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:167:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:1159:12)\\n' +\n    '    at ServerResponse.json (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\express\\\\lib\\\\response.js:272:14)\\n' +\n    '    at get_request_by_department (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:167:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-09-17 21:27:51"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1055`. Message: `Expression #11 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.n.tahun' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1055`. Message: `Expression #11 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.n.tahun' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1055',\n          message: \"Expression #11 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.n.tahun' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 21:56:28"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1055`. Message: `Expression #11 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.n.tahun' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1055`. Message: `Expression #11 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.n.tahun' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1055',\n          message: \"Expression #11 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.n.tahun' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-17 21:56:33"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:128:23\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:117:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:128:23\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:117:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-19 04:40:47"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:128:23\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:117:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:128:23\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:117:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-19 04:40:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-19 04:59:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-19 05:00:55"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'p.idProduk' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'p.idProduk' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'p.idProduk' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-19 05:29:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'p.idProduk' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'p.idProduk' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'p.idProduk' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-19 05:30:00"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'toLocaleString')\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:463:53\n    at Array.map (<anonymous>)\n    at Object.get_nomor_by_id (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:456:61)\n    at async get_nomor_by_id (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:224:31) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'toLocaleString')\\n\" +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:463:53\\n' +\n    '    at Array.map (<anonymous>)\\n' +\n    '    at Object.get_nomor_by_id (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:456:61)\\n' +\n    '    at async get_nomor_by_id (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:224:31)',\n  [message]: \"Cannot read properties of null (reading 'toLocaleString')\"\n}","service":"user-service","timestamp":"2024-09-19 05:30:32"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at Object.reject_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:273:19)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:96:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at Object.reject_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:273:19)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:96:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-19 05:40:49"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at Object.reject_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:273:19)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:96:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at Object.reject_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:273:19)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:96:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-19 05:40:51"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at Object.reject_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:273:19)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:96:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at Object.reject_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:273:19)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:96:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-19 05:40:52"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at Object.reject_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:273:19)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:96:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at Object.reject_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:273:19)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:96:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-19 05:40:53"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at Object.reject_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:273:19)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:96:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at Object.reject_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:273:19)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:96:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-19 05:40:53"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at Object.reject_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:273:19)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:96:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at Object.reject_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:273:19)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:96:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-19 05:40:54"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at Object.reject_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:273:19)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:96:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at Object.reject_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:273:19)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:96:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-19 05:41:25"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at Object.reject_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:273:19)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:96:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at Object.reject_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:273:19)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:96:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-19 05:41:26"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:139:23\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:128:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:139:23\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:128:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-19 05:41:31"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:139:23\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:128:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:139:23\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:128:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-19 05:41:32"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:139:23\n    at async Proxy._transactionWithCallback (D:\\Project\\node\\MBR\\node_modules\\@prisma\\client\\runtime\\library.js:131:7483)\n    at async Object.accept_permintaan (D:\\Project\\node\\MBR\\backend\\model\\admin\\admin_product_rb_model.ts:128:40)\n    at async confirm_request (D:\\Project\\node\\MBR\\backend\\controller\\admin\\admin_product_rb.ts:82:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:139:23\\n' +\n    '    at async Proxy._transactionWithCallback (D:\\\\Project\\\\node\\\\MBR\\\\node_modules\\\\@prisma\\\\client\\\\runtime\\\\library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\model\\\\admin\\\\admin_product_rb_model.ts:128:40)\\n' +\n    '    at async confirm_request (D:\\\\Project\\\\node\\\\MBR\\\\backend\\\\controller\\\\admin\\\\admin_product_rb.ts:82:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-09-19 05:41:33"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1055`. Message: `Expression #5 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.n.tahun' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1055`. Message: `Expression #5 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.n.tahun' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1055',\n          message: \"Expression #5 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.n.tahun' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-20 21:19:48"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-20 21:37:38"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-20 21:39:12"}
{"level":"error","message":"CustomError: {\n  message: 'Password Salah',\n  context: [\n    { message: 'Password Salah', context: { code: 'L002' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-20 22:04:29"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-25 20:07:46"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'toString')\n    at get_request_lists (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/backend/controller/admin/admin_product_rb.ts:158:85)\n    at Layer.handle [as handle_request] (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/node_modules/express/lib/router/layer.js:95:5)\n    at next (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/node_modules/express/lib/router/route.js:149:13)\n    at check_is_authorized_admin (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/backend/middleware/authorization.ts:17:20) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'toString')\\n\" +\n    '    at get_request_lists (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/backend/controller/admin/admin_product_rb.ts:158:85)\\n' +\n    '    at Layer.handle [as handle_request] (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/node_modules/express/lib/router/layer.js:95:5)\\n' +\n    '    at next (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/node_modules/express/lib/router/route.js:149:13)\\n' +\n    '    at check_is_authorized_admin (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/backend/middleware/authorization.ts:17:20)',\n  [message]: \"Cannot read properties of undefined (reading 'toString')\"\n}","service":"user-service","timestamp":"2024-09-25 20:22:42"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'toString')\n    at get_request_lists (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/backend/controller/admin/admin_product_rb.ts:158:85)\n    at Layer.handle [as handle_request] (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/node_modules/express/lib/router/layer.js:95:5)\n    at next (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/node_modules/express/lib/router/route.js:149:13)\n    at check_is_authorized_admin (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/backend/middleware/authorization.ts:17:20) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'toString')\\n\" +\n    '    at get_request_lists (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/backend/controller/admin/admin_product_rb.ts:158:85)\\n' +\n    '    at Layer.handle [as handle_request] (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/node_modules/express/lib/router/layer.js:95:5)\\n' +\n    '    at next (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/node_modules/express/lib/router/route.js:149:13)\\n' +\n    '    at check_is_authorized_admin (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/backend/middleware/authorization.ts:17:20)',\n  [message]: \"Cannot read properties of undefined (reading 'toString')\"\n}","service":"user-service","timestamp":"2024-09-25 20:23:59"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'toString')\n    at get_request_lists (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/backend/controller/admin/admin_product_rb.ts:158:85)\n    at Layer.handle [as handle_request] (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/node_modules/express/lib/router/layer.js:95:5)\n    at next (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/node_modules/express/lib/router/route.js:149:13)\n    at check_is_authorized_admin (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/backend/middleware/authorization.ts:17:20) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'toString')\\n\" +\n    '    at get_request_lists (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/backend/controller/admin/admin_product_rb.ts:158:85)\\n' +\n    '    at Layer.handle [as handle_request] (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/node_modules/express/lib/router/layer.js:95:5)\\n' +\n    '    at next (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/node_modules/express/lib/router/route.js:149:13)\\n' +\n    '    at check_is_authorized_admin (/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/backend/middleware/authorization.ts:17:20)',\n  [message]: \"Cannot read properties of undefined (reading 'toString')\"\n}","service":"user-service","timestamp":"2024-09-25 20:24:00"}
{"level":"error","message":"CustomError: {\n  message: 'Password Salah',\n  context: [\n    { message: 'Password Salah', context: { code: 'L002' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-30 20:38:49"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-30 21:20:00"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-30 21:20:48"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Ditemukan',\n  context: [\n    { message: 'User Tidak Ditemukan', context: { code: 'L001' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-30 21:23:09"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Ditemukan',\n  context: [\n    { message: 'User Tidak Ditemukan', context: { code: 'L001' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-30 21:23:14"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Ditemukan',\n  context: [\n    { message: 'User Tidak Ditemukan', context: { code: 'L001' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-09-30 21:23:16"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.delete()` invocation in\\n' +\n    '/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/backend/model/admin/admin_users_model.ts:267:47\\n' +\n    '\\n' +\n    '  264 \\n' +\n    '  265 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  266     try {\\n' +\n    '→ 267         const user = await prisma.users.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.delete()` invocation in\\n' +\n        '/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/backend/model/admin/admin_users_model.ts:267:47\\n' +\n        '\\n' +\n        '  264 \\n' +\n        '  265 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  266     try {\\n' +\n        '→ 267         const user = await prisma.users.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'users',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-05 05:34:59"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.delete()` invocation in\\n' +\n    '/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/backend/model/admin/admin_users_model.ts:267:47\\n' +\n    '\\n' +\n    '  264 \\n' +\n    '  265 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  266     try {\\n' +\n    '→ 267         const user = await prisma.users.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.delete()` invocation in\\n' +\n        '/media/ikhsan/HDD PC/Ubuntu Files/Project/MBR/backend/model/admin/admin_users_model.ts:267:47\\n' +\n        '\\n' +\n        '  264 \\n' +\n        '  265 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  266     try {\\n' +\n        '→ 267         const user = await prisma.users.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'users',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-05 05:37:37"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    '/media/ikhsan/Data/Ubuntu Files/Project/MBR/backend/model/admin/admin_users_model.ts:335:67\\n' +\n    '\\n' +\n    '  332 \\n' +\n    '  333 try {\\n' +\n    '  334 \\n' +\n    '→ 335     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        '/media/ikhsan/Data/Ubuntu Files/Project/MBR/backend/model/admin/admin_users_model.ts:335:67\\n' +\n        '\\n' +\n        '  332 \\n' +\n        '  333 try {\\n' +\n        '  334 \\n' +\n        '→ 335     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          target: 'usersonbagianonjabatan_idBagianJabatan_idUsers_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-07 22:28:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    '/media/ikhsan/Data/Ubuntu Files/Project/MBR/backend/model/admin/admin_users_model.ts:335:67\\n' +\n    '\\n' +\n    '  332 \\n' +\n    '  333 try {\\n' +\n    '  334 \\n' +\n    '→ 335     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        '/media/ikhsan/Data/Ubuntu Files/Project/MBR/backend/model/admin/admin_users_model.ts:335:67\\n' +\n        '\\n' +\n        '  332 \\n' +\n        '  333 try {\\n' +\n        '  334 \\n' +\n        '→ 335     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          target: 'usersonbagianonjabatan_idBagianJabatan_idUsers_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-07 22:28:36"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-07 22:33:54"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n    '/media/ikhsan/Data/Ubuntu Files/Project/MBR/backend/model/admin/admin_users_model.ts:312:67\\n' +\n    '\\n' +\n    '  309 export async function update_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  310 \\n' +\n    '  311     try {\\n' +\n    '→ 312         const updateProcess = await prisma.usersonbagianonjabatan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n        '/media/ikhsan/Data/Ubuntu Files/Project/MBR/backend/model/admin/admin_users_model.ts:312:67\\n' +\n        '\\n' +\n        '  309 export async function update_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  310 \\n' +\n        '  311     try {\\n' +\n        '→ 312         const updateProcess = await prisma.usersonbagianonjabatan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-07 22:34:19"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n    '/media/ikhsan/Data/Ubuntu Files/Project/MBR/backend/model/admin/admin_users_model.ts:312:67\\n' +\n    '\\n' +\n    '  309 export async function update_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  310 \\n' +\n    '  311     try {\\n' +\n    '→ 312         const updateProcess = await prisma.usersonbagianonjabatan.update(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.update()` invocation in\\n' +\n        '/media/ikhsan/Data/Ubuntu Files/Project/MBR/backend/model/admin/admin_users_model.ts:312:67\\n' +\n        '\\n' +\n        '  309 export async function update_user_department_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n        '  310 \\n' +\n        '  311     try {\\n' +\n        '→ 312         const updateProcess = await prisma.usersonbagianonjabatan.update(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to update not found.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          cause: 'Record to update not found.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-07 22:34:22"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_users_model.ts:382:67\\n' +\n    '\\n' +\n    '  379 \\n' +\n    '  380 try {\\n' +\n    '  381 \\n' +\n    '→ 382     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n    'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.usersonbagianonjabatan.create()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_users_model.ts:382:67\\n' +\n        '\\n' +\n        '  379 \\n' +\n        '  380 try {\\n' +\n        '  381 \\n' +\n        '→ 382     const insertProcess = await prisma.usersonbagianonjabatan.create(\\n' +\n        'Unique constraint failed on the constraint: `usersonbagianonjabatan_idBagianJabatan_idUsers_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'usersonbagianonjabatan',\n          target: 'usersonbagianonjabatan_idBagianJabatan_idUsers_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-14 18:25:14"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-17 09:03:34"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:125:23\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.accept_permintaan (/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:114:40)\n    at async confirm_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:57:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:125:23\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:114:40)\\n' +\n    '    at async confirm_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:57:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-10-17 11:57:21"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:125:23\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.accept_permintaan (/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:114:40)\n    at async confirm_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:57:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:125:23\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:114:40)\\n' +\n    '    at async confirm_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:57:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-10-17 11:57:32"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:125:23\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.accept_permintaan (/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:114:40)\n    at async confirm_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:57:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:125:23\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:114:40)\\n' +\n    '    at async confirm_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:57:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-10-17 11:57:35"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'map')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:57:24\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:36:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:31:25) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'map')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:57:24\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:36:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:31:25)',\n  [message]: \"Cannot read properties of null (reading 'map')\"\n}","service":"user-service","timestamp":"2024-10-17 12:15:43"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'map')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:57:24\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:36:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:31:25) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'map')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:57:24\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:36:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:31:25)',\n  [message]: \"Cannot read properties of null (reading 'map')\"\n}","service":"user-service","timestamp":"2024-10-17 12:15:45"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'map')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:57:24\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:36:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:31:25) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'map')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:57:24\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:36:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:31:25)',\n  [message]: \"Cannot read properties of null (reading 'map')\"\n}","service":"user-service","timestamp":"2024-10-17 12:15:45"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'map')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:57:24\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:36:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:31:25) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'map')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:57:24\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:36:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:31:25)',\n  [message]: \"Cannot read properties of null (reading 'map')\"\n}","service":"user-service","timestamp":"2024-10-17 12:15:46"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'map')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:57:24\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:36:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:31:25) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'map')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:57:24\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:36:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:31:25)',\n  [message]: \"Cannot read properties of null (reading 'map')\"\n}","service":"user-service","timestamp":"2024-10-17 12:15:47"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'toString')\n    at get_request_lists (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:133:85)\n    at Layer.handle [as handle_request] (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/router/layer.js:95:5)\n    at next (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/router/route.js:149:13)\n    at check_is_authorized_admin (/media/ikhsan/Data/linux/Project/MBR/backend/middleware/authorization.ts:17:20) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'toString')\\n\" +\n    '    at get_request_lists (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:133:85)\\n' +\n    '    at Layer.handle [as handle_request] (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/router/layer.js:95:5)\\n' +\n    '    at next (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/router/route.js:149:13)\\n' +\n    '    at check_is_authorized_admin (/media/ikhsan/Data/linux/Project/MBR/backend/middleware/authorization.ts:17:20)',\n  [message]: \"Cannot read properties of undefined (reading 'toString')\"\n}","service":"user-service","timestamp":"2024-10-17 13:11:30"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'toString')\n    at get_request_lists (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:133:85)\n    at Layer.handle [as handle_request] (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/router/layer.js:95:5)\n    at next (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/router/route.js:149:13)\n    at check_is_authorized_admin (/media/ikhsan/Data/linux/Project/MBR/backend/middleware/authorization.ts:17:20) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'toString')\\n\" +\n    '    at get_request_lists (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:133:85)\\n' +\n    '    at Layer.handle [as handle_request] (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/router/layer.js:95:5)\\n' +\n    '    at next (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/router/route.js:149:13)\\n' +\n    '    at check_is_authorized_admin (/media/ikhsan/Data/linux/Project/MBR/backend/middleware/authorization.ts:17:20)',\n  [message]: \"Cannot read properties of undefined (reading 'toString')\"\n}","service":"user-service","timestamp":"2024-10-17 13:11:31"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'toString')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:41:69\n    at Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7489)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:37:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:33:25) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'toString')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:41:69\\n' +\n    '    at Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7489)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:37:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:33:25)',\n  [message]: \"Cannot read properties of undefined (reading 'toString')\"\n}","service":"user-service","timestamp":"2024-10-17 13:41:40"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'toString')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:41:69\n    at Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7489)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:37:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:33:25) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'toString')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:41:69\\n' +\n    '    at Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7489)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:37:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:33:25)',\n  [message]: \"Cannot read properties of undefined (reading 'toString')\"\n}","service":"user-service","timestamp":"2024-10-17 13:41:51"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-18 18:39:14"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-18 18:39:14"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-18 18:40:48"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-18 18:40:48"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-18 18:41:12"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-18 18:41:12"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-21 05:36:40"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null }): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 idBagian: undefined\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   namaBagian: \"asc\"\\n' +\n    '                 },\\n' +\n    '                 namaProduk: \"asc\"\\n' +\n    '               }\\n' +\n    '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `orderBy`: Invalid value provided. Expected produkOrderByWithRelationInput[], provided Object.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null }): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 idBagian: undefined\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   namaBagian: \"asc\"\\n' +\n    '                 },\\n' +\n    '                 namaProduk: \"asc\"\\n' +\n    '               }\\n' +\n    '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `orderBy`: Invalid value provided. Expected produkOrderByWithRelationInput[], provided Object.'\n}","service":"user-service","timestamp":"2024-10-21 06:16:09"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null }): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 idBagian: undefined\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   namaBagian: \"asc\"\\n' +\n    '                 },\\n' +\n    '                 namaProduk: \"asc\"\\n' +\n    '               }\\n' +\n    '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `orderBy`: Invalid value provided. Expected produkOrderByWithRelationInput[], provided Object.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null }): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 idBagian: undefined\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   namaBagian: \"asc\"\\n' +\n    '                 },\\n' +\n    '                 namaProduk: \"asc\"\\n' +\n    '               }\\n' +\n    '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `orderBy`: Invalid value provided. Expected produkOrderByWithRelationInput[], provided Object.'\n}","service":"user-service","timestamp":"2024-10-21 06:16:09"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null }): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 idBagian: undefined\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   namaBagian: \"asc\"\\n' +\n    '                 },\\n' +\n    '                 namaProduk: \"asc\"\\n' +\n    '               }\\n' +\n    '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `orderBy`: Invalid value provided. Expected produkOrderByWithRelationInput[], provided Object.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null }): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 idBagian: undefined\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   namaBagian: \"asc\"\\n' +\n    '                 },\\n' +\n    '                 namaProduk: \"asc\"\\n' +\n    '               }\\n' +\n    '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `orderBy`: Invalid value provided. Expected produkOrderByWithRelationInput[], provided Object.'\n}","service":"user-service","timestamp":"2024-10-21 06:16:13"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null }): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 idBagian: undefined\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   namaBagian: \"asc\"\\n' +\n    '                 },\\n' +\n    '                 namaProduk: \"asc\"\\n' +\n    '               }\\n' +\n    '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `orderBy`: Invalid value provided. Expected produkOrderByWithRelationInput[], provided Object.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null }): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 idBagian: undefined\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   namaBagian: \"asc\"\\n' +\n    '                 },\\n' +\n    '                 namaProduk: \"asc\"\\n' +\n    '               }\\n' +\n    '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `orderBy`: Invalid value provided. Expected produkOrderByWithRelationInput[], provided Object.'\n}","service":"user-service","timestamp":"2024-10-21 06:16:13"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null }): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 idBagian: undefined\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   namaBagian: \"asc\"\\n' +\n    '                 },\\n' +\n    '                 namaProduk: \"asc\"\\n' +\n    '               }\\n' +\n    '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `orderBy`: Invalid value provided. Expected produkOrderByWithRelationInput[], provided Object.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null }): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 idBagian: undefined\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   namaBagian: \"asc\"\\n' +\n    '                 },\\n' +\n    '                 namaProduk: \"asc\"\\n' +\n    '               }\\n' +\n    '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `orderBy`: Invalid value provided. Expected produkOrderByWithRelationInput[], provided Object.'\n}","service":"user-service","timestamp":"2024-10-21 06:16:30"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null }): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 idBagian: undefined\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   namaBagian: \"asc\"\\n' +\n    '                 },\\n' +\n    '                 namaProduk: \"asc\"\\n' +\n    '               }\\n' +\n    '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `orderBy`: Invalid value provided. Expected produkOrderByWithRelationInput[], provided Object.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null }): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 idBagian: undefined\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   namaBagian: \"asc\"\\n' +\n    '                 },\\n' +\n    '                 namaProduk: \"asc\"\\n' +\n    '               }\\n' +\n    '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `orderBy`: Invalid value provided. Expected produkOrderByWithRelationInput[], provided Object.'\n}","service":"user-service","timestamp":"2024-10-21 06:16:30"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null }): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 idBagian: undefined\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   namaBagian: \"asc\"\\n' +\n    '                 },\\n' +\n    '                 namaProduk: \"asc\"\\n' +\n    '               }\\n' +\n    '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `orderBy`: Invalid value provided. Expected produkOrderByWithRelationInput[], provided Object.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null }): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 idBagian: undefined\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   namaBagian: \"asc\"\\n' +\n    '                 },\\n' +\n    '                 namaProduk: \"asc\"\\n' +\n    '               }\\n' +\n    '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `orderBy`: Invalid value provided. Expected produkOrderByWithRelationInput[], provided Object.'\n}","service":"user-service","timestamp":"2024-10-21 06:16:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null }): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 idBagian: undefined\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   namaBagian: \"asc\"\\n' +\n    '                 },\\n' +\n    '                 namaProduk: \"asc\"\\n' +\n    '               }\\n' +\n    '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `orderBy`: Invalid value provided. Expected produkOrderByWithRelationInput[], provided Object.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null }): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 idBagian: undefined\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: {\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   namaBagian: \"asc\"\\n' +\n    '                 },\\n' +\n    '                 namaProduk: \"asc\"\\n' +\n    '               }\\n' +\n    '               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `orderBy`: Invalid value provided. Expected produkOrderByWithRelationInput[], provided Object.'\n}","service":"user-service","timestamp":"2024-10-21 06:16:37"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-22 20:44:02"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: string | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 OR: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: \"134\"\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian`: Invalid value provided. Expected IntFilter or Int, provided String.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: string | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 OR: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: \"134\"\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian`: Invalid value provided. Expected IntFilter or Int, provided String.'\n}","service":"user-service","timestamp":"2024-10-22 21:06:24"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: string | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 OR: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: \"134\"\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian`: Invalid value provided. Expected IntFilter or Int, provided String.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: string | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 OR: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: \"134\"\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian`: Invalid value provided. Expected IntFilter or Int, provided String.'\n}","service":"user-service","timestamp":"2024-10-22 21:06:27"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:34:46"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:34:46"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:35:28"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:35:28"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:35:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:35:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:35:37"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:35:37"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:35:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:35:57"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:36:05"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:36:09"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:36:14"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:36:18"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:36:19"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:36:22"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:36:25"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:36:25"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:36:38"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:36:38"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:36:40"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:36:40"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:36:41"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:50:48\\n' +\n    '\\n' +\n    '  47 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null}): Promise<ResultModel<produk[] | null> | {data: string}> {\\n' +\n    '  48     try {\\n' +\n    '  49         let result: produk[] = []\\n' +\n    '→ 50         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ]\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-22 21:36:41"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-22 21:43:13"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-22 21:43:13"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-22 21:43:40"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-22 21:43:47"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-22 21:44:09"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-22 21:44:09"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-22 21:44:12"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-22 21:44:12"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-22 21:44:19"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-22 21:44:19"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:126:23\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.accept_permintaan (/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:115:40)\n    at async confirm_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:57:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:126:23\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:115:40)\\n' +\n    '    at async confirm_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:57:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-10-22 22:18:51"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.count()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:136:50\\n' +\n    '\\n' +\n    '  133 // ANCHOR - Check Product\\n' +\n    '  134 export async function check_product(data: { namaProduk: string, idBagian: number | string }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  135     try {\\n' +\n    '→ 136         const checkProduct = await prisma.produk.count({\\n' +\n    '                select: {\\n' +\n    '                  _count: {\\n' +\n    '                    select: {\\n' +\n    '                      _all: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                where: {\\n' +\n    '                  AND: [\\n' +\n    '                    {\\n' +\n    '                      namaProduk: \"Siladex CC 100\"\\n' +\n    '                    },\\n' +\n    '                    {\\n' +\n    '                      idBagian: NaN\\n' +\n    '                    }\\n' +\n    '                  ]\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.count()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:136:50\\n' +\n    '\\n' +\n    '  133 // ANCHOR - Check Product\\n' +\n    '  134 export async function check_product(data: { namaProduk: string, idBagian: number | string }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  135     try {\\n' +\n    '→ 136         const checkProduct = await prisma.produk.count({\\n' +\n    '                select: {\\n' +\n    '                  _count: {\\n' +\n    '                    select: {\\n' +\n    '                      _all: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                where: {\\n' +\n    '                  AND: [\\n' +\n    '                    {\\n' +\n    '                      namaProduk: \"Siladex CC 100\"\\n' +\n    '                    },\\n' +\n    '                    {\\n' +\n    '                      idBagian: NaN\\n' +\n    '                    }\\n' +\n    '                  ]\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-23 20:44:28"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:27:48\\n' +\n    '\\n' +\n    '  24 //ANCHOR - Tambah Produk\\n' +\n    '  25 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  26     try {\\n' +\n    '→ 27         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:27:48\\n' +\n        '\\n' +\n        '  24 //ANCHOR - Tambah Produk\\n' +\n        '  25 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  26     try {\\n' +\n        '→ 27         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-23 20:50:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:27:48\\n' +\n    '\\n' +\n    '  24 //ANCHOR - Tambah Produk\\n' +\n    '  25 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  26     try {\\n' +\n    '→ 27         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:27:48\\n' +\n        '\\n' +\n        '  24 //ANCHOR - Tambah Produk\\n' +\n        '  25 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  26     try {\\n' +\n        '→ 27         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-23 20:50:51"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:27:48\\n' +\n    '\\n' +\n    '  24 //ANCHOR - Tambah Produk\\n' +\n    '  25 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  26     try {\\n' +\n    '→ 27         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:27:48\\n' +\n        '\\n' +\n        '  24 //ANCHOR - Tambah Produk\\n' +\n        '  25 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  26     try {\\n' +\n        '→ 27         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-23 20:50:52"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:27:48\\n' +\n    '\\n' +\n    '  24 //ANCHOR - Tambah Produk\\n' +\n    '  25 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  26     try {\\n' +\n    '→ 27         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:27:48\\n' +\n        '\\n' +\n        '  24 //ANCHOR - Tambah Produk\\n' +\n        '  25 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  26     try {\\n' +\n        '→ 27         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-23 20:50:53"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:27:48\\n' +\n    '\\n' +\n    '  24 //ANCHOR - Tambah Produk\\n' +\n    '  25 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  26     try {\\n' +\n    '→ 27         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"aa\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: 10,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:27:48\\n' +\n    '\\n' +\n    '  24 //ANCHOR - Tambah Produk\\n' +\n    '  25 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  26     try {\\n' +\n    '→ 27         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"aa\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: 10,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.'\n}","service":"user-service","timestamp":"2024-10-23 20:52:07"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:27:48\\n' +\n    '\\n' +\n    '  24 //ANCHOR - Tambah Produk\\n' +\n    '  25 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  26     try {\\n' +\n    '→ 27         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"aa\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: 10,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:27:48\\n' +\n    '\\n' +\n    '  24 //ANCHOR - Tambah Produk\\n' +\n    '  25 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  26     try {\\n' +\n    '→ 27         const addProduct = await prisma.produk.create({\\n' +\n    '               data: {\\n' +\n    '                 namaProduk: \"aa\",\\n' +\n    '                 idBagian: NaN,\\n' +\n    '                 idKategori: 10,\\n' +\n    '             +   idKategoriFK: {\\n' +\n    '             +     create: kategoriCreateWithoutIdKategoriInput | kategoriUncheckedCreateWithoutIdKategoriInput,\\n' +\n    '             +     connectOrCreate: kategoriCreateOrConnectWithoutIdKategoriInput,\\n' +\n    '             +     connect: kategoriWhereUniqueInput\\n' +\n    '             +   }\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idKategori: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idKategoriFK` is missing.'\n}","service":"user-service","timestamp":"2024-10-23 20:52:10"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-23 21:01:42"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-23 21:01:42"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:176:57\\n' +\n    '\\n' +\n    '  173 //ANCHOR - Delete Product\\n' +\n    '  174 export async function delete_product(id: number): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  175     try {\\n' +\n    '→ 176         const deleteProduct = await prisma.produk.delete(\\n' +\n    'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.delete()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:176:57\\n' +\n        '\\n' +\n        '  173 //ANCHOR - Delete Product\\n' +\n        '  174 export async function delete_product(id: number): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  175     try {\\n' +\n        '→ 176         const deleteProduct = await prisma.produk.delete(\\n' +\n        'An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist.',\n      context: {\n        code: 'P2025',\n        meta: {\n          modelName: 'produk',\n          cause: 'Record to delete does not exist.'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 19:50:36"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:05:56"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:05:58"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:06:57"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:08:23"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:08:29"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:08:54"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:09:30"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:09:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:11"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:12"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:52"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:53"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:54"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:54"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:55"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:55"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:55"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:57"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:57"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:57"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:57"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:57"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n    '\\n' +\n    '  188 //ANCHOR - Edit Product\\n' +\n    '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  190     try {\\n' +\n    '→ 191         const editProduct = await prisma.produk.update(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:191:49\\n' +\n        '\\n' +\n        '  188 //ANCHOR - Edit Product\\n' +\n        '  189 export async function edit_product(id: number, data: { namaProduk: string, idBagian: number, idKategori: number, isActive: boolean }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  190     try {\\n' +\n        '→ 191         const editProduct = await prisma.produk.update(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:10:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n    '\\n' +\n    '  41 //ANCHOR - Tambah Produk\\n' +\n    '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  43     try {\\n' +\n    '→ 44         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n        '\\n' +\n        '  41 //ANCHOR - Tambah Produk\\n' +\n        '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  43     try {\\n' +\n        '→ 44         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:25:53"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n    '\\n' +\n    '  41 //ANCHOR - Tambah Produk\\n' +\n    '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  43     try {\\n' +\n    '→ 44         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n        '\\n' +\n        '  41 //ANCHOR - Tambah Produk\\n' +\n        '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  43     try {\\n' +\n        '→ 44         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:25:57"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n    '\\n' +\n    '  41 //ANCHOR - Tambah Produk\\n' +\n    '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  43     try {\\n' +\n    '→ 44         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n        '\\n' +\n        '  41 //ANCHOR - Tambah Produk\\n' +\n        '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  43     try {\\n' +\n        '→ 44         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:26:05"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n    '\\n' +\n    '  41 //ANCHOR - Tambah Produk\\n' +\n    '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  43     try {\\n' +\n    '→ 44         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n        '\\n' +\n        '  41 //ANCHOR - Tambah Produk\\n' +\n        '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  43     try {\\n' +\n        '→ 44         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:26:19"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n    '\\n' +\n    '  41 //ANCHOR - Tambah Produk\\n' +\n    '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  43     try {\\n' +\n    '→ 44         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n        '\\n' +\n        '  41 //ANCHOR - Tambah Produk\\n' +\n        '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  43     try {\\n' +\n        '→ 44         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:26:20"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n    '\\n' +\n    '  41 //ANCHOR - Tambah Produk\\n' +\n    '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  43     try {\\n' +\n    '→ 44         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n        '\\n' +\n        '  41 //ANCHOR - Tambah Produk\\n' +\n        '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  43     try {\\n' +\n        '→ 44         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:26:57"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n    '\\n' +\n    '  41 //ANCHOR - Tambah Produk\\n' +\n    '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  43     try {\\n' +\n    '→ 44         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n        '\\n' +\n        '  41 //ANCHOR - Tambah Produk\\n' +\n        '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  43     try {\\n' +\n        '→ 44         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:26:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n    '\\n' +\n    '  41 //ANCHOR - Tambah Produk\\n' +\n    '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  43     try {\\n' +\n    '→ 44         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n        '\\n' +\n        '  41 //ANCHOR - Tambah Produk\\n' +\n        '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  43     try {\\n' +\n        '→ 44         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:27:09"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n    '\\n' +\n    '  41 //ANCHOR - Tambah Produk\\n' +\n    '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  43     try {\\n' +\n    '→ 44         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n        '\\n' +\n        '  41 //ANCHOR - Tambah Produk\\n' +\n        '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  43     try {\\n' +\n        '→ 44         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:28:02"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n    '\\n' +\n    '  41 //ANCHOR - Tambah Produk\\n' +\n    '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  43     try {\\n' +\n    '→ 44         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n        '\\n' +\n        '  41 //ANCHOR - Tambah Produk\\n' +\n        '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  43     try {\\n' +\n        '→ 44         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:28:03"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n    '\\n' +\n    '  41 //ANCHOR - Tambah Produk\\n' +\n    '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  43     try {\\n' +\n    '→ 44         const addProduct = await prisma.produk.create(\\n' +\n    'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.produk.create()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:44:48\\n' +\n        '\\n' +\n        '  41 //ANCHOR - Tambah Produk\\n' +\n        '  42 export async function add_product(data: { namaProduk: string, idBagian: number, idKategori: number }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n        '  43     try {\\n' +\n        '→ 44         const addProduct = await prisma.produk.create(\\n' +\n        'Unique constraint failed on the constraint: `produk_namaProduk_idKategori_idBagian_key`',\n      context: {\n        code: 'P2002',\n        meta: {\n          modelName: 'produk',\n          target: 'produk_namaProduk_idKategori_idBagian_key'\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:29:11"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-25 20:46:21"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.count()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:154:50\\n' +\n    '\\n' +\n    '  151 // ANCHOR - Check Product\\n' +\n    '  152 export async function check_product(data: { namaProduk: string, idBagian: number | string }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  153     try {\\n' +\n    '→ 154         const checkProduct = await prisma.produk.count({\\n' +\n    '                select: {\\n' +\n    '                  _count: {\\n' +\n    '                    select: {\\n' +\n    '                      _all: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                where: {\\n' +\n    '                  AND: [\\n' +\n    '                    {\\n' +\n    '                      namaProduk: \"undefined\"\\n' +\n    '                    },\\n' +\n    '                    {\\n' +\n    '                      idBagian: NaN\\n' +\n    '                    }\\n' +\n    '                  ]\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.count()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:154:50\\n' +\n    '\\n' +\n    '  151 // ANCHOR - Check Product\\n' +\n    '  152 export async function check_product(data: { namaProduk: string, idBagian: number | string }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  153     try {\\n' +\n    '→ 154         const checkProduct = await prisma.produk.count({\\n' +\n    '                select: {\\n' +\n    '                  _count: {\\n' +\n    '                    select: {\\n' +\n    '                      _all: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                where: {\\n' +\n    '                  AND: [\\n' +\n    '                    {\\n' +\n    '                      namaProduk: \"undefined\"\\n' +\n    '                    },\\n' +\n    '                    {\\n' +\n    '                      idBagian: NaN\\n' +\n    '                    }\\n' +\n    '                  ]\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-25 20:47:06"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'toString')\n    at get_request_lists (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:133:85)\n    at Layer.handle [as handle_request] (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/router/layer.js:95:5)\n    at next (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/router/route.js:149:13)\n    at check_is_authorized_admin (/media/ikhsan/Data/linux/Project/MBR/backend/middleware/authorization.ts:17:20) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'toString')\\n\" +\n    '    at get_request_lists (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:133:85)\\n' +\n    '    at Layer.handle [as handle_request] (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/router/layer.js:95:5)\\n' +\n    '    at next (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/router/route.js:149:13)\\n' +\n    '    at check_is_authorized_admin (/media/ikhsan/Data/linux/Project/MBR/backend/middleware/authorization.ts:17:20)',\n  [message]: \"Cannot read properties of undefined (reading 'toString')\"\n}","service":"user-service","timestamp":"2024-10-26 20:44:52"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'toString')\n    at get_request_lists (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:133:85)\n    at Layer.handle [as handle_request] (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/router/layer.js:95:5)\n    at next (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/router/route.js:149:13)\n    at check_is_authorized_admin (/media/ikhsan/Data/linux/Project/MBR/backend/middleware/authorization.ts:17:20) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'toString')\\n\" +\n    '    at get_request_lists (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:133:85)\\n' +\n    '    at Layer.handle [as handle_request] (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/router/layer.js:95:5)\\n' +\n    '    at next (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/router/route.js:149:13)\\n' +\n    '    at check_is_authorized_admin (/media/ikhsan/Data/linux/Project/MBR/backend/middleware/authorization.ts:17:20)',\n  [message]: \"Cannot read properties of undefined (reading 'toString')\"\n}","service":"user-service","timestamp":"2024-10-26 20:44:52"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_users_model.ts:324:47\\n' +\n    '\\n' +\n    '  321 \\n' +\n    '  322 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  323     try {\\n' +\n    '→ 324         const user = await prisma.users.delete(\\n' +\n    'Foreign key constraint failed on the field: `idCreated`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.delete()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_users_model.ts:324:47\\n' +\n        '\\n' +\n        '  321 \\n' +\n        '  322 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  323     try {\\n' +\n        '→ 324         const user = await prisma.users.delete(\\n' +\n        'Foreign key constraint failed on the field: `idCreated`',\n      context: {\n        code: 'P2003',\n        meta: { modelName: 'users', field_name: 'idCreated' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-26 21:32:37"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_users_model.ts:324:47\\n' +\n    '\\n' +\n    '  321 \\n' +\n    '  322 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  323     try {\\n' +\n    '→ 324         const user = await prisma.users.delete(\\n' +\n    'Foreign key constraint failed on the field: `idCreated`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.delete()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_users_model.ts:324:47\\n' +\n        '\\n' +\n        '  321 \\n' +\n        '  322 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  323     try {\\n' +\n        '→ 324         const user = await prisma.users.delete(\\n' +\n        'Foreign key constraint failed on the field: `idCreated`',\n      context: {\n        code: 'P2003',\n        meta: { modelName: 'users', field_name: 'idCreated' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-26 21:32:38"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_users_model.ts:324:47\\n' +\n    '\\n' +\n    '  321 \\n' +\n    '  322 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  323     try {\\n' +\n    '→ 324         const user = await prisma.users.delete(\\n' +\n    'Foreign key constraint failed on the field: `idCreated`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.delete()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_users_model.ts:324:47\\n' +\n        '\\n' +\n        '  321 \\n' +\n        '  322 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  323     try {\\n' +\n        '→ 324         const user = await prisma.users.delete(\\n' +\n        'Foreign key constraint failed on the field: `idCreated`',\n      context: {\n        code: 'P2003',\n        meta: { modelName: 'users', field_name: 'idCreated' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-26 21:32:39"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_users_model.ts:324:47\\n' +\n    '\\n' +\n    '  321 \\n' +\n    '  322 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  323     try {\\n' +\n    '→ 324         const user = await prisma.users.delete(\\n' +\n    'Foreign key constraint failed on the field: `idCreated`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.delete()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_users_model.ts:324:47\\n' +\n        '\\n' +\n        '  321 \\n' +\n        '  322 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  323     try {\\n' +\n        '→ 324         const user = await prisma.users.delete(\\n' +\n        'Foreign key constraint failed on the field: `idCreated`',\n      context: {\n        code: 'P2003',\n        meta: { modelName: 'users', field_name: 'idCreated' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-26 21:32:39"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_users_model.ts:324:47\\n' +\n    '\\n' +\n    '  321 \\n' +\n    '  322 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  323     try {\\n' +\n    '→ 324         const user = await prisma.users.delete(\\n' +\n    'Foreign key constraint failed on the field: `idCreated`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.delete()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_users_model.ts:324:47\\n' +\n        '\\n' +\n        '  321 \\n' +\n        '  322 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  323     try {\\n' +\n        '→ 324         const user = await prisma.users.delete(\\n' +\n        'Foreign key constraint failed on the field: `idCreated`',\n      context: {\n        code: 'P2003',\n        meta: { modelName: 'users', field_name: 'idCreated' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-26 21:32:39"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-31 19:02:34"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.count()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:154:50\\n' +\n    '\\n' +\n    '  151 // ANCHOR - Check Product\\n' +\n    '  152 export async function check_product(data: { namaProduk: string, idBagian: number | string }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  153     try {\\n' +\n    '→ 154         const checkProduct = await prisma.produk.count({\\n' +\n    '                select: {\\n' +\n    '                  _count: {\\n' +\n    '                    select: {\\n' +\n    '                      _all: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                where: {\\n' +\n    '                  AND: [\\n' +\n    '                    {\\n' +\n    '                      namaProduk: \"undefined\"\\n' +\n    '                    },\\n' +\n    '                    {\\n' +\n    '                      idBagian: NaN\\n' +\n    '                    }\\n' +\n    '                  ]\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.count()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:154:50\\n' +\n    '\\n' +\n    '  151 // ANCHOR - Check Product\\n' +\n    '  152 export async function check_product(data: { namaProduk: string, idBagian: number | string }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  153     try {\\n' +\n    '→ 154         const checkProduct = await prisma.produk.count({\\n' +\n    '                select: {\\n' +\n    '                  _count: {\\n' +\n    '                    select: {\\n' +\n    '                      _all: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                where: {\\n' +\n    '                  AND: [\\n' +\n    '                    {\\n' +\n    '                      namaProduk: \"undefined\"\\n' +\n    '                    },\\n' +\n    '                    {\\n' +\n    '                      idBagian: NaN\\n' +\n    '                    }\\n' +\n    '                  ]\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-31 19:02:46"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Aktif',\n  context: [\n    { message: 'User Tidak Aktif', context: { code: 'L003' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-31 19:12:05"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Aktif',\n  context: [\n    { message: 'User Tidak Aktif', context: { code: 'L003' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-10-31 19:12:07"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:557:64\\n' +\n    '\\n' +\n    '  554 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  555 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  556     try {\\n' +\n    '→ 557         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:557:64\\n' +\n    '\\n' +\n    '  554 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  555 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  556     try {\\n' +\n    '→ 557         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.'\n}","service":"user-service","timestamp":"2024-10-31 19:31:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.count()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:154:50\\n' +\n    '\\n' +\n    '  151 // ANCHOR - Check Product\\n' +\n    '  152 export async function check_product(data: { namaProduk: string, idBagian: number | string }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  153     try {\\n' +\n    '→ 154         const checkProduct = await prisma.produk.count({\\n' +\n    '                select: {\\n' +\n    '                  _count: {\\n' +\n    '                    select: {\\n' +\n    '                      _all: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                where: {\\n' +\n    '                  AND: [\\n' +\n    '                    {\\n' +\n    '                      namaProduk: \"undefined\"\\n' +\n    '                    },\\n' +\n    '                    {\\n' +\n    '                      idBagian: NaN\\n' +\n    '                    }\\n' +\n    '                  ]\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.count()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product.ts:154:50\\n' +\n    '\\n' +\n    '  151 // ANCHOR - Check Product\\n' +\n    '  152 export async function check_product(data: { namaProduk: string, idBagian: number | string }): Promise<ResultModel<produk | null> | { data: string }> {\\n' +\n    '  153     try {\\n' +\n    '→ 154         const checkProduct = await prisma.produk.count({\\n' +\n    '                select: {\\n' +\n    '                  _count: {\\n' +\n    '                    select: {\\n' +\n    '                      _all: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                },\\n' +\n    '                where: {\\n' +\n    '                  AND: [\\n' +\n    '                    {\\n' +\n    '                      namaProduk: \"undefined\"\\n' +\n    '                    },\\n' +\n    '                    {\\n' +\n    '                      idBagian: NaN\\n' +\n    '                    }\\n' +\n    '                  ]\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-10-31 19:33:05"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:557:64\\n' +\n    '\\n' +\n    '  554 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  555 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  556     try {\\n' +\n    '→ 557         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:557:64\\n' +\n    '\\n' +\n    '  554 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  555 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  556     try {\\n' +\n    '→ 557         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.'\n}","service":"user-service","timestamp":"2024-10-31 20:41:57"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:557:64\\n' +\n    '\\n' +\n    '  554 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  555 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  556     try {\\n' +\n    '→ 557         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:557:64\\n' +\n    '\\n' +\n    '  554 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  555 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  556     try {\\n' +\n    '→ 557         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.'\n}","service":"user-service","timestamp":"2024-10-31 20:41:57"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:557:64\\n' +\n    '\\n' +\n    '  554 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  555 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  556     try {\\n' +\n    '→ 557         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:557:64\\n' +\n    '\\n' +\n    '  554 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  555 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  556     try {\\n' +\n    '→ 557         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.'\n}","service":"user-service","timestamp":"2024-10-31 20:42:00"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:557:64\\n' +\n    '\\n' +\n    '  554 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  555 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  556     try {\\n' +\n    '→ 557         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:557:64\\n' +\n    '\\n' +\n    '  554 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  555 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  556     try {\\n' +\n    '→ 557         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.'\n}","service":"user-service","timestamp":"2024-10-31 20:42:13"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:557:64\\n' +\n    '\\n' +\n    '  554 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  555 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  556     try {\\n' +\n    '→ 557         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:557:64\\n' +\n    '\\n' +\n    '  554 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  555 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  556     try {\\n' +\n    '→ 557         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.'\n}","service":"user-service","timestamp":"2024-10-31 20:42:37"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:557:64\\n' +\n    '\\n' +\n    '  554 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  555 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  556     try {\\n' +\n    '→ 557         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:557:64\\n' +\n    '\\n' +\n    '  554 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  555 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  556     try {\\n' +\n    '→ 557         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.'\n}","service":"user-service","timestamp":"2024-10-31 20:42:37"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:557:64\\n' +\n    '\\n' +\n    '  554 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  555 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  556     try {\\n' +\n    '→ 557         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:557:64\\n' +\n    '\\n' +\n    '  554 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  555 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  556     try {\\n' +\n    '→ 557         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.'\n}","service":"user-service","timestamp":"2024-10-31 20:43:00"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:137:23\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.accept_permintaan (/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:126:40)\n    at async confirm_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:58:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:137:23\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:126:40)\\n' +\n    '    at async confirm_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:58:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-10-31 21:28:06"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:137:23\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.accept_permintaan (/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:126:40)\n    at async confirm_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:58:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:137:23\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:126:40)\\n' +\n    '    at async confirm_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:58:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-10-31 21:28:08"}
{"level":"error","message":"UnknownError: Error: Transaksi sudah dikonfirmasi\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:137:23\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.accept_permintaan (/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:126:40)\n    at async confirm_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:58:39) {\n  [stack]: 'Error: Transaksi sudah dikonfirmasi\\n' +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:137:23\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.accept_permintaan (/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:126:40)\\n' +\n    '    at async confirm_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:58:39)',\n  [message]: 'Transaksi sudah dikonfirmasi'\n}","service":"user-service","timestamp":"2024-10-31 21:28:09"}
{"level":"error","message":"CustomError: {\n  message: 'Password Salah',\n  context: [\n    { message: 'Password Salah', context: { code: 'L002' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-09 20:12:10"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'map')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:64:24\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:42:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'map')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:64:24\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:42:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25)',\n  [message]: \"Cannot read properties of null (reading 'map')\"\n}","service":"user-service","timestamp":"2024-11-10 09:01:44"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:48:03"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:48:03"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:48:13"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:48:13"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:53:21"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:53:21"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:54:07"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:54:07"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:54:10"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:54:10"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:54:56"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:54:56"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:55:03"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:55:03"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:57:14"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:57:14"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:58:40"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:58:40"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:58:48"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:58:48"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:59:46"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 20:59:47"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:00:01"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:00:03"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:04:17"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:04:17"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:04:17"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:04:17"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:06:09"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:06:09"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:06:10"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:06:10"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:06:12"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:06:12"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:08:59"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:08:59"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:09:01"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:09:01"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:09:04"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:09:04"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:13:14"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:13:15"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:13:35"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:13:35"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:14:13"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:14:13"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:14:17"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:14:17"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:16:35"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:16:35"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:16:57"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:16:57"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:17:19"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:17:19"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:17:31"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:17:31"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:31:04"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:31:04"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:31:06"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:31:06"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:31:08"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:31:08"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:32:46"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:32:46"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:34:49"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:34:49"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:38:09"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:38:09"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:39:23"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:39:23"}
{"level":"error","message":"CustomError: {\n  message: 'Empty Field',\n  context: [\n    {\n      message: 'Empty Field',\n      context: { code: 422, message: 'Field Input Kosong' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:51:12"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:57:38"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:57:38"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:57:40"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:57:40"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:58:19"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:58:19"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:59:30"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 21:59:30"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:00:42"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:00:42"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:00:45"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:00:45"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:03:58"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:03:58"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:03:59"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:03:59"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:33:12"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:33:12"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:33:13"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:33:13"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:33:14"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:33:14"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:33:20"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:33:20"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:40"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:40"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:41"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:41"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:42"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:42"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:43"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:43"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:44"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:44"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:45"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:45"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:46"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:46"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:46"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:46"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:56"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:57"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:58"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:36:58"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:37:00"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:37:00"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:37:00"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:37:00"}
{"level":"error","message":"CustomError: {\n  message: 'Empty Field',\n  context: [\n    {\n      message: 'Empty Field',\n      context: { code: 422, message: 'Field Input Kosong' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:46:28"}
{"level":"error","message":"CustomError: {\n  message: 'Empty Field',\n  context: [\n    {\n      message: 'Empty Field',\n      context: { code: 422, message: 'Field Input Kosong' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:46:37"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:48:33"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:48:33"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:48:33"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:48:34"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:48:34"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:48:35"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:48:35"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:48:37"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-10 22:48:37"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-12 21:17:23"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-12 21:17:24"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-12 21:17:26"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-12 21:17:26"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1055`. Message: `Expression #4 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.d.tipeMBR' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1055`. Message: `Expression #4 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.d.tipeMBR' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1055',\n          message: \"Expression #4 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'monitoring_mbr.d.tipeMBR' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-12 22:09:40"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 18`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 18`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 18\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-12 22:10:46"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 18`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 18`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 18\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-12 22:11:54"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 18`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 18`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 18\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-12 22:11:56"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_nomor_request_by_id (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:265:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_nomor_request_by_id (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:265:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-11-12 22:12:10"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_nomor_request_by_id (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:265:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_nomor_request_by_id (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:265:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-11-12 22:13:36"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_nomor_request_by_id (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:265:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_nomor_request_by_id (/media/ikhsan/Data/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:265:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-11-12 22:13:37"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:573:64\\n' +\n    '\\n' +\n    '  570 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  571 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  572     try {\\n' +\n    '→ 573         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  group_id: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_product_rb_model.ts:573:64\\n' +\n    '\\n' +\n    '  570 //ANCHOR - Mengambil semua permintaan berdasarkan idPermintaan\\n' +\n    '  571 export async function get_permintaan_by_id(data: { idPermintaan: number }): Promise<ResultModel<GroupedPermintaan[] | null> | { data: string }> {\\n' +\n    '  572     try {\\n' +\n    '→ 573         const searchRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  id: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  group_id: true,\\n' +\n    '                  jumlah: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  idProdukFK: {\\n' +\n    '                    select: {\\n' +\n    '                      namaProduk: true\\n' +\n    '                    }\\n' +\n    '                  }\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.'\n}","service":"user-service","timestamp":"2024-11-12 22:21:07"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:234:61\\n' +\n    '\\n' +\n    '  231 //ANCHOR - Get Detail Permintaan RB Berdasarkan ID\\n' +\n    '  232 export async function get_request_by_id(id: number): Promise<ResultModel<RequestRB | null> | { data: string }> {\\n' +\n    '  233     try {\\n' +\n    '→ 234         const getRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  idPermintaanMbr: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  jumlah: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:234:61\\n' +\n    '\\n' +\n    '  231 //ANCHOR - Get Detail Permintaan RB Berdasarkan ID\\n' +\n    '  232 export async function get_request_by_id(id: number): Promise<ResultModel<RequestRB | null> | { data: string }> {\\n' +\n    '  233     try {\\n' +\n    '→ 234         const getRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  idPermintaanMbr: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  jumlah: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.'\n}","service":"user-service","timestamp":"2024-11-16 19:19:21"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:234:61\\n' +\n    '\\n' +\n    '  231 //ANCHOR - Get Detail Permintaan RB Berdasarkan ID\\n' +\n    '  232 export async function get_request_by_id(id: number): Promise<ResultModel<RequestRB | null> | { data: string }> {\\n' +\n    '  233     try {\\n' +\n    '→ 234         const getRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  idPermintaanMbr: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  jumlah: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.detailpermintaanmbr.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:234:61\\n' +\n    '\\n' +\n    '  231 //ANCHOR - Get Detail Permintaan RB Berdasarkan ID\\n' +\n    '  232 export async function get_request_by_id(id: number): Promise<ResultModel<RequestRB | null> | { data: string }> {\\n' +\n    '  233     try {\\n' +\n    '→ 234         const getRequest = await prisma.detailpermintaanmbr.findMany({\\n' +\n    '                where: {\\n' +\n    '              +   idPermintaanMbr: {\\n' +\n    '              +     equals: Int | IntFieldRefInput,\\n' +\n    '              +     in: Int[],\\n' +\n    '              +     notIn: Int[],\\n' +\n    '              +     lt: Int | IntFieldRefInput,\\n' +\n    '              +     lte: Int | IntFieldRefInput,\\n' +\n    '              +     gt: Int | IntFieldRefInput,\\n' +\n    '              +     gte: Int | IntFieldRefInput,\\n' +\n    '              +     not: Int | NestedIntFilter\\n' +\n    '              +   }\\n' +\n    '                },\\n' +\n    '                select: {\\n' +\n    '                  idPermintaanMbr: true,\\n' +\n    '                  idProduk: true,\\n' +\n    '                  nomorMBR: true,\\n' +\n    '                  tipeMBR: true,\\n' +\n    '                  jumlah: true\\n' +\n    '                }\\n' +\n    '              })\\n' +\n    '\\n' +\n    'Argument `idPermintaanMbr` is missing.'\n}","service":"user-service","timestamp":"2024-11-16 19:21:01"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.permintaan.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:110:64\\n' +\n    '\\n' +\n    '  107 export async function edit_request(data: RequestRB): Promise<ResultModel<{ requestRB: RequestRB, detailPermintaan: DetailPermintaan[] } | null>> {\\n' +\n    '  108     try {\\n' +\n    '  109         const transactionRequest = await prisma.$transaction(async (tx: Prisma.TransactionClient): Promise<{ requestMBR: RequestRB, detailPermintaan: DetailPermintaan[] } | null> => {\\n' +\n    '→ 110             const deleteOldRequest = await tx.permintaan.delete({\\n' +\n    '                    where: {\\n' +\n    '                  +   id: Int\\n' +\n    '                    }\\n' +\n    '                  })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: '\\n' +\n    'Invalid `tx.permintaan.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:110:64\\n' +\n    '\\n' +\n    '  107 export async function edit_request(data: RequestRB): Promise<ResultModel<{ requestRB: RequestRB, detailPermintaan: DetailPermintaan[] } | null>> {\\n' +\n    '  108     try {\\n' +\n    '  109         const transactionRequest = await prisma.$transaction(async (tx: Prisma.TransactionClient): Promise<{ requestMBR: RequestRB, detailPermintaan: DetailPermintaan[] } | null> => {\\n' +\n    '→ 110             const deleteOldRequest = await tx.permintaan.delete({\\n' +\n    '                    where: {\\n' +\n    '                  +   id: Int\\n' +\n    '                    }\\n' +\n    '                  })\\n' +\n    '\\n' +\n    'Argument `id` is missing.'\n}","service":"user-service","timestamp":"2024-11-17 20:09:50"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.permintaan.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:110:64\\n' +\n    '\\n' +\n    '  107 export async function edit_request(data: RequestRB): Promise<ResultModel<{ requestRB: RequestRB, detailPermintaan: DetailPermintaan[] } | null>> {\\n' +\n    '  108     try {\\n' +\n    '  109         const transactionRequest = await prisma.$transaction(async (tx: Prisma.TransactionClient): Promise<{ requestMBR: RequestRB, detailPermintaan: DetailPermintaan[] } | null> => {\\n' +\n    '→ 110             const deleteOldRequest = await tx.permintaan.delete({\\n' +\n    '                    where: {\\n' +\n    '                  +   id: Int\\n' +\n    '                    }\\n' +\n    '                  })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: '\\n' +\n    'Invalid `tx.permintaan.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:110:64\\n' +\n    '\\n' +\n    '  107 export async function edit_request(data: RequestRB): Promise<ResultModel<{ requestRB: RequestRB, detailPermintaan: DetailPermintaan[] } | null>> {\\n' +\n    '  108     try {\\n' +\n    '  109         const transactionRequest = await prisma.$transaction(async (tx: Prisma.TransactionClient): Promise<{ requestMBR: RequestRB, detailPermintaan: DetailPermintaan[] } | null> => {\\n' +\n    '→ 110             const deleteOldRequest = await tx.permintaan.delete({\\n' +\n    '                    where: {\\n' +\n    '                  +   id: Int\\n' +\n    '                    }\\n' +\n    '                  })\\n' +\n    '\\n' +\n    'Argument `id` is missing.'\n}","service":"user-service","timestamp":"2024-11-17 20:10:03"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.permintaan.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:110:64\\n' +\n    '\\n' +\n    '  107 export async function edit_request(data: RequestRB): Promise<ResultModel<{ requestRB: RequestRB, detailPermintaan: DetailPermintaan[] } | null>> {\\n' +\n    '  108     try {\\n' +\n    '  109         const transactionRequest = await prisma.$transaction(async (tx: Prisma.TransactionClient): Promise<{ requestMBR: RequestRB, detailPermintaan: DetailPermintaan[] } | null> => {\\n' +\n    '→ 110             const deleteOldRequest = await tx.permintaan.delete({\\n' +\n    '                    where: {\\n' +\n    '                  +   id: Int\\n' +\n    '                    }\\n' +\n    '                  })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: '\\n' +\n    'Invalid `tx.permintaan.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:110:64\\n' +\n    '\\n' +\n    '  107 export async function edit_request(data: RequestRB): Promise<ResultModel<{ requestRB: RequestRB, detailPermintaan: DetailPermintaan[] } | null>> {\\n' +\n    '  108     try {\\n' +\n    '  109         const transactionRequest = await prisma.$transaction(async (tx: Prisma.TransactionClient): Promise<{ requestMBR: RequestRB, detailPermintaan: DetailPermintaan[] } | null> => {\\n' +\n    '→ 110             const deleteOldRequest = await tx.permintaan.delete({\\n' +\n    '                    where: {\\n' +\n    '                  +   id: Int\\n' +\n    '                    }\\n' +\n    '                  })\\n' +\n    '\\n' +\n    'Argument `id` is missing.'\n}","service":"user-service","timestamp":"2024-11-17 20:11:17"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.permintaan.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:110:64\\n' +\n    '\\n' +\n    '  107 export async function edit_request(data: RequestRB): Promise<ResultModel<{ requestRB: RequestRB, detailPermintaan: DetailPermintaan[] } | null>> {\\n' +\n    '  108     try {\\n' +\n    '  109         const transactionRequest = await prisma.$transaction(async (tx: Prisma.TransactionClient): Promise<{ requestMBR: RequestRB, detailPermintaan: DetailPermintaan[] } | null> => {\\n' +\n    '→ 110             const deleteOldRequest = await tx.permintaan.delete({\\n' +\n    '                    where: {\\n' +\n    '                  +   id: Int\\n' +\n    '                    }\\n' +\n    '                  })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: '\\n' +\n    'Invalid `tx.permintaan.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:110:64\\n' +\n    '\\n' +\n    '  107 export async function edit_request(data: RequestRB): Promise<ResultModel<{ requestRB: RequestRB, detailPermintaan: DetailPermintaan[] } | null>> {\\n' +\n    '  108     try {\\n' +\n    '  109         const transactionRequest = await prisma.$transaction(async (tx: Prisma.TransactionClient): Promise<{ requestMBR: RequestRB, detailPermintaan: DetailPermintaan[] } | null> => {\\n' +\n    '→ 110             const deleteOldRequest = await tx.permintaan.delete({\\n' +\n    '                    where: {\\n' +\n    '                  +   id: Int\\n' +\n    '                    }\\n' +\n    '                  })\\n' +\n    '\\n' +\n    'Argument `id` is missing.'\n}","service":"user-service","timestamp":"2024-11-17 20:11:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `tx.permintaan.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:110:64\\n' +\n    '\\n' +\n    '  107 export async function edit_request(data: RequestRB): Promise<ResultModel<{ requestRB: RequestRB, detailPermintaan: DetailPermintaan[] } | null>> {\\n' +\n    '  108     try {\\n' +\n    '  109         const transactionRequest = await prisma.$transaction(async (tx: Prisma.TransactionClient): Promise<{ requestMBR: RequestRB, detailPermintaan: DetailPermintaan[] } | null> => {\\n' +\n    '→ 110             const deleteOldRequest = await tx.permintaan.delete({\\n' +\n    '                    where: {\\n' +\n    '                  +   id: Int\\n' +\n    '                    }\\n' +\n    '                  })\\n' +\n    '\\n' +\n    'Argument `id` is missing.',\n  context: '\\n' +\n    'Invalid `tx.permintaan.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:110:64\\n' +\n    '\\n' +\n    '  107 export async function edit_request(data: RequestRB): Promise<ResultModel<{ requestRB: RequestRB, detailPermintaan: DetailPermintaan[] } | null>> {\\n' +\n    '  108     try {\\n' +\n    '  109         const transactionRequest = await prisma.$transaction(async (tx: Prisma.TransactionClient): Promise<{ requestMBR: RequestRB, detailPermintaan: DetailPermintaan[] } | null> => {\\n' +\n    '→ 110             const deleteOldRequest = await tx.permintaan.delete({\\n' +\n    '                    where: {\\n' +\n    '                  +   id: Int\\n' +\n    '                    }\\n' +\n    '                  })\\n' +\n    '\\n' +\n    'Argument `id` is missing.'\n}","service":"user-service","timestamp":"2024-11-17 20:12:23"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-17 20:37:28"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-17 20:37:55"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_users_model.ts:297:41\\n' +\n    '\\n' +\n    '  294 \\n' +\n    '  295 let password = data.password == \"\" ? undefined : data.password\\n' +\n    '  296 \\n' +\n    '→ 297 const user = await prisma.users.update(\\n' +\n    \"The provided value for the column is too long for the column's type. Column: nik\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/model/admin/admin_users_model.ts:297:41\\n' +\n        '\\n' +\n        '  294 \\n' +\n        '  295 let password = data.password == \"\" ? undefined : data.password\\n' +\n        '  296 \\n' +\n        '→ 297 const user = await prisma.users.update(\\n' +\n        \"The provided value for the column is too long for the column's type. Column: nik\",\n      context: {\n        code: 'P2000',\n        meta: { modelName: 'users', column_name: 'nik' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-17 21:07:08"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2025-11-17 21:15:11"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2025-11-17 21:15:11"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2025-11-17 21:15:13"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2025-11-17 21:15:13"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2025-11-17 21:15:19"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2025-11-17 21:15:19"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2025-11-17 21:15:19"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2025-11-17 21:15:19"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'map')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'map')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25)',\n  [message]: \"Cannot read properties of null (reading 'map')\"\n}","service":"user-service","timestamp":"2024-11-17 21:19:25"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'map')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'map')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25)',\n  [message]: \"Cannot read properties of null (reading 'map')\"\n}","service":"user-service","timestamp":"2024-11-17 21:19:26"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'map')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'map')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25)',\n  [message]: \"Cannot read properties of null (reading 'map')\"\n}","service":"user-service","timestamp":"2024-11-17 21:19:27"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'map')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'map')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25)',\n  [message]: \"Cannot read properties of null (reading 'map')\"\n}","service":"user-service","timestamp":"2024-11-17 21:19:28"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'map')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'map')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25)',\n  [message]: \"Cannot read properties of null (reading 'map')\"\n}","service":"user-service","timestamp":"2024-11-17 21:19:28"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'map')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'map')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25)',\n  [message]: \"Cannot read properties of null (reading 'map')\"\n}","service":"user-service","timestamp":"2024-11-17 21:19:28"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'map')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'map')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25)',\n  [message]: \"Cannot read properties of null (reading 'map')\"\n}","service":"user-service","timestamp":"2024-11-17 21:19:28"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'map')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'map')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25)',\n  [message]: \"Cannot read properties of null (reading 'map')\"\n}","service":"user-service","timestamp":"2024-11-17 21:19:28"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of null (reading 'map')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\n    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\n    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\n    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25) {\n  [stack]: \"TypeError: Cannot read properties of null (reading 'map')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:69:24\\n' +\n    '    at async Proxy._transactionWithCallback (/media/ikhsan/Data/linux/Project/MBR/node_modules/@prisma/client/runtime/library.js:131:7483)\\n' +\n    '    at async Object.add_request (/media/ikhsan/Data/linux/Project/MBR/backend/model/users/users_rb_model.ts:47:36)\\n' +\n    '    at async add_request (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:34:25)',\n  [message]: \"Cannot read properties of null (reading 'map')\"\n}","service":"user-service","timestamp":"2024-11-17 21:20:20"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-21 20:47:51"}
{"level":"error","message":"CustomError: {\n  message: 'Another Issue',\n  context: [\n    {\n      message: 'Another Issue',\n      context: { code: 'A999', message: 'Unexpected Token Issue' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-21 20:47:51"}
{"level":"error","message":"CustomError: {\n  message: 'Password Salah',\n  context: [\n    { message: 'Password Salah', context: { code: 'L002' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-21 21:54:58"}
{"level":"error","message":"CustomError: {\n  message: 'Empty Field',\n  context: [\n    {\n      message: 'Empty Field',\n      context: { code: 422, message: 'Field Input Kosong' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-22 06:30:23"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Aktif',\n  context: [\n    { message: 'User Tidak Aktif', context: { code: 'L003' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-22 06:31:06"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Aktif',\n  context: [\n    { message: 'User Tidak Aktif', context: { code: 'L003' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-22 06:31:43"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Ditemukan',\n  context: [\n    { message: 'User Tidak Ditemukan', context: { code: 'L001' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-22 21:02:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$FOatdabnPvpNNdpGU1nrWOs1SAoALW6tSOLuTHxGO/f4R.JX7FSve\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:28.509Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.',\n  context: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$FOatdabnPvpNNdpGU1nrWOs1SAoALW6tSOLuTHxGO/f4R.JX7FSve\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:28.509Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.'\n}","service":"user-service","timestamp":"2024-11-22 21:16:28"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$1F0BM78owixGUubZW5gaD.0GApwKogwaJ19KPm2JcsBwrD53LJbRq\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:30.466Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.',\n  context: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$1F0BM78owixGUubZW5gaD.0GApwKogwaJ19KPm2JcsBwrD53LJbRq\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:30.466Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.'\n}","service":"user-service","timestamp":"2024-11-22 21:16:30"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$L2uGpcVYHRpwOJa1.z8hWOFUhz7d0VOA2YIbm/v/kM5nXMQHVQ066\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:32.844Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.',\n  context: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$L2uGpcVYHRpwOJa1.z8hWOFUhz7d0VOA2YIbm/v/kM5nXMQHVQ066\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:32.844Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.'\n}","service":"user-service","timestamp":"2024-11-22 21:16:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$uVb/VVZfvNhO9V7mhHoBTuXzpw7XC4vQOm.VhoWDAXBhv9r7KK3r2\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:33.853Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.',\n  context: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$uVb/VVZfvNhO9V7mhHoBTuXzpw7XC4vQOm.VhoWDAXBhv9r7KK3r2\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:33.853Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.'\n}","service":"user-service","timestamp":"2024-11-22 21:16:33"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$JcZZnv3Yl6lemOb3iougfuNH82x2ixYB6wzHRw.pP8g4Q5nDRMhhy\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:39.522Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.',\n  context: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$JcZZnv3Yl6lemOb3iougfuNH82x2ixYB6wzHRw.pP8g4Q5nDRMhhy\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:39.522Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.'\n}","service":"user-service","timestamp":"2024-11-22 21:16:39"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$/PgMunOM2aabMOCWNtQsKusl/pduG6NoDE6FQF.1.XL7R8i3C9Ku6\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:40.585Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.',\n  context: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$/PgMunOM2aabMOCWNtQsKusl/pduG6NoDE6FQF.1.XL7R8i3C9Ku6\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:40.585Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.'\n}","service":"user-service","timestamp":"2024-11-22 21:16:40"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$QriLGWmPntBf8/z2KlPY/.ZGJY9X8k/5bc95VCf3px.SbQaSyDFoK\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:41.603Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.',\n  context: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$QriLGWmPntBf8/z2KlPY/.ZGJY9X8k/5bc95VCf3px.SbQaSyDFoK\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:41.603Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.'\n}","service":"user-service","timestamp":"2024-11-22 21:16:41"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$6S..hWPGBYuQ85abgDeeSuXMQ.H1ULvdhbOGrlmNmLciE6.tL2wMK\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:42.249Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.',\n  context: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$6S..hWPGBYuQ85abgDeeSuXMQ.H1ULvdhbOGrlmNmLciE6.tL2wMK\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:42.249Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.'\n}","service":"user-service","timestamp":"2024-11-22 21:16:42"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$IC9xporgpqeujNs8xj68LenBRYafb4NhMIAeVQ45csYxK5ysCoIHS\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:42.840Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.',\n  context: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$IC9xporgpqeujNs8xj68LenBRYafb4NhMIAeVQ45csYxK5ysCoIHS\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:42.840Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.'\n}","service":"user-service","timestamp":"2024-11-22 21:16:42"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$K.dfWcRICpFNs6diqx7uH.2aM3JYDbx7zJQo7WsYvt4fP1Zuk2YhG\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:43.273Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.',\n  context: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$K.dfWcRICpFNs6diqx7uH.2aM3JYDbx7zJQo7WsYvt4fP1Zuk2YhG\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:43.273Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.'\n}","service":"user-service","timestamp":"2024-11-22 21:16:43"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$2ynHzMFjeE3qNFnb6J9nsu/PvsumCxCY8me8UlveYcRgUeUIFPhqC\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:43.754Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.',\n  context: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$2ynHzMFjeE3qNFnb6J9nsu/PvsumCxCY8me8UlveYcRgUeUIFPhqC\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:43.754Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.'\n}","service":"user-service","timestamp":"2024-11-22 21:16:43"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$c5oGoVY1TT2yO1upFqi0beN2eMJpKXHHoT59YlSwPLM38xcbD0Icq\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:44.171Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.',\n  context: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$c5oGoVY1TT2yO1upFqi0beN2eMJpKXHHoT59YlSwPLM38xcbD0Icq\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:44.171Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.'\n}","service":"user-service","timestamp":"2024-11-22 21:16:44"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$gxgvHaP5o5Z5yZwUtjP02.jtjZve6AUmk830iMmm46Vh5DufGZ/TS\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:44.612Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.',\n  context: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$gxgvHaP5o5Z5yZwUtjP02.jtjZve6AUmk830iMmm46Vh5DufGZ/TS\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:44.612Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.'\n}","service":"user-service","timestamp":"2024-11-22 21:16:44"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$JLjsjo27be9zxQkFBQ54u.wTCp8dynxqpaFSGPlLADscctoIpb2W2\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:45.135Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.',\n  context: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$JLjsjo27be9zxQkFBQ54u.wTCp8dynxqpaFSGPlLADscctoIpb2W2\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:45.135Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.'\n}","service":"user-service","timestamp":"2024-11-22 21:16:45"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$3/Or3DJc3lkEuImQfBquF.2AVBLxLt.R6xwLTyvAacwd08Ylz3Km2\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:45.697Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.',\n  context: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$3/Or3DJc3lkEuImQfBquF.2AVBLxLt.R6xwLTyvAacwd08Ylz3Km2\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:45.697Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.'\n}","service":"user-service","timestamp":"2024-11-22 21:16:45"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$t7QbrI.Xv/6ldEKQwAA8GOUZKl9MjzC8qLZtrM8SilvnxJPLwQP2y\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:46.261Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.',\n  context: '\\n' +\n    'Invalid `prisma.users.create()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:21:41\\n' +\n    '\\n' +\n    '  18 export async function add_user_model(data: any): Promise<ResultModel<User | null>> {\\n' +\n    '  19 \\n' +\n    '  20     try {\\n' +\n    '→ 21         const user = await prisma.users.create({\\n' +\n    '               data: {\\n' +\n    '                 nama: \"Ikhan Majid\",\\n' +\n    '                 nik: 5,\\n' +\n    '                      ~\\n' +\n    '                 email: \"ikhsanmajid@intra.net\",\\n' +\n    '                 password: \"$2b$10$t7QbrI.Xv/6ldEKQwAA8GOUZKl9MjzC8qLZtrM8SilvnxJPLwQP2y\",\\n' +\n    '                 isAdmin: false,\\n' +\n    '                 isActive: true,\\n' +\n    '                 dateCreated: \"2024-11-22T14:16:46.261Z\"\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 email: true\\n' +\n    '               }\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `nik`: Invalid value provided. Expected String, provided Int.'\n}","service":"user-service","timestamp":"2024-11-22 21:16:46"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:328:47\\n' +\n    '\\n' +\n    '  325 \\n' +\n    '  326 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  327     try {\\n' +\n    '→ 328         const user = await prisma.users.delete(\\n' +\n    'Foreign key constraint failed on the field: `idCreated`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.delete()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:328:47\\n' +\n        '\\n' +\n        '  325 \\n' +\n        '  326 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  327     try {\\n' +\n        '→ 328         const user = await prisma.users.delete(\\n' +\n        'Foreign key constraint failed on the field: `idCreated`',\n      context: {\n        code: 'P2003',\n        meta: { modelName: 'users', field_name: 'idCreated' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-22 21:37:33"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.delete()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:328:47\\n' +\n    '\\n' +\n    '  325 \\n' +\n    '  326 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n    '  327     try {\\n' +\n    '→ 328         const user = await prisma.users.delete(\\n' +\n    'Foreign key constraint failed on the field: `idCreated`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.delete()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:328:47\\n' +\n        '\\n' +\n        '  325 \\n' +\n        '  326 export async function delete_users_model(data: any): Promise<ResultModel<User>> {\\n' +\n        '  327     try {\\n' +\n        '→ 328         const user = await prisma.users.delete(\\n' +\n        'Foreign key constraint failed on the field: `idCreated`',\n      context: {\n        code: 'P2003',\n        meta: { modelName: 'users', field_name: 'idCreated' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-22 21:37:34"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.users.update()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:297:41\\n' +\n    '\\n' +\n    '  294 \\n' +\n    '  295 let password = data.password == \"\" ? undefined : data.password\\n' +\n    '  296 \\n' +\n    '→ 297 const user = await prisma.users.update(\\n' +\n    \"The provided value for the column is too long for the column's type. Column: nik\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.users.update()` invocation in\\n' +\n        '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_users_service.ts:297:41\\n' +\n        '\\n' +\n        '  294 \\n' +\n        '  295 let password = data.password == \"\" ? undefined : data.password\\n' +\n        '  296 \\n' +\n        '→ 297 const user = await prisma.users.update(\\n' +\n        \"The provided value for the column is too long for the column's type. Column: nik\",\n      context: {\n        code: 'P2000',\n        meta: { modelName: 'users', column_name: 'nik' }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-22 21:46:53"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Ditemukan',\n  context: [\n    { message: 'User Tidak Ditemukan', context: { code: 'L001' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-23 06:43:54"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:24:58"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:25:11"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:25:54"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:26:04"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:26:12"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:26:13"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:26:14"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:26:14"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:26:15"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:26:15"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:26:15"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:26:16"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:27:19"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:27:36"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:29:15"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:31:49"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:31:57"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:32:18"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:33:02"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:34:38"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:35:01"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:39:40"}
{"level":"error","message":"CustomError: {\n  message: 'Backend Error',\n  context: [\n    { message: 'Backend Error', context: { code: 'L999' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:39:41"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Ditemukan',\n  context: [\n    { message: 'User Tidak Ditemukan', context: { code: 'L001' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:39:52"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Ditemukan',\n  context: [\n    { message: 'User Tidak Ditemukan', context: { code: 'L001' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-24 19:39:54"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:191:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:191:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-11-25 21:06:26"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:191:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:191:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-11-25 21:07:10"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:191:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:191:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-11-25 21:07:11"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:191:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:191:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-11-25 21:07:52"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:191:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:191:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-11-25 21:07:54"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:192:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:192:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-11-25 21:08:27"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:192:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:192:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-11-25 21:10:14"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:192:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:192:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-11-25 21:10:15"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'toString')\n    at /media/ikhsan/Data/linux/Project/MBR/backend/services/users/users_rb_service.ts:402:29\n    at Array.map (<anonymous>)\n    at Object.get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/services/users/users_rb_service.ts:400:20)\n    at async get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:188:25) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'toString')\\n\" +\n    '    at /media/ikhsan/Data/linux/Project/MBR/backend/services/users/users_rb_service.ts:402:29\\n' +\n    '    at Array.map (<anonymous>)\\n' +\n    '    at Object.get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/services/users/users_rb_service.ts:400:20)\\n' +\n    '    at async get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:188:25)',\n  [message]: \"Cannot read properties of undefined (reading 'toString')\"\n}","service":"user-service","timestamp":"2024-11-25 21:13:20"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:192:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:192:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-11-25 21:13:38"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:192:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:192:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-11-25 21:15:40"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:192:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/media/ikhsan/Data/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_rb_return_by_product (/media/ikhsan/Data/linux/Project/MBR/backend/controller/users/users_rb.ts:192:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-11-25 21:15:41"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-25 22:26:22"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-25 22:27:15"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-25 22:29:53"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-25 22:29:54"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-25 22:30:19"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-25 22:30:51"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-25 22:30:52"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-25 22:30:53"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 1\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-25 22:31:39"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-26 21:19:51"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-26 21:19:51"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-26 21:19:51"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-26 21:19:51"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-26 21:20:02"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-26 21:20:02"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-26 21:20:02"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-26 21:20:02"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-26 21:21:40"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-26 21:21:40"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-26 21:21:40"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-26 21:21:40"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-26 21:21:42"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-26 21:21:42"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-26 21:22:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-11-26 21:22:32"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Ditemukan',\n  context: [\n    { message: 'User Tidak Ditemukan', context: { code: 'L001' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 18:40:14"}
{"level":"error","message":"CustomError: {\n  message: 'User Tidak Ditemukan',\n  context: [\n    { message: 'User Tidak Ditemukan', context: { code: 'L001' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 18:42:36"}
{"level":"error","message":"UnknownError: {\n  data: [\n    {\n      id: '108',\n      namaProduk: 'Inza',\n      tanggalBulan: '22-11',\n      tahun: 2024,\n      nomorAwal: '000015',\n      nomorAkhir: '000022',\n      RBBelumKembali: '8'\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:23:44"}
{"level":"error","message":"UnknownError: {\n  data: [\n    {\n      id: '108',\n      namaProduk: 'Inza',\n      tanggalBulan: '22-11',\n      tahun: 2024,\n      nomorAwal: '000015',\n      nomorAkhir: '000022',\n      RBBelumKembali: '8'\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:23:44"}
{"level":"error","message":"UnknownError: {\n  data: [\n    {\n      id: '108',\n      namaProduk: 'Inza',\n      tanggalBulan: '22-11',\n      tahun: 2024,\n      nomorAwal: '000015',\n      nomorAkhir: '000022',\n      RBBelumKembali: '8'\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:23:46"}
{"level":"error","message":"UnknownError: {\n  data: [\n    {\n      id: '108',\n      namaProduk: 'Inza',\n      tanggalBulan: '22-11',\n      tahun: 2024,\n      nomorAwal: '000015',\n      nomorAkhir: '000022',\n      RBBelumKembali: '8'\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:23:46"}
{"level":"error","message":"UnknownError: {\n  data: [\n    {\n      id: '108',\n      namaProduk: 'Inza',\n      tanggalBulan: '22-11',\n      tahun: 2024,\n      nomorAwal: '000015',\n      nomorAkhir: '000022',\n      RBBelumKembali: '8'\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:23:56"}
{"level":"error","message":"UnknownError: {\n  data: [\n    {\n      id: '108',\n      namaProduk: 'Inza',\n      tanggalBulan: '22-11',\n      tahun: 2024,\n      nomorAwal: '000015',\n      nomorAkhir: '000022',\n      RBBelumKembali: '8'\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:23:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    'Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\"data\"\\' at line 24`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        'Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\"data\"\\' at line 24`',\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\"data\"' at line 24`\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:30:34"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    'Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\"data\"\\' at line 24`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        'Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\"data\"\\' at line 24`',\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\"data\"' at line 24`\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:30:34"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    'Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\"data\"\\' at line 24`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        'Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\"data\"\\' at line 24`',\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\"data\"' at line 24`\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:30:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    'Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\"data\"\\' at line 24`',\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        'Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\"data\"\\' at line 24`',\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\"data\"' at line 24`\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:30:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n    \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n        \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n            \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:41:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n    \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n        \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n            \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:41:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n    \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n        \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n            \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:41:39"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n    \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n        \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n            \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:41:39"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n    \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 27`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n        \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 27`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n            \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 27\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:42:07"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n    \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 27`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n        \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 27`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n            \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 27\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:42:07"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n    \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 27`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n        \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 27`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n            \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 27\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:42:10"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n    \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 27`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n        \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 27`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'HAVING \\n\" +\n            \"                COUNT(CASE WHEN n.status = 'ACTIVE' THEN 1 END) > 0' at line 27\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-05 19:42:10"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-08 10:44:22"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 24`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 24`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 24\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-08 11:03:20"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 24`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 24`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 24\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-08 11:03:20"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 24`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 24`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 24\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-08 11:04:14"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 24`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 24`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?' at line 24\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-08 11:04:14"}
{"level":"error","message":"CustomError: {\n  message: 'Empty Field',\n  context: [\n    {\n      message: 'Empty Field',\n      context: { code: 422, message: 'Field Input Kosong' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-08 19:50:22"}
{"level":"error","message":"CustomError: {\n  message: 'Empty Field',\n  context: [\n    {\n      message: 'Empty Field',\n      context: { code: 422, message: 'Field Input Kosong' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-08 19:50:25"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-08 22:58:58"}
{"level":"error","message":"CustomError: {\n  message: 'Empty Field',\n  context: [\n    {\n      message: 'Empty Field',\n      context: { code: 422, message: 'Field Input Kosong' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-09 21:51:48"}
{"level":"error","message":"CustomError: {\n  message: 'Password Salah',\n  context: [\n    { message: 'Password Salah', context: { code: 'L002' } },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-09 21:51:59"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:08:29"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:08:29"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:08:37"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/media/ikhsan/Data/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:08:37"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:24:29"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:24:29"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:26:45"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:26:45"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:27:04"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:31:41"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:31:41"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:32:28"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:32:28"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:33:12"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:33:12"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:33:50"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:33:50"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:33:54"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:33:54"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:34:02"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:34:02"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:34:24"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:34:29"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:34:41"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:34:46"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:34:48"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:34:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:34:51"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:37:13"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:37:14"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:37:17"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:37:17"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:37:27"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:37:27"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:37:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:37:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:37:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:37:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:39:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:39:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:39:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:39:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:39:59"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:39:59"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:40:28"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:40:28"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:41:06"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:41:06"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:42:40"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:42:40"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:43:12"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-09 23:43:12"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:30:01"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:30:01"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:30:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:30:38"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:31:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:31:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:32:42"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:32:42"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:32:44"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:32:44"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:32:45"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:33:05"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:33:05"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:33:07"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:33:33"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:33:33"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:33:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:33:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:34:36"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:34:36"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:34:40"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:34:44"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:34:50"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:34:51"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-10 19:34:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0\\n\" +\n    \"        JumlahOutstanding > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0\\n\" +\n        \"        JumlahOutstanding > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0\\n\" +\n            \"        JumlahOutstanding > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 20:04:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0\\n\" +\n    \"        JumlahOutstanding > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0\\n\" +\n        \"        JumlahOutstanding > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0\\n\" +\n            \"        JumlahOutstanding > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 20:04:34"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0\\n\" +\n    \"        JumlahOutstanding > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0\\n\" +\n        \"        JumlahOutstanding > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0\\n\" +\n            \"        JumlahOutstanding > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 20:04:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0\\n\" +\n    \"        JumlahOutstanding > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0\\n\" +\n        \"        JumlahOutstanding > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0\\n\" +\n            \"        JumlahOutstanding > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 20:05:16"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0\\n\" +\n    \"        JumlahOutstanding > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0\\n\" +\n        \"        JumlahOutstanding > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0\\n\" +\n            \"        JumlahOutstanding > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 20:05:17"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0 \\n\" +\n    \"        JumlahOutstanding > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0 \\n\" +\n        \"        JumlahOutstanding > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0 \\n\" +\n            \"        JumlahOutstanding > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 20:06:03"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0 \\n\" +\n    \"        JumlahOutstanding > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0 \\n\" +\n        \"        JumlahOutstanding > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0 \\n\" +\n            \"        JumlahOutstanding > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 20:06:04"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0 \\n\" +\n    \"        JumlahOutstanding > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0 \\n\" +\n        \"        JumlahOutstanding > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0 \\n\" +\n            \"        JumlahOutstanding > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 20:06:33"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0 \\n\" +\n    \"        JumlahOutstanding > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0 \\n\" +\n        \"        JumlahOutstanding > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'RBBelumKembali > 0 \\n\" +\n            \"        JumlahOutstanding > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 20:06:34"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'JumlahOutstanding > 0' at line 26`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'JumlahOutstanding > 0' at line 26`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'JumlahOutstanding > 0' at line 26\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 20:07:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'outstanding' in 'having clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'outstanding' in 'having clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'outstanding' in 'having clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 20:08:31"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'outstanding' in 'having clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'outstanding' in 'having clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'outstanding' in 'having clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 20:08:32"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/mnt/209E4A363A0AC02B/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/mnt/209E4A363A0AC02B/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_rb_return_by_product (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:321:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/mnt/209E4A363A0AC02B/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/mnt/209E4A363A0AC02B/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_rb_return_by_product (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:321:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-12-10 20:10:25"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/mnt/209E4A363A0AC02B/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/mnt/209E4A363A0AC02B/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_rb_return_by_product (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:321:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/mnt/209E4A363A0AC02B/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/mnt/209E4A363A0AC02B/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_rb_return_by_product (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:321:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-12-10 20:10:27"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM\\n\" +\n    '            nomormbr n\\n' +\n    '        JOIN \\n' +\n    \"            detailpermintaanmbr d ON d' at line 12`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM\\n\" +\n        '            nomormbr n\\n' +\n        '        JOIN \\n' +\n        \"            detailpermintaanmbr d ON d' at line 12`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM\\n\" +\n            '            nomormbr n\\n' +\n            '        JOIN \\n' +\n            \"            detailpermintaanmbr d ON d' at line 12\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 20:13:31"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM\\n\" +\n    '            nomormbr n\\n' +\n    '        JOIN \\n' +\n    \"            detailpermintaanmbr d ON d' at line 12`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM\\n\" +\n        '            nomormbr n\\n' +\n        '        JOIN \\n' +\n        \"            detailpermintaanmbr d ON d' at line 12`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM\\n\" +\n            '            nomormbr n\\n' +\n            '        JOIN \\n' +\n            \"            detailpermintaanmbr d ON d' at line 12\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 20:13:32"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/mnt/209E4A363A0AC02B/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/mnt/209E4A363A0AC02B/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_rb_return_by_product (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:321:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/mnt/209E4A363A0AC02B/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/mnt/209E4A363A0AC02B/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_rb_return_by_product (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:321:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-12-10 20:20:16"}
{"level":"error","message":"UnknownError: TypeError: Do not know how to serialize a BigInt\n    at JSON.stringify (<anonymous>)\n    at stringify (/mnt/209E4A363A0AC02B/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\n    at ServerResponse.json (/mnt/209E4A363A0AC02B/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\n    at get_rb_return_by_product (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:321:36) {\n  [stack]: 'TypeError: Do not know how to serialize a BigInt\\n' +\n    '    at JSON.stringify (<anonymous>)\\n' +\n    '    at stringify (/mnt/209E4A363A0AC02B/linux/Project/MBR/node_modules/express/lib/response.js:1159:12)\\n' +\n    '    at ServerResponse.json (/mnt/209E4A363A0AC02B/linux/Project/MBR/node_modules/express/lib/response.js:272:14)\\n' +\n    '    at get_rb_return_by_product (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:321:36)',\n  [message]: 'Do not know how to serialize a BigInt'\n}","service":"user-service","timestamp":"2024-12-10 20:20:17"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n    \"            AND RBBelumKembali > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n        \"            AND RBBelumKembali > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n            \"            AND RBBelumKembali > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 21:04:46"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n    \"            AND RBBelumKembali > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n        \"            AND RBBelumKembali > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n            \"            AND RBBelumKembali > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 21:04:46"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n    \"            AND RBBelumKembali > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n        \"            AND RBBelumKembali > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n            \"            AND RBBelumKembali > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 21:04:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n    \"            AND RBBelumKembali > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n        \"            AND RBBelumKembali > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n            \"            AND RBBelumKembali > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 21:04:56"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n    \"            AND RBBelumKembali > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n        \"            AND RBBelumKembali > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n            \"            AND RBBelumKembali > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 21:05:20"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n    \"            AND RBBelumKembali > 0' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n        \"            AND RBBelumKembali > 0' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '1=1 \\n\" +\n            \"            AND RBBelumKembali > 0' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 21:05:20"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    'Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\"\\n' +\n    '            YEAR(r.timeCreated) AS tahun,\\n' +\n    \"            MIN(n.nomorUrut) AS nomo' at line 7`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        'Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\"\\n' +\n        '            YEAR(r.timeCreated) AS tahun,\\n' +\n        \"            MIN(n.nomorUrut) AS nomo' at line 7`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\"\\n` +\n            '            YEAR(r.timeCreated) AS tahun,\\n' +\n            \"            MIN(n.nomorUrut) AS nomo' at line 7\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 21:12:04"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    'Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\"\\n' +\n    '            YEAR(r.timeCreated) AS tahun,\\n' +\n    \"            MIN(n.nomorUrut) AS nomo' at line 7`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        'Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\"\\n' +\n        '            YEAR(r.timeCreated) AS tahun,\\n' +\n        \"            MIN(n.nomorUrut) AS nomo' at line 7`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\"\\n` +\n            '            YEAR(r.timeCreated) AS tahun,\\n' +\n            \"            MIN(n.nomorUrut) AS nomo' at line 7\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 21:12:23"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    'Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\"\\n' +\n    '            YEAR(r.timeCreated) AS tahun,\\n' +\n    \"            MIN(n.nomorUrut) AS nomo' at line 7`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        'Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \\'\"\\n' +\n        '            YEAR(r.timeCreated) AS tahun,\\n' +\n        \"            MIN(n.nomorUrut) AS nomo' at line 7`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '\"\\n` +\n            '            YEAR(r.timeCreated) AS tahun,\\n' +\n            \"            MIN(n.nomorUrut) AS nomo' at line 7\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 21:12:25"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 22:40:28"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-10 22:40:28"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-11 18:38:22"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-11 18:38:22"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''\\n\" +\n    '        GROUP BY\\n' +\n    \"            p.namaProduk, r.timeCreated, d.idProduk, d.idPerm' at line 25`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1064`. Message: `You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''\\n\" +\n        '        GROUP BY\\n' +\n        \"            p.namaProduk, r.timeCreated, d.idProduk, d.idPerm' at line 25`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1064',\n          message: \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''\\n\" +\n            '        GROUP BY\\n' +\n            \"            p.namaProduk, r.timeCreated, d.idProduk, d.idPerm' at line 25\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 20:07:31"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'r.timeCreated' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'r.timeCreated' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'r.timeCreated' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 20:09:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'r.timeCreated' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'r.timeCreated' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'r.timeCreated' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 20:10:32"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 21:26:03"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:00"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:00"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:00"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:00"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:00"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:00"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:07"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:07"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:07"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:07"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:07"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:07"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:15"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:15"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:15"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:15"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:15"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:51:15"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:55:22"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:55:22"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:55:22"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:55:22"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:55:22"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:55:22"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:55:43"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:55:43"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:55:43"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:55:43"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:55:43"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:55:43"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:55:47"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 22:55:47"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-11 22:56:06"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-11 22:56:06"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-11 23:01:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-11 23:01:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-11 23:02:01"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-11 23:02:01"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-11 23:02:44"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-11 23:02:44"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-11 23:02:59"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-11 23:02:59"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-11 23:03:00"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-11 23:03:00"}
{"level":"error","message":"CustomError: {\n  message: 'Empty Field',\n  context: [\n    {\n      message: 'Empty Field',\n      context: { code: 422, message: 'Field Input Kosong' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-11 23:25:01"}
{"level":"error","message":"CustomError: {\n  message: 'Token Tidak Ditemukan',\n  context: [\n    {\n      message: 'Token Tidak Ditemukan',\n      context: { code: 'A003', message: 'Token Tidak Ditemukan' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-12 06:46:19"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'namaBagian')\n    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'namaBagian')\\n\" +\n    '    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74)',\n  [message]: \"Cannot read properties of undefined (reading 'namaBagian')\"\n}","service":"user-service","timestamp":"2024-12-12 06:46:57"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'namaBagian')\n    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'namaBagian')\\n\" +\n    '    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74)',\n  [message]: \"Cannot read properties of undefined (reading 'namaBagian')\"\n}","service":"user-service","timestamp":"2024-12-12 06:46:58"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'namaBagian')\n    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'namaBagian')\\n\" +\n    '    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74)',\n  [message]: \"Cannot read properties of undefined (reading 'namaBagian')\"\n}","service":"user-service","timestamp":"2024-12-12 06:46:58"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'namaBagian')\n    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'namaBagian')\\n\" +\n    '    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74)',\n  [message]: \"Cannot read properties of undefined (reading 'namaBagian')\"\n}","service":"user-service","timestamp":"2024-12-12 06:46:59"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'namaBagian')\n    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'namaBagian')\\n\" +\n    '    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74)',\n  [message]: \"Cannot read properties of undefined (reading 'namaBagian')\"\n}","service":"user-service","timestamp":"2024-12-12 06:46:59"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 18:41:05"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 18:41:05"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 18:41:06"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 18:41:06"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:11:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:11:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:12:22"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:12:22"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:12:27"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:12:27"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:12:48"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:12:48"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:13:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:13:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:14:02"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:14:12"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:14:14"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:14:17"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:14:21"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:14:25"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:14:26"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:14:30"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:14:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:14:35"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:15:40"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:15:40"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:16:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:16:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:21:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:21:32"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:22:06"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:22:06"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:24:33"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:24:33"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:24:33"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:24:33"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:24:38"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:24:38"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:24:38"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:24:38"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:27:07"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:27:07"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:31:28"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:31:28"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:31:31"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:31:31"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:33:38"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:33:38"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:33:53"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:33:53"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:34:13"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:34:13"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:34:15"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:34:17"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:34:21"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:34:21"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:34:44"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:34:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:34:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:34:53"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:34:57"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:35:06"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:35:07"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:39:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:39:58"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:40:07"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:40:07"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:43:19"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:43:19"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:43:24"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.',\n  context: '\\n' +\n    'Invalid `prisma.produk.findMany()` invocation in\\n' +\n    '/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/services/admin/admin_product_service.ts:68:48\\n' +\n    '\\n' +\n    '  65 export async function get_product_by_bagian(data: { idBagian: number | null, namaProduk: string | null, status: boolean | null, limit: null | number, offset: null | number }): Promise<ResultModel<produk[] | null> | { data: string }> {\\n' +\n    '  66     try {\\n' +\n    '  67         let result: produk[] = []\\n' +\n    '→ 68         const getProduct = await prisma.produk.findMany({\\n' +\n    '               where: {\\n' +\n    '                 AND: [\\n' +\n    '                   {\\n' +\n    '                     idBagian: NaN\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     namaProduk: {\\n' +\n    '                       contains: undefined\\n' +\n    '                     }\\n' +\n    '                   },\\n' +\n    '                   {\\n' +\n    '                     isActive: undefined\\n' +\n    '                   }\\n' +\n    '                 ]\\n' +\n    '               },\\n' +\n    '               select: {\\n' +\n    '                 id: true,\\n' +\n    '                 namaProduk: true,\\n' +\n    '                 idBagian: true,\\n' +\n    '                 idBagianFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaBagian: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 idKategori: true,\\n' +\n    '                 idKategoriFK: {\\n' +\n    '                   select: {\\n' +\n    '                     namaKategori: true\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 isActive: true\\n' +\n    '               },\\n' +\n    '               orderBy: [\\n' +\n    '                 {\\n' +\n    '                   idBagianFK: {\\n' +\n    '                     namaBagian: \"asc\"\\n' +\n    '                   }\\n' +\n    '                 },\\n' +\n    '                 {\\n' +\n    '                   namaProduk: \"asc\"\\n' +\n    '                 }\\n' +\n    '               ],\\n' +\n    '               skip: undefined,\\n' +\n    '               take: undefined\\n' +\n    '             })\\n' +\n    '\\n' +\n    'Argument `idBagian` is missing.'\n}","service":"user-service","timestamp":"2024-12-12 19:43:24"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 04:16:46"}
{"level":"error","message":"CustomError: {\n  message: 'Token Expired',\n  context: [\n    {\n      message: 'Token Expired',\n      context: { code: 'A002', message: 'Token Kadaluarsa' }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 04:16:49"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 05:08:02"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 05:11:14"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 05:12:02"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 05:12:51"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 05:17:19"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 05:20:21"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 05:21:46"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'namaBagian')\n    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'namaBagian')\\n\" +\n    '    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74)',\n  [message]: \"Cannot read properties of undefined (reading 'namaBagian')\"\n}","service":"user-service","timestamp":"2024-12-13 05:25:40"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'namaBagian')\n    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'namaBagian')\\n\" +\n    '    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74)',\n  [message]: \"Cannot read properties of undefined (reading 'namaBagian')\"\n}","service":"user-service","timestamp":"2024-12-13 05:25:46"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'namaBagian')\n    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'namaBagian')\\n\" +\n    '    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74)',\n  [message]: \"Cannot read properties of undefined (reading 'namaBagian')\"\n}","service":"user-service","timestamp":"2024-12-13 05:25:47"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'namaBagian')\n    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'namaBagian')\\n\" +\n    '    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74)',\n  [message]: \"Cannot read properties of undefined (reading 'namaBagian')\"\n}","service":"user-service","timestamp":"2024-12-13 05:26:38"}
{"level":"error","message":"UnknownError: TypeError: Cannot read properties of undefined (reading 'namaBagian')\n    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74) {\n  [stack]: \"TypeError: Cannot read properties of undefined (reading 'namaBagian')\\n\" +\n    '    at generate_report_rb_belum_kembali_perbagian (/mnt/209E4A363A0AC02B/linux/Project/MBR/backend/controller/admin/admin_product_rb.ts:462:74)',\n  [message]: \"Cannot read properties of undefined (reading 'namaBagian')\"\n}","service":"user-service","timestamp":"2024-12-13 05:27:29"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'undefined' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'undefined' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'undefined' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 05:45:08"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'undefined' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'undefined' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'undefined' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 05:48:24"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 05:59:22"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 05:59:23"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 05:59:23"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 05:59:24"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 05:59:24"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 05:59:24"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 05:59:29"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 06:00:01"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 06:00:04"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 06:00:06"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 06:00:07"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 06:00:08"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 06:00:08"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 06:00:08"}
{"level":"error","message":"PrismaError: {\n  message: '\\n' +\n    'Invalid `prisma.$queryRaw()` invocation:\\n' +\n    '\\n' +\n    '\\n' +\n    \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n  context: [\n    {\n      message: '\\n' +\n        'Invalid `prisma.$queryRaw()` invocation:\\n' +\n        '\\n' +\n        '\\n' +\n        \"Raw query failed. Code: `1054`. Message: `Unknown column 'NaN' in 'where clause'`\",\n      context: {\n        code: 'P2010',\n        meta: {\n          code: '1054',\n          message: \"Unknown column 'NaN' in 'where clause'\"\n        }\n      }\n    },\n    [length]: 1\n  ]\n}","service":"user-service","timestamp":"2024-12-13 06:00:08"}
